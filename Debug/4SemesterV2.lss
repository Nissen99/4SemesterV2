
4SemesterV2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004a2  00800200  00005446  000054da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005446  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001045  008006a2  008006a2  0000597c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000597c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000059d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000910  00000000  00000000  00005a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ba1a  00000000  00000000  00006328  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002bc4  00000000  00000000  00011d42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005b11  00000000  00000000  00014906  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002244  00000000  00000000  0001a418  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003a9c  00000000  00000000  0001c65c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b0ae  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008a8  00000000  00000000  0002b1a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	dd c3       	rjmp	.+1978   	; 0x7ec <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 43 1f 	jmp	0x3e86	; 0x3e86 <__vector_25>
      68:	0c 94 95 1f 	jmp	0x3f2a	; 0x3f2a <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 d9 1f 	jmp	0x3fb2	; 0x3fb2 <__vector_36>
      94:	0c 94 2b 20 	jmp	0x4056	; 0x4056 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 01 23 	jmp	0x4602	; 0x4602 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 6f 20 	jmp	0x40de	; 0x40de <__vector_51>
      d0:	0c 94 c1 20 	jmp	0x4182	; 0x4182 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 05 21 	jmp	0x420a	; 0x420a <__vector_54>
      dc:	0c 94 57 21 	jmp	0x42ae	; 0x42ae <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	fa 16       	cp	r15, r26
      e6:	fa 16       	cp	r15, r26
      e8:	fa 16       	cp	r15, r26
      ea:	31 17       	cp	r19, r17
      ec:	39 17       	cp	r19, r25
      ee:	4e 17       	cp	r20, r30
      f0:	fa 16       	cp	r15, r26
      f2:	fa 16       	cp	r15, r26
      f4:	31 17       	cp	r19, r17
      f6:	39 17       	cp	r19, r25
      f8:	23 23       	and	r18, r19
      fa:	93 23       	and	r25, r19
      fc:	93 23       	and	r25, r19
      fe:	93 23       	and	r25, r19
     100:	93 23       	and	r25, r19
     102:	93 23       	and	r25, r19
     104:	93 23       	and	r25, r19
     106:	93 23       	and	r25, r19
     108:	23 23       	and	r18, r19
     10a:	93 23       	and	r25, r19
     10c:	93 23       	and	r25, r19
     10e:	93 23       	and	r25, r19
     110:	93 23       	and	r25, r19
     112:	93 23       	and	r25, r19
     114:	93 23       	and	r25, r19
     116:	93 23       	and	r25, r19
     118:	25 23       	and	r18, r21
     11a:	93 23       	and	r25, r19
     11c:	93 23       	and	r25, r19
     11e:	93 23       	and	r25, r19
     120:	93 23       	and	r25, r19
     122:	93 23       	and	r25, r19
     124:	93 23       	and	r25, r19
     126:	93 23       	and	r25, r19
     128:	93 23       	and	r25, r19
     12a:	93 23       	and	r25, r19
     12c:	93 23       	and	r25, r19
     12e:	93 23       	and	r25, r19
     130:	93 23       	and	r25, r19
     132:	93 23       	and	r25, r19
     134:	93 23       	and	r25, r19
     136:	93 23       	and	r25, r19
     138:	25 23       	and	r18, r21
     13a:	93 23       	and	r25, r19
     13c:	93 23       	and	r25, r19
     13e:	93 23       	and	r25, r19
     140:	93 23       	and	r25, r19
     142:	93 23       	and	r25, r19
     144:	93 23       	and	r25, r19
     146:	93 23       	and	r25, r19
     148:	93 23       	and	r25, r19
     14a:	93 23       	and	r25, r19
     14c:	93 23       	and	r25, r19
     14e:	93 23       	and	r25, r19
     150:	93 23       	and	r25, r19
     152:	93 23       	and	r25, r19
     154:	93 23       	and	r25, r19
     156:	93 23       	and	r25, r19
     158:	8f 23       	and	r24, r31
     15a:	93 23       	and	r25, r19
     15c:	93 23       	and	r25, r19
     15e:	93 23       	and	r25, r19
     160:	93 23       	and	r25, r19
     162:	93 23       	and	r25, r19
     164:	93 23       	and	r25, r19
     166:	93 23       	and	r25, r19
     168:	5a 23       	and	r21, r26
     16a:	93 23       	and	r25, r19
     16c:	93 23       	and	r25, r19
     16e:	93 23       	and	r25, r19
     170:	93 23       	and	r25, r19
     172:	93 23       	and	r25, r19
     174:	93 23       	and	r25, r19
     176:	93 23       	and	r25, r19
     178:	93 23       	and	r25, r19
     17a:	93 23       	and	r25, r19
     17c:	93 23       	and	r25, r19
     17e:	93 23       	and	r25, r19
     180:	93 23       	and	r25, r19
     182:	93 23       	and	r25, r19
     184:	93 23       	and	r25, r19
     186:	93 23       	and	r25, r19
     188:	4e 23       	and	r20, r30
     18a:	93 23       	and	r25, r19
     18c:	93 23       	and	r25, r19
     18e:	93 23       	and	r25, r19
     190:	93 23       	and	r25, r19
     192:	93 23       	and	r25, r19
     194:	93 23       	and	r25, r19
     196:	93 23       	and	r25, r19
     198:	72 23       	and	r23, r18

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <prvCheckTasksWaitingTermination>
     19e:	80 91 af 14 	lds	r24, 0x14AF	; 0x8014af <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	5c d2       	rcall	.+1208   	; 0x660 <vPortYield>
     1a8:	0e 94 77 17 	call	0x2eee	; 0x2eee <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 77 14 	call	0x28ee	; 0x28ee <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	16 e0       	ldi	r17, 0x06	; 6
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e6 e4       	ldi	r30, 0x46	; 70
     1e4:	f4 e5       	ldi	r31, 0x54	; 84
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a2 3a       	cpi	r26, 0xA2	; 162
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	26 e1       	ldi	r18, 0x16	; 22
     1f8:	a2 ea       	ldi	r26, 0xA2	; 162
     1fa:	b6 e0       	ldi	r27, 0x06	; 6
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a7 3e       	cpi	r26, 0xE7	; 231
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 1a 18 	call	0x3034	; 0x3034 <main>
     20a:	0c 94 21 2a 	jmp	0x5442	; 0x5442 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <trace_init>:
 #include <avr/io.h>
 #include <FreeRTOSConfig.h>
 #include "FreeRTOSTraceDriver.h"

 void trace_init(void)
 {
     210:	08 95       	ret

00000212 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     212:	ee ea       	ldi	r30, 0xAE	; 174
     214:	f6 e0       	ldi	r31, 0x06	; 6
     216:	a2 eb       	ldi	r26, 0xB2	; 178
     218:	b6 e0       	ldi	r27, 0x06	; 6
     21a:	b1 83       	std	Z+1, r27	; 0x01
     21c:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     21e:	13 82       	std	Z+3, r1	; 0x03
     220:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     222:	ea e5       	ldi	r30, 0x5A	; 90
     224:	f4 e1       	ldi	r31, 0x14	; 20
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     226:	f0 93 ad 06 	sts	0x06AD, r31	; 0x8006ad <pxEnd+0x1>
     22a:	e0 93 ac 06 	sts	0x06AC, r30	; 0x8006ac <pxEnd>
    pxEnd->xBlockSize = 0;
     22e:	13 82       	std	Z+3, r1	; 0x03
     230:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     232:	11 82       	std	Z+1, r1	; 0x01
     234:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     236:	88 ea       	ldi	r24, 0xA8	; 168
     238:	9d e0       	ldi	r25, 0x0D	; 13
     23a:	13 96       	adiw	r26, 0x03	; 3
     23c:	9c 93       	st	X, r25
     23e:	8e 93       	st	-X, r24
     240:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     242:	ed 93       	st	X+, r30
     244:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     246:	90 93 a9 06 	sts	0x06A9, r25	; 0x8006a9 <xMinimumEverFreeBytesRemaining+0x1>
     24a:	80 93 a8 06 	sts	0x06A8, r24	; 0x8006a8 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     24e:	90 93 ab 06 	sts	0x06AB, r25	; 0x8006ab <xFreeBytesRemaining+0x1>
     252:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	90 e8       	ldi	r25, 0x80	; 128
     25a:	90 93 a3 06 	sts	0x06A3, r25	; 0x8006a3 <__data_end+0x1>
     25e:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <__data_end>
     262:	08 95       	ret

00000264 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     26a:	ae ea       	ldi	r26, 0xAE	; 174
     26c:	b6 e0       	ldi	r27, 0x06	; 6
     26e:	01 c0       	rjmp	.+2      	; 0x272 <prvInsertBlockIntoFreeList+0xe>
     270:	df 01       	movw	r26, r30
     272:	ed 91       	ld	r30, X+
     274:	fc 91       	ld	r31, X
     276:	11 97       	sbiw	r26, 0x01	; 1
     278:	ec 17       	cp	r30, r28
     27a:	fd 07       	cpc	r31, r29
     27c:	c8 f3       	brcs	.-14     	; 0x270 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     27e:	12 96       	adiw	r26, 0x02	; 2
     280:	8d 91       	ld	r24, X+
     282:	9c 91       	ld	r25, X
     284:	13 97       	sbiw	r26, 0x03	; 3
     286:	9d 01       	movw	r18, r26
     288:	28 0f       	add	r18, r24
     28a:	39 1f       	adc	r19, r25
     28c:	c2 17       	cp	r28, r18
     28e:	d3 07       	cpc	r29, r19
     290:	49 f4       	brne	.+18     	; 0x2a4 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     292:	2a 81       	ldd	r18, Y+2	; 0x02
     294:	3b 81       	ldd	r19, Y+3	; 0x03
     296:	82 0f       	add	r24, r18
     298:	93 1f       	adc	r25, r19
     29a:	13 96       	adiw	r26, 0x03	; 3
     29c:	9c 93       	st	X, r25
     29e:	8e 93       	st	-X, r24
     2a0:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     2a2:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     2a4:	8a 81       	ldd	r24, Y+2	; 0x02
     2a6:	9b 81       	ldd	r25, Y+3	; 0x03
     2a8:	9e 01       	movw	r18, r28
     2aa:	28 0f       	add	r18, r24
     2ac:	39 1f       	adc	r19, r25
     2ae:	e2 17       	cp	r30, r18
     2b0:	f3 07       	cpc	r31, r19
     2b2:	c1 f4       	brne	.+48     	; 0x2e4 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     2b4:	20 91 ac 06 	lds	r18, 0x06AC	; 0x8006ac <pxEnd>
     2b8:	30 91 ad 06 	lds	r19, 0x06AD	; 0x8006ad <pxEnd+0x1>
     2bc:	e2 17       	cp	r30, r18
     2be:	f3 07       	cpc	r31, r19
     2c0:	71 f0       	breq	.+28     	; 0x2de <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     2c2:	22 81       	ldd	r18, Z+2	; 0x02
     2c4:	33 81       	ldd	r19, Z+3	; 0x03
     2c6:	82 0f       	add	r24, r18
     2c8:	93 1f       	adc	r25, r19
     2ca:	9b 83       	std	Y+3, r25	; 0x03
     2cc:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     2ce:	ed 91       	ld	r30, X+
     2d0:	fc 91       	ld	r31, X
     2d2:	11 97       	sbiw	r26, 0x01	; 1
     2d4:	80 81       	ld	r24, Z
     2d6:	91 81       	ldd	r25, Z+1	; 0x01
     2d8:	99 83       	std	Y+1, r25	; 0x01
     2da:	88 83       	st	Y, r24
     2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     2de:	39 83       	std	Y+1, r19	; 0x01
     2e0:	28 83       	st	Y, r18
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     2e4:	f9 83       	std	Y+1, r31	; 0x01
     2e6:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     2e8:	ca 17       	cp	r28, r26
     2ea:	db 07       	cpc	r29, r27
     2ec:	11 f0       	breq	.+4      	; 0x2f2 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     2ee:	cd 93       	st	X+, r28
     2f0:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     2f2:	df 91       	pop	r29
     2f4:	cf 91       	pop	r28
     2f6:	08 95       	ret

000002f8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     2f8:	ef 92       	push	r14
     2fa:	ff 92       	push	r15
     2fc:	0f 93       	push	r16
     2fe:	1f 93       	push	r17
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     306:	0e 94 95 0c 	call	0x192a	; 0x192a <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     30a:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <pxEnd>
     30e:	90 91 ad 06 	lds	r25, 0x06AD	; 0x8006ad <pxEnd+0x1>
     312:	89 2b       	or	r24, r25
     314:	09 f4       	brne	.+2      	; 0x318 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     316:	7d df       	rcall	.-262    	; 0x212 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     318:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <__data_end>
     31c:	90 91 a3 06 	lds	r25, 0x06A3	; 0x8006a3 <__data_end+0x1>
     320:	80 23       	and	r24, r16
     322:	91 23       	and	r25, r17
     324:	89 2b       	or	r24, r25
     326:	09 f0       	breq	.+2      	; 0x32a <pvPortMalloc+0x32>
     328:	76 c0       	rjmp	.+236    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     32a:	01 15       	cp	r16, r1
     32c:	11 05       	cpc	r17, r1
     32e:	49 f0       	breq	.+18     	; 0x342 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     330:	c8 01       	movw	r24, r16
     332:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     334:	08 17       	cp	r16, r24
     336:	19 07       	cpc	r17, r25
     338:	18 f0       	brcs	.+6      	; 0x340 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     33a:	00 e0       	ldi	r16, 0x00	; 0
     33c:	10 e0       	ldi	r17, 0x00	; 0
     33e:	01 c0       	rjmp	.+2      	; 0x342 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     340:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     342:	01 15       	cp	r16, r1
     344:	11 05       	cpc	r17, r1
     346:	09 f4       	brne	.+2      	; 0x34a <pvPortMalloc+0x52>
     348:	69 c0       	rjmp	.+210    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     34a:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <xFreeBytesRemaining>
     34e:	90 91 ab 06 	lds	r25, 0x06AB	; 0x8006ab <xFreeBytesRemaining+0x1>
     352:	80 17       	cp	r24, r16
     354:	91 07       	cpc	r25, r17
     356:	08 f4       	brcc	.+2      	; 0x35a <pvPortMalloc+0x62>
     358:	64 c0       	rjmp	.+200    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     35a:	c0 91 ae 06 	lds	r28, 0x06AE	; 0x8006ae <xStart>
     35e:	d0 91 af 06 	lds	r29, 0x06AF	; 0x8006af <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     362:	ee ea       	ldi	r30, 0xAE	; 174
     364:	f6 e0       	ldi	r31, 0x06	; 6
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     366:	02 c0       	rjmp	.+4      	; 0x36c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     368:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     36a:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     36c:	8a 81       	ldd	r24, Y+2	; 0x02
     36e:	9b 81       	ldd	r25, Y+3	; 0x03
     370:	80 17       	cp	r24, r16
     372:	91 07       	cpc	r25, r17
     374:	20 f4       	brcc	.+8      	; 0x37e <pvPortMalloc+0x86>
     376:	88 81       	ld	r24, Y
     378:	99 81       	ldd	r25, Y+1	; 0x01
     37a:	00 97       	sbiw	r24, 0x00	; 0
     37c:	a9 f7       	brne	.-22     	; 0x368 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     37e:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <pxEnd>
     382:	90 91 ad 06 	lds	r25, 0x06AD	; 0x8006ad <pxEnd+0x1>
     386:	c8 17       	cp	r28, r24
     388:	d9 07       	cpc	r29, r25
     38a:	09 f4       	brne	.+2      	; 0x38e <pvPortMalloc+0x96>
     38c:	4d c0       	rjmp	.+154    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     38e:	e0 80       	ld	r14, Z
     390:	f1 80       	ldd	r15, Z+1	; 0x01
     392:	84 e0       	ldi	r24, 0x04	; 4
     394:	e8 0e       	add	r14, r24
     396:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     398:	88 81       	ld	r24, Y
     39a:	99 81       	ldd	r25, Y+1	; 0x01
     39c:	91 83       	std	Z+1, r25	; 0x01
     39e:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     3a0:	2a 81       	ldd	r18, Y+2	; 0x02
     3a2:	3b 81       	ldd	r19, Y+3	; 0x03
     3a4:	20 1b       	sub	r18, r16
     3a6:	31 0b       	sbc	r19, r17
     3a8:	29 30       	cpi	r18, 0x09	; 9
     3aa:	31 05       	cpc	r19, r1
     3ac:	48 f0       	brcs	.+18     	; 0x3c0 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     3ae:	ce 01       	movw	r24, r28
     3b0:	80 0f       	add	r24, r16
     3b2:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     3b4:	fc 01       	movw	r30, r24
     3b6:	33 83       	std	Z+3, r19	; 0x03
     3b8:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     3ba:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     3bc:	0a 83       	std	Y+2, r16	; 0x02
     3be:	52 df       	rcall	.-348    	; 0x264 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     3c0:	2a 81       	ldd	r18, Y+2	; 0x02
     3c2:	3b 81       	ldd	r19, Y+3	; 0x03
     3c4:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <xFreeBytesRemaining>
     3c8:	90 91 ab 06 	lds	r25, 0x06AB	; 0x8006ab <xFreeBytesRemaining+0x1>
     3cc:	82 1b       	sub	r24, r18
     3ce:	93 0b       	sbc	r25, r19
     3d0:	90 93 ab 06 	sts	0x06AB, r25	; 0x8006ab <xFreeBytesRemaining+0x1>
     3d4:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     3d8:	40 91 a8 06 	lds	r20, 0x06A8	; 0x8006a8 <xMinimumEverFreeBytesRemaining>
     3dc:	50 91 a9 06 	lds	r21, 0x06A9	; 0x8006a9 <xMinimumEverFreeBytesRemaining+0x1>
     3e0:	84 17       	cp	r24, r20
     3e2:	95 07       	cpc	r25, r21
     3e4:	20 f4       	brcc	.+8      	; 0x3ee <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     3e6:	90 93 a9 06 	sts	0x06A9, r25	; 0x8006a9 <xMinimumEverFreeBytesRemaining+0x1>
     3ea:	80 93 a8 06 	sts	0x06A8, r24	; 0x8006a8 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     3ee:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <__data_end>
     3f2:	90 91 a3 06 	lds	r25, 0x06A3	; 0x8006a3 <__data_end+0x1>
     3f6:	28 2b       	or	r18, r24
     3f8:	39 2b       	or	r19, r25
     3fa:	3b 83       	std	Y+3, r19	; 0x03
     3fc:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     3fe:	19 82       	std	Y+1, r1	; 0x01
     400:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     402:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <xNumberOfSuccessfulAllocations>
     406:	90 91 a7 06 	lds	r25, 0x06A7	; 0x8006a7 <xNumberOfSuccessfulAllocations+0x1>
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	90 93 a7 06 	sts	0x06A7, r25	; 0x8006a7 <xNumberOfSuccessfulAllocations+0x1>
     410:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <xNumberOfSuccessfulAllocations>
     414:	0b c0       	rjmp	.+22     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     416:	e1 2c       	mov	r14, r1
     418:	f1 2c       	mov	r15, r1
     41a:	08 c0       	rjmp	.+16     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     41c:	e1 2c       	mov	r14, r1
     41e:	f1 2c       	mov	r15, r1
     420:	05 c0       	rjmp	.+10     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     422:	e1 2c       	mov	r14, r1
     424:	f1 2c       	mov	r15, r1
     426:	02 c0       	rjmp	.+4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     428:	e1 2c       	mov	r14, r1
     42a:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     42c:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     430:	e1 14       	cp	r14, r1
     432:	f1 04       	cpc	r15, r1
     434:	11 f4       	brne	.+4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     436:	0e 94 83 17 	call	0x2f06	; 0x2f06 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     43a:	c7 01       	movw	r24, r14
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	1f 91       	pop	r17
     442:	0f 91       	pop	r16
     444:	ff 90       	pop	r15
     446:	ef 90       	pop	r14
     448:	08 95       	ret

0000044a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     452:	00 97       	sbiw	r24, 0x00	; 0
     454:	91 f1       	breq	.+100    	; 0x4ba <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     456:	ec 01       	movw	r28, r24
     458:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     45a:	4a 81       	ldd	r20, Y+2	; 0x02
     45c:	5b 81       	ldd	r21, Y+3	; 0x03
     45e:	20 91 a2 06 	lds	r18, 0x06A2	; 0x8006a2 <__data_end>
     462:	30 91 a3 06 	lds	r19, 0x06A3	; 0x8006a3 <__data_end+0x1>
     466:	ba 01       	movw	r22, r20
     468:	62 23       	and	r22, r18
     46a:	73 23       	and	r23, r19
     46c:	67 2b       	or	r22, r23
     46e:	29 f1       	breq	.+74     	; 0x4ba <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     470:	68 81       	ld	r22, Y
     472:	79 81       	ldd	r23, Y+1	; 0x01
     474:	67 2b       	or	r22, r23
     476:	09 f5       	brne	.+66     	; 0x4ba <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     478:	20 95       	com	r18
     47a:	30 95       	com	r19
     47c:	24 23       	and	r18, r20
     47e:	35 23       	and	r19, r21
     480:	3b 83       	std	Y+3, r19	; 0x03
     482:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     484:	0e 94 95 0c 	call	0x192a	; 0x192a <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     488:	8a 81       	ldd	r24, Y+2	; 0x02
     48a:	9b 81       	ldd	r25, Y+3	; 0x03
     48c:	20 91 aa 06 	lds	r18, 0x06AA	; 0x8006aa <xFreeBytesRemaining>
     490:	30 91 ab 06 	lds	r19, 0x06AB	; 0x8006ab <xFreeBytesRemaining+0x1>
     494:	82 0f       	add	r24, r18
     496:	93 1f       	adc	r25, r19
     498:	90 93 ab 06 	sts	0x06AB, r25	; 0x8006ab <xFreeBytesRemaining+0x1>
     49c:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     4a0:	ce 01       	movw	r24, r28
     4a2:	e0 de       	rcall	.-576    	; 0x264 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     4a4:	80 91 a4 06 	lds	r24, 0x06A4	; 0x8006a4 <xNumberOfSuccessfulFrees>
     4a8:	90 91 a5 06 	lds	r25, 0x06A5	; 0x8006a5 <xNumberOfSuccessfulFrees+0x1>
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	90 93 a5 06 	sts	0x06A5, r25	; 0x8006a5 <xNumberOfSuccessfulFrees+0x1>
     4b2:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     4b6:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	08 95       	ret

000004c4 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     4c4:	fc 01       	movw	r30, r24
     4c6:	03 96       	adiw	r24, 0x03	; 3
     4c8:	92 83       	std	Z+2, r25	; 0x02
     4ca:	81 83       	std	Z+1, r24	; 0x01
     4cc:	4f ef       	ldi	r20, 0xFF	; 255
     4ce:	5f ef       	ldi	r21, 0xFF	; 255
     4d0:	ba 01       	movw	r22, r20
     4d2:	43 83       	std	Z+3, r20	; 0x03
     4d4:	54 83       	std	Z+4, r21	; 0x04
     4d6:	65 83       	std	Z+5, r22	; 0x05
     4d8:	76 83       	std	Z+6, r23	; 0x06
     4da:	90 87       	std	Z+8, r25	; 0x08
     4dc:	87 83       	std	Z+7, r24	; 0x07
     4de:	92 87       	std	Z+10, r25	; 0x0a
     4e0:	81 87       	std	Z+9, r24	; 0x09
     4e2:	10 82       	st	Z, r1
     4e4:	08 95       	ret

000004e6 <vListInitialiseItem>:
     4e6:	fc 01       	movw	r30, r24
     4e8:	13 86       	std	Z+11, r1	; 0x0b
     4ea:	12 86       	std	Z+10, r1	; 0x0a
     4ec:	08 95       	ret

000004ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     4f8:	08 81       	ld	r16, Y
     4fa:	19 81       	ldd	r17, Y+1	; 0x01
     4fc:	2a 81       	ldd	r18, Y+2	; 0x02
     4fe:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     500:	0f 3f       	cpi	r16, 0xFF	; 255
     502:	4f ef       	ldi	r20, 0xFF	; 255
     504:	14 07       	cpc	r17, r20
     506:	24 07       	cpc	r18, r20
     508:	34 07       	cpc	r19, r20
     50a:	21 f4       	brne	.+8      	; 0x514 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     50c:	fc 01       	movw	r30, r24
     50e:	a1 85       	ldd	r26, Z+9	; 0x09
     510:	b2 85       	ldd	r27, Z+10	; 0x0a
     512:	11 c0       	rjmp	.+34     	; 0x536 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     514:	dc 01       	movw	r26, r24
     516:	13 96       	adiw	r26, 0x03	; 3
     518:	01 c0       	rjmp	.+2      	; 0x51c <vListInsert+0x2e>
     51a:	df 01       	movw	r26, r30
     51c:	14 96       	adiw	r26, 0x04	; 4
     51e:	ed 91       	ld	r30, X+
     520:	fc 91       	ld	r31, X
     522:	15 97       	sbiw	r26, 0x05	; 5
     524:	40 81       	ld	r20, Z
     526:	51 81       	ldd	r21, Z+1	; 0x01
     528:	62 81       	ldd	r22, Z+2	; 0x02
     52a:	73 81       	ldd	r23, Z+3	; 0x03
     52c:	04 17       	cp	r16, r20
     52e:	15 07       	cpc	r17, r21
     530:	26 07       	cpc	r18, r22
     532:	37 07       	cpc	r19, r23
     534:	90 f7       	brcc	.-28     	; 0x51a <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     536:	14 96       	adiw	r26, 0x04	; 4
     538:	ed 91       	ld	r30, X+
     53a:	fc 91       	ld	r31, X
     53c:	15 97       	sbiw	r26, 0x05	; 5
     53e:	fd 83       	std	Y+5, r31	; 0x05
     540:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     542:	d7 83       	std	Z+7, r29	; 0x07
     544:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     546:	bf 83       	std	Y+7, r27	; 0x07
     548:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     54a:	15 96       	adiw	r26, 0x05	; 5
     54c:	dc 93       	st	X, r29
     54e:	ce 93       	st	-X, r28
     550:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     552:	9b 87       	std	Y+11, r25	; 0x0b
     554:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     556:	fc 01       	movw	r30, r24
     558:	20 81       	ld	r18, Z
     55a:	2f 5f       	subi	r18, 0xFF	; 255
     55c:	20 83       	st	Z, r18
}
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	08 95       	ret

00000568 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     56e:	a2 85       	ldd	r26, Z+10	; 0x0a
     570:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     572:	c4 81       	ldd	r28, Z+4	; 0x04
     574:	d5 81       	ldd	r29, Z+5	; 0x05
     576:	86 81       	ldd	r24, Z+6	; 0x06
     578:	97 81       	ldd	r25, Z+7	; 0x07
     57a:	9f 83       	std	Y+7, r25	; 0x07
     57c:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     57e:	c6 81       	ldd	r28, Z+6	; 0x06
     580:	d7 81       	ldd	r29, Z+7	; 0x07
     582:	84 81       	ldd	r24, Z+4	; 0x04
     584:	95 81       	ldd	r25, Z+5	; 0x05
     586:	9d 83       	std	Y+5, r25	; 0x05
     588:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     58a:	11 96       	adiw	r26, 0x01	; 1
     58c:	8d 91       	ld	r24, X+
     58e:	9c 91       	ld	r25, X
     590:	12 97       	sbiw	r26, 0x02	; 2
     592:	e8 17       	cp	r30, r24
     594:	f9 07       	cpc	r31, r25
     596:	31 f4       	brne	.+12     	; 0x5a4 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     598:	86 81       	ldd	r24, Z+6	; 0x06
     59a:	97 81       	ldd	r25, Z+7	; 0x07
     59c:	12 96       	adiw	r26, 0x02	; 2
     59e:	9c 93       	st	X, r25
     5a0:	8e 93       	st	-X, r24
     5a2:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     5a4:	13 86       	std	Z+11, r1	; 0x0b
     5a6:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     5a8:	8c 91       	ld	r24, X
     5aa:	81 50       	subi	r24, 0x01	; 1
     5ac:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     5ae:	8c 91       	ld	r24, X
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     5b6:	a8 95       	wdr
     5b8:	90 ec       	ldi	r25, 0xC0	; 192
     5ba:	88 e1       	ldi	r24, 0x18	; 24
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	f8 94       	cli
     5c0:	a8 95       	wdr
     5c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     5cc:	08 95       	ret

000005ce <pxPortInitialiseStack>:
     5ce:	fc 01       	movw	r30, r24
     5d0:	60 83       	st	Z, r22
     5d2:	31 97       	sbiw	r30, 0x01	; 1
     5d4:	70 83       	st	Z, r23
     5d6:	31 97       	sbiw	r30, 0x01	; 1
     5d8:	10 82       	st	Z, r1
     5da:	31 97       	sbiw	r30, 0x01	; 1
     5dc:	10 82       	st	Z, r1
     5de:	31 97       	sbiw	r30, 0x01	; 1
     5e0:	20 e8       	ldi	r18, 0x80	; 128
     5e2:	20 83       	st	Z, r18
     5e4:	31 97       	sbiw	r30, 0x01	; 1
     5e6:	10 82       	st	Z, r1
     5e8:	31 97       	sbiw	r30, 0x01	; 1
     5ea:	10 82       	st	Z, r1
     5ec:	31 97       	sbiw	r30, 0x01	; 1
     5ee:	10 82       	st	Z, r1
     5f0:	77 97       	sbiw	r30, 0x17	; 23
     5f2:	40 83       	st	Z, r20
     5f4:	31 97       	sbiw	r30, 0x01	; 1
     5f6:	50 83       	st	Z, r21
     5f8:	86 97       	sbiw	r24, 0x26	; 38
     5fa:	08 95       	ret

000005fc <xPortStartScheduler>:
     5fc:	dc df       	rcall	.-72     	; 0x5b6 <prvSetupTimerInterrupt>
     5fe:	a0 91 1d 15 	lds	r26, 0x151D	; 0x80151d <pxCurrentTCB>
     602:	b0 91 1e 15 	lds	r27, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
     606:	cd 91       	ld	r28, X+
     608:	cd bf       	out	0x3d, r28	; 61
     60a:	dd 91       	ld	r29, X+
     60c:	de bf       	out	0x3e, r29	; 62
     60e:	ff 91       	pop	r31
     610:	ef 91       	pop	r30
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	bf 91       	pop	r27
     618:	af 91       	pop	r26
     61a:	9f 91       	pop	r25
     61c:	8f 91       	pop	r24
     61e:	7f 91       	pop	r23
     620:	6f 91       	pop	r22
     622:	5f 91       	pop	r21
     624:	4f 91       	pop	r20
     626:	3f 91       	pop	r19
     628:	2f 91       	pop	r18
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	ff 90       	pop	r15
     630:	ef 90       	pop	r14
     632:	df 90       	pop	r13
     634:	cf 90       	pop	r12
     636:	bf 90       	pop	r11
     638:	af 90       	pop	r10
     63a:	9f 90       	pop	r9
     63c:	8f 90       	pop	r8
     63e:	7f 90       	pop	r7
     640:	6f 90       	pop	r6
     642:	5f 90       	pop	r5
     644:	4f 90       	pop	r4
     646:	3f 90       	pop	r3
     648:	2f 90       	pop	r2
     64a:	1f 90       	pop	r1
     64c:	0f 90       	pop	r0
     64e:	0c be       	out	0x3c, r0	; 60
     650:	0f 90       	pop	r0
     652:	0b be       	out	0x3b, r0	; 59
     654:	0f 90       	pop	r0
     656:	0f be       	out	0x3f, r0	; 63
     658:	0f 90       	pop	r0
     65a:	08 95       	ret
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	08 95       	ret

00000660 <vPortYield>:
     660:	0f 92       	push	r0
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	f8 94       	cli
     666:	0f 92       	push	r0
     668:	0b b6       	in	r0, 0x3b	; 59
     66a:	0f 92       	push	r0
     66c:	0c b6       	in	r0, 0x3c	; 60
     66e:	0f 92       	push	r0
     670:	1f 92       	push	r1
     672:	11 24       	eor	r1, r1
     674:	2f 92       	push	r2
     676:	3f 92       	push	r3
     678:	4f 92       	push	r4
     67a:	5f 92       	push	r5
     67c:	6f 92       	push	r6
     67e:	7f 92       	push	r7
     680:	8f 92       	push	r8
     682:	9f 92       	push	r9
     684:	af 92       	push	r10
     686:	bf 92       	push	r11
     688:	cf 92       	push	r12
     68a:	df 92       	push	r13
     68c:	ef 92       	push	r14
     68e:	ff 92       	push	r15
     690:	0f 93       	push	r16
     692:	1f 93       	push	r17
     694:	2f 93       	push	r18
     696:	3f 93       	push	r19
     698:	4f 93       	push	r20
     69a:	5f 93       	push	r21
     69c:	6f 93       	push	r22
     69e:	7f 93       	push	r23
     6a0:	8f 93       	push	r24
     6a2:	9f 93       	push	r25
     6a4:	af 93       	push	r26
     6a6:	bf 93       	push	r27
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	ef 93       	push	r30
     6ae:	ff 93       	push	r31
     6b0:	a0 91 1d 15 	lds	r26, 0x151D	; 0x80151d <pxCurrentTCB>
     6b4:	b0 91 1e 15 	lds	r27, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
     6b8:	0d b6       	in	r0, 0x3d	; 61
     6ba:	0d 92       	st	X+, r0
     6bc:	0e b6       	in	r0, 0x3e	; 62
     6be:	0d 92       	st	X+, r0
     6c0:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <vTaskSwitchContext>
     6c4:	a0 91 1d 15 	lds	r26, 0x151D	; 0x80151d <pxCurrentTCB>
     6c8:	b0 91 1e 15 	lds	r27, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
     6cc:	cd 91       	ld	r28, X+
     6ce:	cd bf       	out	0x3d, r28	; 61
     6d0:	dd 91       	ld	r29, X+
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	ff 91       	pop	r31
     6d6:	ef 91       	pop	r30
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	bf 91       	pop	r27
     6de:	af 91       	pop	r26
     6e0:	9f 91       	pop	r25
     6e2:	8f 91       	pop	r24
     6e4:	7f 91       	pop	r23
     6e6:	6f 91       	pop	r22
     6e8:	5f 91       	pop	r21
     6ea:	4f 91       	pop	r20
     6ec:	3f 91       	pop	r19
     6ee:	2f 91       	pop	r18
     6f0:	1f 91       	pop	r17
     6f2:	0f 91       	pop	r16
     6f4:	ff 90       	pop	r15
     6f6:	ef 90       	pop	r14
     6f8:	df 90       	pop	r13
     6fa:	cf 90       	pop	r12
     6fc:	bf 90       	pop	r11
     6fe:	af 90       	pop	r10
     700:	9f 90       	pop	r9
     702:	8f 90       	pop	r8
     704:	7f 90       	pop	r7
     706:	6f 90       	pop	r6
     708:	5f 90       	pop	r5
     70a:	4f 90       	pop	r4
     70c:	3f 90       	pop	r3
     70e:	2f 90       	pop	r2
     710:	1f 90       	pop	r1
     712:	0f 90       	pop	r0
     714:	0c be       	out	0x3c, r0	; 60
     716:	0f 90       	pop	r0
     718:	0b be       	out	0x3b, r0	; 59
     71a:	0f 90       	pop	r0
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	0f 90       	pop	r0
     720:	08 95       	ret

00000722 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     722:	0f 92       	push	r0
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	f8 94       	cli
     728:	0f 92       	push	r0
     72a:	0b b6       	in	r0, 0x3b	; 59
     72c:	0f 92       	push	r0
     72e:	0c b6       	in	r0, 0x3c	; 60
     730:	0f 92       	push	r0
     732:	1f 92       	push	r1
     734:	11 24       	eor	r1, r1
     736:	2f 92       	push	r2
     738:	3f 92       	push	r3
     73a:	4f 92       	push	r4
     73c:	5f 92       	push	r5
     73e:	6f 92       	push	r6
     740:	7f 92       	push	r7
     742:	8f 92       	push	r8
     744:	9f 92       	push	r9
     746:	af 92       	push	r10
     748:	bf 92       	push	r11
     74a:	cf 92       	push	r12
     74c:	df 92       	push	r13
     74e:	ef 92       	push	r14
     750:	ff 92       	push	r15
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	2f 93       	push	r18
     758:	3f 93       	push	r19
     75a:	4f 93       	push	r20
     75c:	5f 93       	push	r21
     75e:	6f 93       	push	r22
     760:	7f 93       	push	r23
     762:	8f 93       	push	r24
     764:	9f 93       	push	r25
     766:	af 93       	push	r26
     768:	bf 93       	push	r27
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	ef 93       	push	r30
     770:	ff 93       	push	r31
     772:	a0 91 1d 15 	lds	r26, 0x151D	; 0x80151d <pxCurrentTCB>
     776:	b0 91 1e 15 	lds	r27, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
     77a:	0d b6       	in	r0, 0x3d	; 61
     77c:	0d 92       	st	X+, r0
     77e:	0e b6       	in	r0, 0x3e	; 62
     780:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     782:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     784:	0e 94 a9 0c 	call	0x1952	; 0x1952 <xTaskIncrementTick>
     788:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     78a:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     78e:	a0 91 1d 15 	lds	r26, 0x151D	; 0x80151d <pxCurrentTCB>
     792:	b0 91 1e 15 	lds	r27, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
     796:	cd 91       	ld	r28, X+
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	dd 91       	ld	r29, X+
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	ff 91       	pop	r31
     7a0:	ef 91       	pop	r30
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	bf 91       	pop	r27
     7a8:	af 91       	pop	r26
     7aa:	9f 91       	pop	r25
     7ac:	8f 91       	pop	r24
     7ae:	7f 91       	pop	r23
     7b0:	6f 91       	pop	r22
     7b2:	5f 91       	pop	r21
     7b4:	4f 91       	pop	r20
     7b6:	3f 91       	pop	r19
     7b8:	2f 91       	pop	r18
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	ff 90       	pop	r15
     7c0:	ef 90       	pop	r14
     7c2:	df 90       	pop	r13
     7c4:	cf 90       	pop	r12
     7c6:	bf 90       	pop	r11
     7c8:	af 90       	pop	r10
     7ca:	9f 90       	pop	r9
     7cc:	8f 90       	pop	r8
     7ce:	7f 90       	pop	r7
     7d0:	6f 90       	pop	r6
     7d2:	5f 90       	pop	r5
     7d4:	4f 90       	pop	r4
     7d6:	3f 90       	pop	r3
     7d8:	2f 90       	pop	r2
     7da:	1f 90       	pop	r1
     7dc:	0f 90       	pop	r0
     7de:	0c be       	out	0x3c, r0	; 60
     7e0:	0f 90       	pop	r0
     7e2:	0b be       	out	0x3b, r0	; 59
     7e4:	0f 90       	pop	r0
     7e6:	0f be       	out	0x3f, r0	; 63
     7e8:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     7ea:	08 95       	ret

000007ec <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     7ec:	9a df       	rcall	.-204    	; 0x722 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     7ee:	18 95       	reti

000007f0 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	f8 94       	cli
     7f4:	0f 92       	push	r0
     7f6:	fc 01       	movw	r30, r24
     7f8:	86 8d       	ldd	r24, Z+30	; 0x1e
     7fa:	81 11       	cpse	r24, r1
     7fc:	02 c0       	rjmp	.+4      	; 0x802 <prvIsQueueEmpty+0x12>
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	01 c0       	rjmp	.+2      	; 0x804 <prvIsQueueEmpty+0x14>
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	0f 90       	pop	r0
     806:	0f be       	out	0x3f, r0	; 63
     808:	08 95       	ret

0000080a <prvIsQueueFull>:
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	f8 94       	cli
     80e:	0f 92       	push	r0
     810:	fc 01       	movw	r30, r24
     812:	26 8d       	ldd	r18, Z+30	; 0x1e
     814:	87 8d       	ldd	r24, Z+31	; 0x1f
     816:	28 13       	cpse	r18, r24
     818:	02 c0       	rjmp	.+4      	; 0x81e <prvIsQueueFull+0x14>
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	01 c0       	rjmp	.+2      	; 0x820 <prvIsQueueFull+0x16>
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	0f 90       	pop	r0
     822:	0f be       	out	0x3f, r0	; 63
     824:	08 95       	ret

00000826 <prvCopyDataToQueue>:
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	ec 01       	movw	r28, r24
     830:	04 2f       	mov	r16, r20
     832:	1e 8d       	ldd	r17, Y+30	; 0x1e
     834:	48 a1       	ldd	r20, Y+32	; 0x20
     836:	41 11       	cpse	r20, r1
     838:	0c c0       	rjmp	.+24     	; 0x852 <prvCopyDataToQueue+0x2c>
     83a:	88 81       	ld	r24, Y
     83c:	99 81       	ldd	r25, Y+1	; 0x01
     83e:	89 2b       	or	r24, r25
     840:	09 f0       	breq	.+2      	; 0x844 <prvCopyDataToQueue+0x1e>
     842:	42 c0       	rjmp	.+132    	; 0x8c8 <prvCopyDataToQueue+0xa2>
     844:	8c 81       	ldd	r24, Y+4	; 0x04
     846:	9d 81       	ldd	r25, Y+5	; 0x05
     848:	0e 94 42 11 	call	0x2284	; 0x2284 <xTaskPriorityDisinherit>
     84c:	1d 82       	std	Y+5, r1	; 0x05
     84e:	1c 82       	std	Y+4, r1	; 0x04
     850:	42 c0       	rjmp	.+132    	; 0x8d6 <prvCopyDataToQueue+0xb0>
     852:	01 11       	cpse	r16, r1
     854:	17 c0       	rjmp	.+46     	; 0x884 <prvCopyDataToQueue+0x5e>
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	8a 81       	ldd	r24, Y+2	; 0x02
     85a:	9b 81       	ldd	r25, Y+3	; 0x03
     85c:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <memcpy>
     860:	28 a1       	ldd	r18, Y+32	; 0x20
     862:	8a 81       	ldd	r24, Y+2	; 0x02
     864:	9b 81       	ldd	r25, Y+3	; 0x03
     866:	82 0f       	add	r24, r18
     868:	91 1d       	adc	r25, r1
     86a:	9b 83       	std	Y+3, r25	; 0x03
     86c:	8a 83       	std	Y+2, r24	; 0x02
     86e:	2c 81       	ldd	r18, Y+4	; 0x04
     870:	3d 81       	ldd	r19, Y+5	; 0x05
     872:	82 17       	cp	r24, r18
     874:	93 07       	cpc	r25, r19
     876:	50 f1       	brcs	.+84     	; 0x8cc <prvCopyDataToQueue+0xa6>
     878:	88 81       	ld	r24, Y
     87a:	99 81       	ldd	r25, Y+1	; 0x01
     87c:	9b 83       	std	Y+3, r25	; 0x03
     87e:	8a 83       	std	Y+2, r24	; 0x02
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	29 c0       	rjmp	.+82     	; 0x8d6 <prvCopyDataToQueue+0xb0>
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	8e 81       	ldd	r24, Y+6	; 0x06
     888:	9f 81       	ldd	r25, Y+7	; 0x07
     88a:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <memcpy>
     88e:	88 a1       	ldd	r24, Y+32	; 0x20
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	91 95       	neg	r25
     894:	81 95       	neg	r24
     896:	91 09       	sbc	r25, r1
     898:	2e 81       	ldd	r18, Y+6	; 0x06
     89a:	3f 81       	ldd	r19, Y+7	; 0x07
     89c:	28 0f       	add	r18, r24
     89e:	39 1f       	adc	r19, r25
     8a0:	3f 83       	std	Y+7, r19	; 0x07
     8a2:	2e 83       	std	Y+6, r18	; 0x06
     8a4:	48 81       	ld	r20, Y
     8a6:	59 81       	ldd	r21, Y+1	; 0x01
     8a8:	24 17       	cp	r18, r20
     8aa:	35 07       	cpc	r19, r21
     8ac:	30 f4       	brcc	.+12     	; 0x8ba <prvCopyDataToQueue+0x94>
     8ae:	2c 81       	ldd	r18, Y+4	; 0x04
     8b0:	3d 81       	ldd	r19, Y+5	; 0x05
     8b2:	82 0f       	add	r24, r18
     8b4:	93 1f       	adc	r25, r19
     8b6:	9f 83       	std	Y+7, r25	; 0x07
     8b8:	8e 83       	std	Y+6, r24	; 0x06
     8ba:	02 30       	cpi	r16, 0x02	; 2
     8bc:	49 f4       	brne	.+18     	; 0x8d0 <prvCopyDataToQueue+0xaa>
     8be:	11 23       	and	r17, r17
     8c0:	49 f0       	breq	.+18     	; 0x8d4 <prvCopyDataToQueue+0xae>
     8c2:	11 50       	subi	r17, 0x01	; 1
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	07 c0       	rjmp	.+14     	; 0x8d6 <prvCopyDataToQueue+0xb0>
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	05 c0       	rjmp	.+10     	; 0x8d6 <prvCopyDataToQueue+0xb0>
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	03 c0       	rjmp	.+6      	; 0x8d6 <prvCopyDataToQueue+0xb0>
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <prvCopyDataToQueue+0xb0>
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	1f 5f       	subi	r17, 0xFF	; 255
     8d8:	1e 8f       	std	Y+30, r17	; 0x1e
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	08 95       	ret

000008e4 <prvCopyDataFromQueue>:
     8e4:	fc 01       	movw	r30, r24
     8e6:	40 a1       	ldd	r20, Z+32	; 0x20
     8e8:	44 23       	and	r20, r20
     8ea:	a9 f0       	breq	.+42     	; 0x916 <prvCopyDataFromQueue+0x32>
     8ec:	50 e0       	ldi	r21, 0x00	; 0
     8ee:	26 81       	ldd	r18, Z+6	; 0x06
     8f0:	37 81       	ldd	r19, Z+7	; 0x07
     8f2:	24 0f       	add	r18, r20
     8f4:	35 1f       	adc	r19, r21
     8f6:	37 83       	std	Z+7, r19	; 0x07
     8f8:	26 83       	std	Z+6, r18	; 0x06
     8fa:	84 81       	ldd	r24, Z+4	; 0x04
     8fc:	95 81       	ldd	r25, Z+5	; 0x05
     8fe:	28 17       	cp	r18, r24
     900:	39 07       	cpc	r19, r25
     902:	20 f0       	brcs	.+8      	; 0x90c <prvCopyDataFromQueue+0x28>
     904:	80 81       	ld	r24, Z
     906:	91 81       	ldd	r25, Z+1	; 0x01
     908:	97 83       	std	Z+7, r25	; 0x07
     90a:	86 83       	std	Z+6, r24	; 0x06
     90c:	cb 01       	movw	r24, r22
     90e:	66 81       	ldd	r22, Z+6	; 0x06
     910:	77 81       	ldd	r23, Z+7	; 0x07
     912:	0c 94 a4 26 	jmp	0x4d48	; 0x4d48 <memcpy>
     916:	08 95       	ret

00000918 <prvUnlockQueue>:
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	ec 01       	movw	r28, r24
     920:	0f b6       	in	r0, 0x3f	; 63
     922:	f8 94       	cli
     924:	0f 92       	push	r0
     926:	1a a1       	ldd	r17, Y+34	; 0x22
     928:	0b c0       	rjmp	.+22     	; 0x940 <prvUnlockQueue+0x28>
     92a:	8b 89       	ldd	r24, Y+19	; 0x13
     92c:	88 23       	and	r24, r24
     92e:	51 f0       	breq	.+20     	; 0x944 <prvUnlockQueue+0x2c>
     930:	ce 01       	movw	r24, r28
     932:	43 96       	adiw	r24, 0x13	; 19
     934:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <xTaskRemoveFromEventList>
     938:	81 11       	cpse	r24, r1
     93a:	0e 94 2b 11 	call	0x2256	; 0x2256 <vTaskMissedYield>
     93e:	11 50       	subi	r17, 0x01	; 1
     940:	11 16       	cp	r1, r17
     942:	9c f3       	brlt	.-26     	; 0x92a <prvUnlockQueue+0x12>
     944:	8f ef       	ldi	r24, 0xFF	; 255
     946:	8a a3       	std	Y+34, r24	; 0x22
     948:	0f 90       	pop	r0
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	0f 92       	push	r0
     952:	19 a1       	ldd	r17, Y+33	; 0x21
     954:	0b c0       	rjmp	.+22     	; 0x96c <prvUnlockQueue+0x54>
     956:	88 85       	ldd	r24, Y+8	; 0x08
     958:	88 23       	and	r24, r24
     95a:	51 f0       	breq	.+20     	; 0x970 <prvUnlockQueue+0x58>
     95c:	ce 01       	movw	r24, r28
     95e:	08 96       	adiw	r24, 0x08	; 8
     960:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <xTaskRemoveFromEventList>
     964:	81 11       	cpse	r24, r1
     966:	0e 94 2b 11 	call	0x2256	; 0x2256 <vTaskMissedYield>
     96a:	11 50       	subi	r17, 0x01	; 1
     96c:	11 16       	cp	r1, r17
     96e:	9c f3       	brlt	.-26     	; 0x956 <prvUnlockQueue+0x3e>
     970:	8f ef       	ldi	r24, 0xFF	; 255
     972:	89 a3       	std	Y+33, r24	; 0x21
     974:	0f 90       	pop	r0
     976:	0f be       	out	0x3f, r0	; 63
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	08 95       	ret

00000980 <xQueueGenericReset>:
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	ec 01       	movw	r28, r24
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	0f 92       	push	r0
     98c:	e8 81       	ld	r30, Y
     98e:	f9 81       	ldd	r31, Y+1	; 0x01
     990:	8f 8d       	ldd	r24, Y+31	; 0x1f
     992:	28 a1       	ldd	r18, Y+32	; 0x20
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	82 9f       	mul	r24, r18
     99a:	a0 01       	movw	r20, r0
     99c:	83 9f       	mul	r24, r19
     99e:	50 0d       	add	r21, r0
     9a0:	92 9f       	mul	r25, r18
     9a2:	50 0d       	add	r21, r0
     9a4:	11 24       	eor	r1, r1
     9a6:	4e 0f       	add	r20, r30
     9a8:	5f 1f       	adc	r21, r31
     9aa:	5d 83       	std	Y+5, r21	; 0x05
     9ac:	4c 83       	std	Y+4, r20	; 0x04
     9ae:	1e 8e       	std	Y+30, r1	; 0x1e
     9b0:	fb 83       	std	Y+3, r31	; 0x03
     9b2:	ea 83       	std	Y+2, r30	; 0x02
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	28 9f       	mul	r18, r24
     9b8:	a0 01       	movw	r20, r0
     9ba:	29 9f       	mul	r18, r25
     9bc:	50 0d       	add	r21, r0
     9be:	38 9f       	mul	r19, r24
     9c0:	50 0d       	add	r21, r0
     9c2:	11 24       	eor	r1, r1
     9c4:	cf 01       	movw	r24, r30
     9c6:	84 0f       	add	r24, r20
     9c8:	95 1f       	adc	r25, r21
     9ca:	9f 83       	std	Y+7, r25	; 0x07
     9cc:	8e 83       	std	Y+6, r24	; 0x06
     9ce:	8f ef       	ldi	r24, 0xFF	; 255
     9d0:	89 a3       	std	Y+33, r24	; 0x21
     9d2:	8a a3       	std	Y+34, r24	; 0x22
     9d4:	61 11       	cpse	r22, r1
     9d6:	0b c0       	rjmp	.+22     	; 0x9ee <xQueueGenericReset+0x6e>
     9d8:	88 85       	ldd	r24, Y+8	; 0x08
     9da:	88 23       	and	r24, r24
     9dc:	71 f0       	breq	.+28     	; 0x9fa <xQueueGenericReset+0x7a>
     9de:	ce 01       	movw	r24, r28
     9e0:	08 96       	adiw	r24, 0x08	; 8
     9e2:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <xTaskRemoveFromEventList>
     9e6:	88 23       	and	r24, r24
     9e8:	41 f0       	breq	.+16     	; 0x9fa <xQueueGenericReset+0x7a>
     9ea:	3a de       	rcall	.-908    	; 0x660 <vPortYield>
     9ec:	06 c0       	rjmp	.+12     	; 0x9fa <xQueueGenericReset+0x7a>
     9ee:	ce 01       	movw	r24, r28
     9f0:	08 96       	adiw	r24, 0x08	; 8
     9f2:	68 dd       	rcall	.-1328   	; 0x4c4 <vListInitialise>
     9f4:	ce 01       	movw	r24, r28
     9f6:	43 96       	adiw	r24, 0x13	; 19
     9f8:	65 dd       	rcall	.-1334   	; 0x4c4 <vListInitialise>
     9fa:	0f 90       	pop	r0
     9fc:	0f be       	out	0x3f, r0	; 63
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	08 95       	ret

00000a06 <prvInitialiseNewQueue>:
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	f8 01       	movw	r30, r16
     a0c:	61 11       	cpse	r22, r1
     a0e:	03 c0       	rjmp	.+6      	; 0xa16 <prvInitialiseNewQueue+0x10>
     a10:	11 83       	std	Z+1, r17	; 0x01
     a12:	00 83       	st	Z, r16
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <prvInitialiseNewQueue+0x14>
     a16:	51 83       	std	Z+1, r21	; 0x01
     a18:	40 83       	st	Z, r20
     a1a:	87 8f       	std	Z+31, r24	; 0x1f
     a1c:	60 a3       	std	Z+32, r22	; 0x20
     a1e:	61 e0       	ldi	r22, 0x01	; 1
     a20:	cf 01       	movw	r24, r30
     a22:	ae df       	rcall	.-164    	; 0x980 <xQueueGenericReset>
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	08 95       	ret

00000a2a <xQueueGenericCreate>:
     a2a:	df 92       	push	r13
     a2c:	ef 92       	push	r14
     a2e:	ff 92       	push	r15
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	f8 2e       	mov	r15, r24
     a3a:	e6 2e       	mov	r14, r22
     a3c:	d4 2e       	mov	r13, r20
     a3e:	86 9f       	mul	r24, r22
     a40:	c0 01       	movw	r24, r0
     a42:	11 24       	eor	r1, r1
     a44:	83 96       	adiw	r24, 0x23	; 35
     a46:	58 dc       	rcall	.-1872   	; 0x2f8 <pvPortMalloc>
     a48:	ec 01       	movw	r28, r24
     a4a:	00 97       	sbiw	r24, 0x00	; 0
     a4c:	41 f0       	breq	.+16     	; 0xa5e <xQueueGenericCreate+0x34>
     a4e:	8c 01       	movw	r16, r24
     a50:	2d 2d       	mov	r18, r13
     a52:	ac 01       	movw	r20, r24
     a54:	4d 5d       	subi	r20, 0xDD	; 221
     a56:	5f 4f       	sbci	r21, 0xFF	; 255
     a58:	6e 2d       	mov	r22, r14
     a5a:	8f 2d       	mov	r24, r15
     a5c:	d4 df       	rcall	.-88     	; 0xa06 <prvInitialiseNewQueue>
     a5e:	ce 01       	movw	r24, r28
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	08 95       	ret

00000a70 <xQueueGenericSend>:
     a70:	cf 92       	push	r12
     a72:	df 92       	push	r13
     a74:	ef 92       	push	r14
     a76:	ff 92       	push	r15
     a78:	0f 93       	push	r16
     a7a:	1f 93       	push	r17
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	cd b7       	in	r28, 0x3d	; 61
     a82:	de b7       	in	r29, 0x3e	; 62
     a84:	29 97       	sbiw	r28, 0x09	; 9
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	f8 94       	cli
     a8a:	de bf       	out	0x3e, r29	; 62
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	cd bf       	out	0x3d, r28	; 61
     a90:	7c 01       	movw	r14, r24
     a92:	6b 01       	movw	r12, r22
     a94:	2e 83       	std	Y+6, r18	; 0x06
     a96:	3f 83       	std	Y+7, r19	; 0x07
     a98:	48 87       	std	Y+8, r20	; 0x08
     a9a:	59 87       	std	Y+9, r21	; 0x09
     a9c:	10 e0       	ldi	r17, 0x00	; 0
     a9e:	0f b6       	in	r0, 0x3f	; 63
     aa0:	f8 94       	cli
     aa2:	0f 92       	push	r0
     aa4:	f7 01       	movw	r30, r14
     aa6:	96 8d       	ldd	r25, Z+30	; 0x1e
     aa8:	87 8d       	ldd	r24, Z+31	; 0x1f
     aaa:	98 17       	cp	r25, r24
     aac:	10 f0       	brcs	.+4      	; 0xab2 <xQueueGenericSend+0x42>
     aae:	02 30       	cpi	r16, 0x02	; 2
     ab0:	b1 f4       	brne	.+44     	; 0xade <xQueueGenericSend+0x6e>
     ab2:	40 2f       	mov	r20, r16
     ab4:	b6 01       	movw	r22, r12
     ab6:	c7 01       	movw	r24, r14
     ab8:	b6 de       	rcall	.-660    	; 0x826 <prvCopyDataToQueue>
     aba:	f7 01       	movw	r30, r14
     abc:	93 89       	ldd	r25, Z+19	; 0x13
     abe:	99 23       	and	r25, r25
     ac0:	41 f0       	breq	.+16     	; 0xad2 <xQueueGenericSend+0x62>
     ac2:	c7 01       	movw	r24, r14
     ac4:	43 96       	adiw	r24, 0x13	; 19
     ac6:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <xTaskRemoveFromEventList>
     aca:	88 23       	and	r24, r24
     acc:	21 f0       	breq	.+8      	; 0xad6 <xQueueGenericSend+0x66>
     ace:	c8 dd       	rcall	.-1136   	; 0x660 <vPortYield>
     ad0:	02 c0       	rjmp	.+4      	; 0xad6 <xQueueGenericSend+0x66>
     ad2:	81 11       	cpse	r24, r1
     ad4:	c5 dd       	rcall	.-1142   	; 0x660 <vPortYield>
     ad6:	0f 90       	pop	r0
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	4c c0       	rjmp	.+152    	; 0xb76 <xQueueGenericSend+0x106>
     ade:	8e 81       	ldd	r24, Y+6	; 0x06
     ae0:	9f 81       	ldd	r25, Y+7	; 0x07
     ae2:	a8 85       	ldd	r26, Y+8	; 0x08
     ae4:	b9 85       	ldd	r27, Y+9	; 0x09
     ae6:	89 2b       	or	r24, r25
     ae8:	8a 2b       	or	r24, r26
     aea:	8b 2b       	or	r24, r27
     aec:	21 f4       	brne	.+8      	; 0xaf6 <xQueueGenericSend+0x86>
     aee:	0f 90       	pop	r0
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	40 c0       	rjmp	.+128    	; 0xb76 <xQueueGenericSend+0x106>
     af6:	11 11       	cpse	r17, r1
     af8:	05 c0       	rjmp	.+10     	; 0xb04 <xQueueGenericSend+0x94>
     afa:	ce 01       	movw	r24, r28
     afc:	01 96       	adiw	r24, 0x01	; 1
     afe:	0e 94 b4 10 	call	0x2168	; 0x2168 <vTaskInternalSetTimeOutState>
     b02:	11 e0       	ldi	r17, 0x01	; 1
     b04:	0f 90       	pop	r0
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	10 d7       	rcall	.+3616   	; 0x192a <vTaskSuspendAll>
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	0f 92       	push	r0
     b10:	f7 01       	movw	r30, r14
     b12:	81 a1       	ldd	r24, Z+33	; 0x21
     b14:	8f 3f       	cpi	r24, 0xFF	; 255
     b16:	09 f4       	brne	.+2      	; 0xb1a <xQueueGenericSend+0xaa>
     b18:	11 a2       	std	Z+33, r1	; 0x21
     b1a:	f7 01       	movw	r30, r14
     b1c:	82 a1       	ldd	r24, Z+34	; 0x22
     b1e:	8f 3f       	cpi	r24, 0xFF	; 255
     b20:	09 f4       	brne	.+2      	; 0xb24 <xQueueGenericSend+0xb4>
     b22:	12 a2       	std	Z+34, r1	; 0x22
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	be 01       	movw	r22, r28
     b2a:	6a 5f       	subi	r22, 0xFA	; 250
     b2c:	7f 4f       	sbci	r23, 0xFF	; 255
     b2e:	ce 01       	movw	r24, r28
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	0e 94 c5 10 	call	0x218a	; 0x218a <xTaskCheckForTimeOut>
     b36:	81 11       	cpse	r24, r1
     b38:	19 c0       	rjmp	.+50     	; 0xb6c <xQueueGenericSend+0xfc>
     b3a:	c7 01       	movw	r24, r14
     b3c:	66 de       	rcall	.-820    	; 0x80a <prvIsQueueFull>
     b3e:	88 23       	and	r24, r24
     b40:	81 f0       	breq	.+32     	; 0xb62 <xQueueGenericSend+0xf2>
     b42:	4e 81       	ldd	r20, Y+6	; 0x06
     b44:	5f 81       	ldd	r21, Y+7	; 0x07
     b46:	68 85       	ldd	r22, Y+8	; 0x08
     b48:	79 85       	ldd	r23, Y+9	; 0x09
     b4a:	c7 01       	movw	r24, r14
     b4c:	08 96       	adiw	r24, 0x08	; 8
     b4e:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <vTaskPlaceOnEventList>
     b52:	c7 01       	movw	r24, r14
     b54:	e1 de       	rcall	.-574    	; 0x918 <prvUnlockQueue>
     b56:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <xTaskResumeAll>
     b5a:	81 11       	cpse	r24, r1
     b5c:	a0 cf       	rjmp	.-192    	; 0xa9e <xQueueGenericSend+0x2e>
     b5e:	80 dd       	rcall	.-1280   	; 0x660 <vPortYield>
     b60:	9e cf       	rjmp	.-196    	; 0xa9e <xQueueGenericSend+0x2e>
     b62:	c7 01       	movw	r24, r14
     b64:	d9 de       	rcall	.-590    	; 0x918 <prvUnlockQueue>
     b66:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <xTaskResumeAll>
     b6a:	99 cf       	rjmp	.-206    	; 0xa9e <xQueueGenericSend+0x2e>
     b6c:	c7 01       	movw	r24, r14
     b6e:	d4 de       	rcall	.-600    	; 0x918 <prvUnlockQueue>
     b70:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <xTaskResumeAll>
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	29 96       	adiw	r28, 0x09	; 9
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	f8 94       	cli
     b7c:	de bf       	out	0x3e, r29	; 62
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	cd bf       	out	0x3d, r28	; 61
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	1f 91       	pop	r17
     b88:	0f 91       	pop	r16
     b8a:	ff 90       	pop	r15
     b8c:	ef 90       	pop	r14
     b8e:	df 90       	pop	r13
     b90:	cf 90       	pop	r12
     b92:	08 95       	ret

00000b94 <prvInitialiseMutex>:
     b94:	0f 93       	push	r16
     b96:	00 97       	sbiw	r24, 0x00	; 0
     b98:	69 f0       	breq	.+26     	; 0xbb4 <prvInitialiseMutex+0x20>
     b9a:	fc 01       	movw	r30, r24
     b9c:	15 82       	std	Z+5, r1	; 0x05
     b9e:	14 82       	std	Z+4, r1	; 0x04
     ba0:	11 82       	std	Z+1, r1	; 0x01
     ba2:	10 82       	st	Z, r1
     ba4:	16 82       	std	Z+6, r1	; 0x06
     ba6:	00 e0       	ldi	r16, 0x00	; 0
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	a9 01       	movw	r20, r18
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	5e df       	rcall	.-324    	; 0xa70 <xQueueGenericSend>
     bb4:	0f 91       	pop	r16
     bb6:	08 95       	ret

00000bb8 <xQueueCreateMutex>:
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	48 2f       	mov	r20, r24
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	33 df       	rcall	.-410    	; 0xa2a <xQueueGenericCreate>
     bc4:	ec 01       	movw	r28, r24
     bc6:	e6 df       	rcall	.-52     	; 0xb94 <prvInitialiseMutex>
     bc8:	ce 01       	movw	r24, r28
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	08 95       	ret

00000bd0 <xQueueGenericSendFromISR>:
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	8a 01       	movw	r16, r20
     bde:	fc 01       	movw	r30, r24
     be0:	56 8d       	ldd	r21, Z+30	; 0x1e
     be2:	37 8d       	ldd	r19, Z+31	; 0x1f
     be4:	53 17       	cp	r21, r19
     be6:	10 f0       	brcs	.+4      	; 0xbec <xQueueGenericSendFromISR+0x1c>
     be8:	22 30       	cpi	r18, 0x02	; 2
     bea:	f9 f4       	brne	.+62     	; 0xc2a <xQueueGenericSendFromISR+0x5a>
     bec:	42 2f       	mov	r20, r18
     bee:	78 01       	movw	r14, r16
     bf0:	ec 01       	movw	r28, r24
     bf2:	1a a1       	ldd	r17, Y+34	; 0x22
     bf4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bf6:	ce 01       	movw	r24, r28
     bf8:	16 de       	rcall	.-980    	; 0x826 <prvCopyDataToQueue>
     bfa:	1f 3f       	cpi	r17, 0xFF	; 255
     bfc:	81 f4       	brne	.+32     	; 0xc1e <xQueueGenericSendFromISR+0x4e>
     bfe:	8b 89       	ldd	r24, Y+19	; 0x13
     c00:	88 23       	and	r24, r24
     c02:	a9 f0       	breq	.+42     	; 0xc2e <xQueueGenericSendFromISR+0x5e>
     c04:	ce 01       	movw	r24, r28
     c06:	43 96       	adiw	r24, 0x13	; 19
     c08:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <xTaskRemoveFromEventList>
     c0c:	88 23       	and	r24, r24
     c0e:	89 f0       	breq	.+34     	; 0xc32 <xQueueGenericSendFromISR+0x62>
     c10:	e1 14       	cp	r14, r1
     c12:	f1 04       	cpc	r15, r1
     c14:	81 f0       	breq	.+32     	; 0xc36 <xQueueGenericSendFromISR+0x66>
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	f7 01       	movw	r30, r14
     c1a:	80 83       	st	Z, r24
     c1c:	0d c0       	rjmp	.+26     	; 0xc38 <xQueueGenericSendFromISR+0x68>
     c1e:	ff 24       	eor	r15, r15
     c20:	f3 94       	inc	r15
     c22:	f1 0e       	add	r15, r17
     c24:	fa a2       	std	Y+34, r15	; 0x22
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	07 c0       	rjmp	.+14     	; 0xc38 <xQueueGenericSendFromISR+0x68>
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	05 c0       	rjmp	.+10     	; 0xc38 <xQueueGenericSendFromISR+0x68>
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	03 c0       	rjmp	.+6      	; 0xc38 <xQueueGenericSendFromISR+0x68>
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	01 c0       	rjmp	.+2      	; 0xc38 <xQueueGenericSendFromISR+0x68>
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	ff 90       	pop	r15
     c42:	ef 90       	pop	r14
     c44:	08 95       	ret

00000c46 <xQueueReceive>:
     c46:	cf 92       	push	r12
     c48:	df 92       	push	r13
     c4a:	ef 92       	push	r14
     c4c:	ff 92       	push	r15
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	29 97       	sbiw	r28, 0x09	; 9
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	8c 01       	movw	r16, r24
     c68:	6b 01       	movw	r12, r22
     c6a:	2e 83       	std	Y+6, r18	; 0x06
     c6c:	3f 83       	std	Y+7, r19	; 0x07
     c6e:	48 87       	std	Y+8, r20	; 0x08
     c70:	59 87       	std	Y+9, r21	; 0x09
     c72:	e1 2c       	mov	r14, r1
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	0f 92       	push	r0
     c7a:	f8 01       	movw	r30, r16
     c7c:	f6 8c       	ldd	r15, Z+30	; 0x1e
     c7e:	ff 20       	and	r15, r15
     c80:	99 f0       	breq	.+38     	; 0xca8 <xQueueReceive+0x62>
     c82:	b6 01       	movw	r22, r12
     c84:	c8 01       	movw	r24, r16
     c86:	2e de       	rcall	.-932    	; 0x8e4 <prvCopyDataFromQueue>
     c88:	fa 94       	dec	r15
     c8a:	f8 01       	movw	r30, r16
     c8c:	f6 8e       	std	Z+30, r15	; 0x1e
     c8e:	80 85       	ldd	r24, Z+8	; 0x08
     c90:	88 23       	and	r24, r24
     c92:	31 f0       	breq	.+12     	; 0xca0 <xQueueReceive+0x5a>
     c94:	c8 01       	movw	r24, r16
     c96:	08 96       	adiw	r24, 0x08	; 8
     c98:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <xTaskRemoveFromEventList>
     c9c:	81 11       	cpse	r24, r1
     c9e:	e0 dc       	rcall	.-1600   	; 0x660 <vPortYield>
     ca0:	0f 90       	pop	r0
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	4f c0       	rjmp	.+158    	; 0xd46 <xQueueReceive+0x100>
     ca8:	8e 81       	ldd	r24, Y+6	; 0x06
     caa:	9f 81       	ldd	r25, Y+7	; 0x07
     cac:	a8 85       	ldd	r26, Y+8	; 0x08
     cae:	b9 85       	ldd	r27, Y+9	; 0x09
     cb0:	89 2b       	or	r24, r25
     cb2:	8a 2b       	or	r24, r26
     cb4:	8b 2b       	or	r24, r27
     cb6:	21 f4       	brne	.+8      	; 0xcc0 <xQueueReceive+0x7a>
     cb8:	0f 90       	pop	r0
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	43 c0       	rjmp	.+134    	; 0xd46 <xQueueReceive+0x100>
     cc0:	e1 10       	cpse	r14, r1
     cc2:	06 c0       	rjmp	.+12     	; 0xcd0 <xQueueReceive+0x8a>
     cc4:	ce 01       	movw	r24, r28
     cc6:	01 96       	adiw	r24, 0x01	; 1
     cc8:	0e 94 b4 10 	call	0x2168	; 0x2168 <vTaskInternalSetTimeOutState>
     ccc:	ee 24       	eor	r14, r14
     cce:	e3 94       	inc	r14
     cd0:	0f 90       	pop	r0
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	2a d6       	rcall	.+3156   	; 0x192a <vTaskSuspendAll>
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	0f 92       	push	r0
     cdc:	f8 01       	movw	r30, r16
     cde:	81 a1       	ldd	r24, Z+33	; 0x21
     ce0:	8f 3f       	cpi	r24, 0xFF	; 255
     ce2:	09 f4       	brne	.+2      	; 0xce6 <xQueueReceive+0xa0>
     ce4:	11 a2       	std	Z+33, r1	; 0x21
     ce6:	f8 01       	movw	r30, r16
     ce8:	82 a1       	ldd	r24, Z+34	; 0x22
     cea:	8f 3f       	cpi	r24, 0xFF	; 255
     cec:	09 f4       	brne	.+2      	; 0xcf0 <xQueueReceive+0xaa>
     cee:	12 a2       	std	Z+34, r1	; 0x22
     cf0:	0f 90       	pop	r0
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	be 01       	movw	r22, r28
     cf6:	6a 5f       	subi	r22, 0xFA	; 250
     cf8:	7f 4f       	sbci	r23, 0xFF	; 255
     cfa:	ce 01       	movw	r24, r28
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	0e 94 c5 10 	call	0x218a	; 0x218a <xTaskCheckForTimeOut>
     d02:	81 11       	cpse	r24, r1
     d04:	17 c0       	rjmp	.+46     	; 0xd34 <xQueueReceive+0xee>
     d06:	c8 01       	movw	r24, r16
     d08:	73 dd       	rcall	.-1306   	; 0x7f0 <prvIsQueueEmpty>
     d0a:	88 23       	and	r24, r24
     d0c:	79 f0       	breq	.+30     	; 0xd2c <xQueueReceive+0xe6>
     d0e:	4e 81       	ldd	r20, Y+6	; 0x06
     d10:	5f 81       	ldd	r21, Y+7	; 0x07
     d12:	68 85       	ldd	r22, Y+8	; 0x08
     d14:	79 85       	ldd	r23, Y+9	; 0x09
     d16:	c8 01       	movw	r24, r16
     d18:	43 96       	adiw	r24, 0x13	; 19
     d1a:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <vTaskPlaceOnEventList>
     d1e:	c8 01       	movw	r24, r16
     d20:	fb dd       	rcall	.-1034   	; 0x918 <prvUnlockQueue>
     d22:	43 d7       	rcall	.+3718   	; 0x1baa <xTaskResumeAll>
     d24:	81 11       	cpse	r24, r1
     d26:	a6 cf       	rjmp	.-180    	; 0xc74 <xQueueReceive+0x2e>
     d28:	9b dc       	rcall	.-1738   	; 0x660 <vPortYield>
     d2a:	a4 cf       	rjmp	.-184    	; 0xc74 <xQueueReceive+0x2e>
     d2c:	c8 01       	movw	r24, r16
     d2e:	f4 dd       	rcall	.-1048   	; 0x918 <prvUnlockQueue>
     d30:	3c d7       	rcall	.+3704   	; 0x1baa <xTaskResumeAll>
     d32:	a0 cf       	rjmp	.-192    	; 0xc74 <xQueueReceive+0x2e>
     d34:	c8 01       	movw	r24, r16
     d36:	f0 dd       	rcall	.-1056   	; 0x918 <prvUnlockQueue>
     d38:	38 d7       	rcall	.+3696   	; 0x1baa <xTaskResumeAll>
     d3a:	c8 01       	movw	r24, r16
     d3c:	59 dd       	rcall	.-1358   	; 0x7f0 <prvIsQueueEmpty>
     d3e:	88 23       	and	r24, r24
     d40:	09 f4       	brne	.+2      	; 0xd44 <xQueueReceive+0xfe>
     d42:	98 cf       	rjmp	.-208    	; 0xc74 <xQueueReceive+0x2e>
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	29 96       	adiw	r28, 0x09	; 9
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	1f 91       	pop	r17
     d58:	0f 91       	pop	r16
     d5a:	ff 90       	pop	r15
     d5c:	ef 90       	pop	r14
     d5e:	df 90       	pop	r13
     d60:	cf 90       	pop	r12
     d62:	08 95       	ret

00000d64 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	0f 92       	push	r0
     d70:	89 a1       	ldd	r24, Y+33	; 0x21
     d72:	8f 3f       	cpi	r24, 0xFF	; 255
     d74:	09 f4       	brne	.+2      	; 0xd78 <vQueueWaitForMessageRestricted+0x14>
     d76:	19 a2       	std	Y+33, r1	; 0x21
     d78:	8a a1       	ldd	r24, Y+34	; 0x22
     d7a:	8f 3f       	cpi	r24, 0xFF	; 255
     d7c:	09 f4       	brne	.+2      	; 0xd80 <vQueueWaitForMessageRestricted+0x1c>
     d7e:	1a a2       	std	Y+34, r1	; 0x22
     d80:	0f 90       	pop	r0
     d82:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     d84:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d86:	81 11       	cpse	r24, r1
     d88:	04 c0       	rjmp	.+8      	; 0xd92 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     d8a:	ce 01       	movw	r24, r28
     d8c:	43 96       	adiw	r24, 0x13	; 19
     d8e:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     d92:	ce 01       	movw	r24, r28
     d94:	c1 dd       	rcall	.-1150   	; 0x918 <prvUnlockQueue>
    }
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	08 95       	ret

00000d9c <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     d9c:	fc 01       	movw	r30, r24
     d9e:	44 81       	ldd	r20, Z+4	; 0x04
     da0:	55 81       	ldd	r21, Z+5	; 0x05
     da2:	22 81       	ldd	r18, Z+2	; 0x02
     da4:	33 81       	ldd	r19, Z+3	; 0x03
     da6:	24 0f       	add	r18, r20
     da8:	35 1f       	adc	r19, r21
     daa:	80 81       	ld	r24, Z
     dac:	91 81       	ldd	r25, Z+1	; 0x01
     dae:	b9 01       	movw	r22, r18
     db0:	68 1b       	sub	r22, r24
     db2:	79 0b       	sbc	r23, r25
     db4:	cb 01       	movw	r24, r22
     db6:	64 17       	cp	r22, r20
     db8:	75 07       	cpc	r23, r21
     dba:	10 f0       	brcs	.+4      	; 0xdc0 <prvBytesInBuffer+0x24>
     dbc:	84 1b       	sub	r24, r20
     dbe:	95 0b       	sbc	r25, r21
     dc0:	08 95       	ret

00000dc2 <prvInitialiseNewStreamBuffer>:
     dc2:	0f 93       	push	r16
     dc4:	fc 01       	movw	r30, r24
     dc6:	8f e0       	ldi	r24, 0x0F	; 15
     dc8:	df 01       	movw	r26, r30
     dca:	1d 92       	st	X+, r1
     dcc:	8a 95       	dec	r24
     dce:	e9 f7       	brne	.-6      	; 0xdca <prvInitialiseNewStreamBuffer+0x8>
     dd0:	75 87       	std	Z+13, r23	; 0x0d
     dd2:	64 87       	std	Z+12, r22	; 0x0c
     dd4:	55 83       	std	Z+5, r21	; 0x05
     dd6:	44 83       	std	Z+4, r20	; 0x04
     dd8:	37 83       	std	Z+7, r19	; 0x07
     dda:	26 83       	std	Z+6, r18	; 0x06
     ddc:	06 87       	std	Z+14, r16	; 0x0e
     dde:	0f 91       	pop	r16
     de0:	08 95       	ret

00000de2 <prvWriteBytesToBuffer>:
     de2:	af 92       	push	r10
     de4:	bf 92       	push	r11
     de6:	cf 92       	push	r12
     de8:	df 92       	push	r13
     dea:	ef 92       	push	r14
     dec:	ff 92       	push	r15
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	6c 01       	movw	r12, r24
     df8:	5b 01       	movw	r10, r22
     dfa:	7a 01       	movw	r14, r20
     dfc:	fc 01       	movw	r30, r24
     dfe:	c2 81       	ldd	r28, Z+2	; 0x02
     e00:	d3 81       	ldd	r29, Z+3	; 0x03
     e02:	04 81       	ldd	r16, Z+4	; 0x04
     e04:	15 81       	ldd	r17, Z+5	; 0x05
     e06:	0c 1b       	sub	r16, r28
     e08:	1d 0b       	sbc	r17, r29
     e0a:	40 17       	cp	r20, r16
     e0c:	51 07       	cpc	r21, r17
     e0e:	08 f4       	brcc	.+2      	; 0xe12 <prvWriteBytesToBuffer+0x30>
     e10:	8a 01       	movw	r16, r20
     e12:	f6 01       	movw	r30, r12
     e14:	84 85       	ldd	r24, Z+12	; 0x0c
     e16:	95 85       	ldd	r25, Z+13	; 0x0d
     e18:	a8 01       	movw	r20, r16
     e1a:	b5 01       	movw	r22, r10
     e1c:	8c 0f       	add	r24, r28
     e1e:	9d 1f       	adc	r25, r29
     e20:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <memcpy>
     e24:	0e 15       	cp	r16, r14
     e26:	1f 05       	cpc	r17, r15
     e28:	58 f4       	brcc	.+22     	; 0xe40 <prvWriteBytesToBuffer+0x5e>
     e2a:	a7 01       	movw	r20, r14
     e2c:	40 1b       	sub	r20, r16
     e2e:	51 0b       	sbc	r21, r17
     e30:	b5 01       	movw	r22, r10
     e32:	60 0f       	add	r22, r16
     e34:	71 1f       	adc	r23, r17
     e36:	f6 01       	movw	r30, r12
     e38:	84 85       	ldd	r24, Z+12	; 0x0c
     e3a:	95 85       	ldd	r25, Z+13	; 0x0d
     e3c:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <memcpy>
     e40:	ce 01       	movw	r24, r28
     e42:	8e 0d       	add	r24, r14
     e44:	9f 1d       	adc	r25, r15
     e46:	f6 01       	movw	r30, r12
     e48:	24 81       	ldd	r18, Z+4	; 0x04
     e4a:	35 81       	ldd	r19, Z+5	; 0x05
     e4c:	82 17       	cp	r24, r18
     e4e:	93 07       	cpc	r25, r19
     e50:	10 f0       	brcs	.+4      	; 0xe56 <prvWriteBytesToBuffer+0x74>
     e52:	82 1b       	sub	r24, r18
     e54:	93 0b       	sbc	r25, r19
     e56:	f6 01       	movw	r30, r12
     e58:	93 83       	std	Z+3, r25	; 0x03
     e5a:	82 83       	std	Z+2, r24	; 0x02
     e5c:	c7 01       	movw	r24, r14
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	ff 90       	pop	r15
     e68:	ef 90       	pop	r14
     e6a:	df 90       	pop	r13
     e6c:	cf 90       	pop	r12
     e6e:	bf 90       	pop	r11
     e70:	af 90       	pop	r10
     e72:	08 95       	ret

00000e74 <prvWriteMessageToBuffer>:
     e74:	cf 92       	push	r12
     e76:	df 92       	push	r13
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	1f 92       	push	r1
     e86:	1f 92       	push	r1
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	7c 01       	movw	r14, r24
     e8e:	6b 01       	movw	r12, r22
     e90:	5a 83       	std	Y+2, r21	; 0x02
     e92:	49 83       	std	Y+1, r20	; 0x01
     e94:	21 15       	cp	r18, r1
     e96:	31 05       	cpc	r19, r1
     e98:	c1 f0       	breq	.+48     	; 0xeca <prvWriteMessageToBuffer+0x56>
     e9a:	fc 01       	movw	r30, r24
     e9c:	86 85       	ldd	r24, Z+14	; 0x0e
     e9e:	80 fd       	sbrc	r24, 0
     ea0:	08 c0       	rjmp	.+16     	; 0xeb2 <prvWriteMessageToBuffer+0x3e>
     ea2:	42 17       	cp	r20, r18
     ea4:	53 07       	cpc	r21, r19
     ea6:	08 f4       	brcc	.+2      	; 0xeaa <prvWriteMessageToBuffer+0x36>
     ea8:	9a 01       	movw	r18, r20
     eaa:	3a 83       	std	Y+2, r19	; 0x02
     eac:	29 83       	std	Y+1, r18	; 0x01
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	0f c0       	rjmp	.+30     	; 0xed0 <prvWriteMessageToBuffer+0x5c>
     eb2:	20 17       	cp	r18, r16
     eb4:	31 07       	cpc	r19, r17
     eb6:	58 f0       	brcs	.+22     	; 0xece <prvWriteMessageToBuffer+0x5a>
     eb8:	42 e0       	ldi	r20, 0x02	; 2
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	be 01       	movw	r22, r28
     ebe:	6f 5f       	subi	r22, 0xFF	; 255
     ec0:	7f 4f       	sbci	r23, 0xFF	; 255
     ec2:	c7 01       	movw	r24, r14
     ec4:	8e df       	rcall	.-228    	; 0xde2 <prvWriteBytesToBuffer>
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	03 c0       	rjmp	.+6      	; 0xed0 <prvWriteMessageToBuffer+0x5c>
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	01 c0       	rjmp	.+2      	; 0xed0 <prvWriteMessageToBuffer+0x5c>
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	88 23       	and	r24, r24
     ed2:	31 f0       	breq	.+12     	; 0xee0 <prvWriteMessageToBuffer+0x6c>
     ed4:	49 81       	ldd	r20, Y+1	; 0x01
     ed6:	5a 81       	ldd	r21, Y+2	; 0x02
     ed8:	b6 01       	movw	r22, r12
     eda:	c7 01       	movw	r24, r14
     edc:	82 df       	rcall	.-252    	; 0xde2 <prvWriteBytesToBuffer>
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <prvWriteMessageToBuffer+0x70>
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	1f 91       	pop	r17
     eee:	0f 91       	pop	r16
     ef0:	ff 90       	pop	r15
     ef2:	ef 90       	pop	r14
     ef4:	df 90       	pop	r13
     ef6:	cf 90       	pop	r12
     ef8:	08 95       	ret

00000efa <prvReadBytesFromBuffer>:
     efa:	af 92       	push	r10
     efc:	bf 92       	push	r11
     efe:	cf 92       	push	r12
     f00:	df 92       	push	r13
     f02:	ef 92       	push	r14
     f04:	ff 92       	push	r15
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	7c 01       	movw	r14, r24
     f10:	5b 01       	movw	r10, r22
     f12:	e9 01       	movw	r28, r18
     f14:	42 17       	cp	r20, r18
     f16:	53 07       	cpc	r21, r19
     f18:	08 f4       	brcc	.+2      	; 0xf1c <prvReadBytesFromBuffer+0x22>
     f1a:	ea 01       	movw	r28, r20
     f1c:	20 97       	sbiw	r28, 0x00	; 0
     f1e:	81 f1       	breq	.+96     	; 0xf80 <prvReadBytesFromBuffer+0x86>
     f20:	f7 01       	movw	r30, r14
     f22:	00 81       	ld	r16, Z
     f24:	11 81       	ldd	r17, Z+1	; 0x01
     f26:	84 81       	ldd	r24, Z+4	; 0x04
     f28:	95 81       	ldd	r25, Z+5	; 0x05
     f2a:	80 1b       	sub	r24, r16
     f2c:	91 0b       	sbc	r25, r17
     f2e:	6e 01       	movw	r12, r28
     f30:	8c 17       	cp	r24, r28
     f32:	9d 07       	cpc	r25, r29
     f34:	08 f4       	brcc	.+2      	; 0xf38 <prvReadBytesFromBuffer+0x3e>
     f36:	6c 01       	movw	r12, r24
     f38:	f7 01       	movw	r30, r14
     f3a:	64 85       	ldd	r22, Z+12	; 0x0c
     f3c:	75 85       	ldd	r23, Z+13	; 0x0d
     f3e:	60 0f       	add	r22, r16
     f40:	71 1f       	adc	r23, r17
     f42:	a6 01       	movw	r20, r12
     f44:	c5 01       	movw	r24, r10
     f46:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <memcpy>
     f4a:	cc 16       	cp	r12, r28
     f4c:	dd 06       	cpc	r13, r29
     f4e:	58 f4       	brcc	.+22     	; 0xf66 <prvReadBytesFromBuffer+0x6c>
     f50:	ae 01       	movw	r20, r28
     f52:	4c 19       	sub	r20, r12
     f54:	5d 09       	sbc	r21, r13
     f56:	f7 01       	movw	r30, r14
     f58:	64 85       	ldd	r22, Z+12	; 0x0c
     f5a:	75 85       	ldd	r23, Z+13	; 0x0d
     f5c:	c5 01       	movw	r24, r10
     f5e:	8c 0d       	add	r24, r12
     f60:	9d 1d       	adc	r25, r13
     f62:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <memcpy>
     f66:	0c 0f       	add	r16, r28
     f68:	1d 1f       	adc	r17, r29
     f6a:	f7 01       	movw	r30, r14
     f6c:	84 81       	ldd	r24, Z+4	; 0x04
     f6e:	95 81       	ldd	r25, Z+5	; 0x05
     f70:	08 17       	cp	r16, r24
     f72:	19 07       	cpc	r17, r25
     f74:	10 f0       	brcs	.+4      	; 0xf7a <prvReadBytesFromBuffer+0x80>
     f76:	08 1b       	sub	r16, r24
     f78:	19 0b       	sbc	r17, r25
     f7a:	f7 01       	movw	r30, r14
     f7c:	11 83       	std	Z+1, r17	; 0x01
     f7e:	00 83       	st	Z, r16
     f80:	ce 01       	movw	r24, r28
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	1f 91       	pop	r17
     f88:	0f 91       	pop	r16
     f8a:	ff 90       	pop	r15
     f8c:	ef 90       	pop	r14
     f8e:	df 90       	pop	r13
     f90:	cf 90       	pop	r12
     f92:	bf 90       	pop	r11
     f94:	af 90       	pop	r10
     f96:	08 95       	ret

00000f98 <prvReadMessageFromBuffer>:
     f98:	6f 92       	push	r6
     f9a:	7f 92       	push	r7
     f9c:	8f 92       	push	r8
     f9e:	9f 92       	push	r9
     fa0:	af 92       	push	r10
     fa2:	bf 92       	push	r11
     fa4:	cf 92       	push	r12
     fa6:	df 92       	push	r13
     fa8:	ef 92       	push	r14
     faa:	ff 92       	push	r15
     fac:	0f 93       	push	r16
     fae:	1f 93       	push	r17
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	1f 92       	push	r1
     fb6:	1f 92       	push	r1
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	6c 01       	movw	r12, r24
     fbe:	4b 01       	movw	r8, r22
     fc0:	5a 01       	movw	r10, r20
     fc2:	79 01       	movw	r14, r18
     fc4:	01 15       	cp	r16, r1
     fc6:	11 05       	cpc	r17, r1
     fc8:	b1 f0       	breq	.+44     	; 0xff6 <prvReadMessageFromBuffer+0x5e>
     fca:	fc 01       	movw	r30, r24
     fcc:	60 80       	ld	r6, Z
     fce:	71 80       	ldd	r7, Z+1	; 0x01
     fd0:	a8 01       	movw	r20, r16
     fd2:	be 01       	movw	r22, r28
     fd4:	6f 5f       	subi	r22, 0xFF	; 255
     fd6:	7f 4f       	sbci	r23, 0xFF	; 255
     fd8:	90 df       	rcall	.-224    	; 0xefa <prvReadBytesFromBuffer>
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	9a 81       	ldd	r25, Y+2	; 0x02
     fde:	e0 1a       	sub	r14, r16
     fe0:	f1 0a       	sbc	r15, r17
     fe2:	a8 16       	cp	r10, r24
     fe4:	b9 06       	cpc	r11, r25
     fe6:	30 f4       	brcc	.+12     	; 0xff4 <prvReadMessageFromBuffer+0x5c>
     fe8:	f6 01       	movw	r30, r12
     fea:	71 82       	std	Z+1, r7	; 0x01
     fec:	60 82       	st	Z, r6
     fee:	a1 2c       	mov	r10, r1
     ff0:	b1 2c       	mov	r11, r1
     ff2:	01 c0       	rjmp	.+2      	; 0xff6 <prvReadMessageFromBuffer+0x5e>
     ff4:	5c 01       	movw	r10, r24
     ff6:	97 01       	movw	r18, r14
     ff8:	a5 01       	movw	r20, r10
     ffa:	b4 01       	movw	r22, r8
     ffc:	c6 01       	movw	r24, r12
     ffe:	7d df       	rcall	.-262    	; 0xefa <prvReadBytesFromBuffer>
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	ff 90       	pop	r15
    100e:	ef 90       	pop	r14
    1010:	df 90       	pop	r13
    1012:	cf 90       	pop	r12
    1014:	bf 90       	pop	r11
    1016:	af 90       	pop	r10
    1018:	9f 90       	pop	r9
    101a:	8f 90       	pop	r8
    101c:	7f 90       	pop	r7
    101e:	6f 90       	pop	r6
    1020:	08 95       	ret

00001022 <xStreamBufferGenericCreate>:
    1022:	cf 92       	push	r12
    1024:	df 92       	push	r13
    1026:	ef 92       	push	r14
    1028:	ff 92       	push	r15
    102a:	0f 93       	push	r16
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	ec 01       	movw	r28, r24
    1032:	6b 01       	movw	r12, r22
    1034:	41 30       	cpi	r20, 0x01	; 1
    1036:	11 f4       	brne	.+4      	; 0x103c <xStreamBufferGenericCreate+0x1a>
    1038:	01 e0       	ldi	r16, 0x01	; 1
    103a:	01 c0       	rjmp	.+2      	; 0x103e <xStreamBufferGenericCreate+0x1c>
    103c:	00 e0       	ldi	r16, 0x00	; 0
    103e:	c1 14       	cp	r12, r1
    1040:	d1 04       	cpc	r13, r1
    1042:	19 f4       	brne	.+6      	; 0x104a <xStreamBufferGenericCreate+0x28>
    1044:	cc 24       	eor	r12, r12
    1046:	c3 94       	inc	r12
    1048:	d1 2c       	mov	r13, r1
    104a:	ce 01       	movw	r24, r28
    104c:	40 96       	adiw	r24, 0x10	; 16
    104e:	c8 17       	cp	r28, r24
    1050:	d9 07       	cpc	r29, r25
    1052:	20 f4       	brcc	.+8      	; 0x105c <xStreamBufferGenericCreate+0x3a>
    1054:	21 96       	adiw	r28, 0x01	; 1
    1056:	50 d9       	rcall	.-3424   	; 0x2f8 <pvPortMalloc>
    1058:	7c 01       	movw	r14, r24
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <xStreamBufferGenericCreate+0x3e>
    105c:	e1 2c       	mov	r14, r1
    105e:	f1 2c       	mov	r15, r1
    1060:	e1 14       	cp	r14, r1
    1062:	f1 04       	cpc	r15, r1
    1064:	39 f0       	breq	.+14     	; 0x1074 <xStreamBufferGenericCreate+0x52>
    1066:	96 01       	movw	r18, r12
    1068:	ae 01       	movw	r20, r28
    106a:	b7 01       	movw	r22, r14
    106c:	61 5f       	subi	r22, 0xF1	; 241
    106e:	7f 4f       	sbci	r23, 0xFF	; 255
    1070:	c7 01       	movw	r24, r14
    1072:	a7 de       	rcall	.-690    	; 0xdc2 <prvInitialiseNewStreamBuffer>
    1074:	c7 01       	movw	r24, r14
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	0f 91       	pop	r16
    107c:	ff 90       	pop	r15
    107e:	ef 90       	pop	r14
    1080:	df 90       	pop	r13
    1082:	cf 90       	pop	r12
    1084:	08 95       	ret

00001086 <xStreamBufferReset>:
    1086:	0f 93       	push	r16
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	0f 92       	push	r0
    108e:	fc 01       	movw	r30, r24
    1090:	20 85       	ldd	r18, Z+8	; 0x08
    1092:	31 85       	ldd	r19, Z+9	; 0x09
    1094:	23 2b       	or	r18, r19
    1096:	71 f4       	brne	.+28     	; 0x10b4 <xStreamBufferReset+0x2e>
    1098:	22 85       	ldd	r18, Z+10	; 0x0a
    109a:	33 85       	ldd	r19, Z+11	; 0x0b
    109c:	23 2b       	or	r18, r19
    109e:	61 f4       	brne	.+24     	; 0x10b8 <xStreamBufferReset+0x32>
    10a0:	26 81       	ldd	r18, Z+6	; 0x06
    10a2:	37 81       	ldd	r19, Z+7	; 0x07
    10a4:	44 81       	ldd	r20, Z+4	; 0x04
    10a6:	55 81       	ldd	r21, Z+5	; 0x05
    10a8:	64 85       	ldd	r22, Z+12	; 0x0c
    10aa:	75 85       	ldd	r23, Z+13	; 0x0d
    10ac:	06 85       	ldd	r16, Z+14	; 0x0e
    10ae:	89 de       	rcall	.-750    	; 0xdc2 <prvInitialiseNewStreamBuffer>
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <xStreamBufferReset+0x34>
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	01 c0       	rjmp	.+2      	; 0x10ba <xStreamBufferReset+0x34>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	0f 90       	pop	r0
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	0f 91       	pop	r16
    10c0:	08 95       	ret

000010c2 <xStreamBufferSpacesAvailable>:
    10c2:	fc 01       	movw	r30, r24
    10c4:	24 81       	ldd	r18, Z+4	; 0x04
    10c6:	35 81       	ldd	r19, Z+5	; 0x05
    10c8:	80 81       	ld	r24, Z
    10ca:	91 81       	ldd	r25, Z+1	; 0x01
    10cc:	82 0f       	add	r24, r18
    10ce:	93 1f       	adc	r25, r19
    10d0:	42 81       	ldd	r20, Z+2	; 0x02
    10d2:	53 81       	ldd	r21, Z+3	; 0x03
    10d4:	84 1b       	sub	r24, r20
    10d6:	95 0b       	sbc	r25, r21
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	82 17       	cp	r24, r18
    10dc:	93 07       	cpc	r25, r19
    10de:	10 f0       	brcs	.+4      	; 0x10e4 <xStreamBufferSpacesAvailable+0x22>
    10e0:	82 1b       	sub	r24, r18
    10e2:	93 0b       	sbc	r25, r19
    10e4:	08 95       	ret

000010e6 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    10e6:	2f 92       	push	r2
    10e8:	3f 92       	push	r3
    10ea:	4f 92       	push	r4
    10ec:	5f 92       	push	r5
    10ee:	6f 92       	push	r6
    10f0:	7f 92       	push	r7
    10f2:	8f 92       	push	r8
    10f4:	9f 92       	push	r9
    10f6:	af 92       	push	r10
    10f8:	bf 92       	push	r11
    10fa:	cf 92       	push	r12
    10fc:	df 92       	push	r13
    10fe:	ef 92       	push	r14
    1100:	ff 92       	push	r15
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	2b 97       	sbiw	r28, 0x0b	; 11
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	4c 01       	movw	r8, r24
    111c:	7b 87       	std	Y+11, r23	; 0x0b
    111e:	6a 87       	std	Y+10, r22	; 0x0a
    1120:	1a 01       	movw	r2, r20
    1122:	0e 83       	std	Y+6, r16	; 0x06
    1124:	1f 83       	std	Y+7, r17	; 0x07
    1126:	28 87       	std	Y+8, r18	; 0x08
    1128:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    112a:	fc 01       	movw	r30, r24
    112c:	84 81       	ldd	r24, Z+4	; 0x04
    112e:	95 81       	ldd	r25, Z+5	; 0x05
    1130:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1132:	26 85       	ldd	r18, Z+14	; 0x0e
    1134:	20 ff       	sbrs	r18, 0
    1136:	0c c0       	rjmp	.+24     	; 0x1150 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1138:	2a 01       	movw	r4, r20
    113a:	f2 e0       	ldi	r31, 0x02	; 2
    113c:	4f 0e       	add	r4, r31
    113e:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1140:	84 15       	cp	r24, r4
    1142:	95 05       	cpc	r25, r5
    1144:	58 f4       	brcc	.+22     	; 0x115c <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1146:	1e 82       	std	Y+6, r1	; 0x06
    1148:	1f 82       	std	Y+7, r1	; 0x07
    114a:	18 86       	std	Y+8, r1	; 0x08
    114c:	19 86       	std	Y+9, r1	; 0x09
    114e:	06 c0       	rjmp	.+12     	; 0x115c <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1150:	84 17       	cp	r24, r20
    1152:	95 07       	cpc	r25, r21
    1154:	10 f0       	brcs	.+4      	; 0x115a <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1156:	2a 01       	movw	r4, r20
    1158:	01 c0       	rjmp	.+2      	; 0x115c <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    115a:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    115c:	8e 81       	ldd	r24, Y+6	; 0x06
    115e:	9f 81       	ldd	r25, Y+7	; 0x07
    1160:	a8 85       	ldd	r26, Y+8	; 0x08
    1162:	b9 85       	ldd	r27, Y+9	; 0x09
    1164:	89 2b       	or	r24, r25
    1166:	8a 2b       	or	r24, r26
    1168:	8b 2b       	or	r24, r27
    116a:	09 f4       	brne	.+2      	; 0x116e <xStreamBufferSend+0x88>
    116c:	36 c0       	rjmp	.+108    	; 0x11da <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    116e:	ce 01       	movw	r24, r28
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	e4 d7       	rcall	.+4040   	; 0x213c <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    117a:	c4 01       	movw	r24, r8
    117c:	a2 df       	rcall	.-188    	; 0x10c2 <xStreamBufferSpacesAvailable>
    117e:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1180:	84 15       	cp	r24, r4
    1182:	95 05       	cpc	r25, r5
    1184:	38 f5       	brcc	.+78     	; 0x11d4 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 5d 14 	call	0x28ba	; 0x28ba <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1190:	0e 94 2f 11 	call	0x225e	; 0x225e <xTaskGetCurrentTaskHandle>
    1194:	f4 01       	movw	r30, r8
    1196:	93 87       	std	Z+11, r25	; 0x0b
    1198:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    119a:	0f 90       	pop	r0
    119c:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    119e:	ae 80       	ldd	r10, Y+6	; 0x06
    11a0:	bf 80       	ldd	r11, Y+7	; 0x07
    11a2:	c8 84       	ldd	r12, Y+8	; 0x08
    11a4:	d9 84       	ldd	r13, Y+9	; 0x09
    11a6:	e1 2c       	mov	r14, r1
    11a8:	f1 2c       	mov	r15, r1
    11aa:	00 e0       	ldi	r16, 0x00	; 0
    11ac:	10 e0       	ldi	r17, 0x00	; 0
    11ae:	98 01       	movw	r18, r16
    11b0:	40 e0       	ldi	r20, 0x00	; 0
    11b2:	50 e0       	ldi	r21, 0x00	; 0
    11b4:	ba 01       	movw	r22, r20
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	0e 94 9d 11 	call	0x233a	; 0x233a <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    11bc:	f4 01       	movw	r30, r8
    11be:	13 86       	std	Z+11, r1	; 0x0b
    11c0:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    11c2:	be 01       	movw	r22, r28
    11c4:	6a 5f       	subi	r22, 0xFA	; 250
    11c6:	7f 4f       	sbci	r23, 0xFF	; 255
    11c8:	ce 01       	movw	r24, r28
    11ca:	01 96       	adiw	r24, 0x01	; 1
    11cc:	de d7       	rcall	.+4028   	; 0x218a <xTaskCheckForTimeOut>
    11ce:	88 23       	and	r24, r24
    11d0:	89 f2       	breq	.-94     	; 0x1174 <xStreamBufferSend+0x8e>
    11d2:	05 c0       	rjmp	.+10     	; 0x11de <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    11d4:	0f 90       	pop	r0
    11d6:	0f be       	out	0x3f, r0	; 63
                    break;
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    11da:	61 2c       	mov	r6, r1
    11dc:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    11de:	61 14       	cp	r6, r1
    11e0:	71 04       	cpc	r7, r1
    11e2:	19 f4       	brne	.+6      	; 0x11ea <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    11e4:	c4 01       	movw	r24, r8
    11e6:	6d df       	rcall	.-294    	; 0x10c2 <xStreamBufferSpacesAvailable>
    11e8:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    11ea:	82 01       	movw	r16, r4
    11ec:	93 01       	movw	r18, r6
    11ee:	a1 01       	movw	r20, r2
    11f0:	6a 85       	ldd	r22, Y+10	; 0x0a
    11f2:	7b 85       	ldd	r23, Y+11	; 0x0b
    11f4:	c4 01       	movw	r24, r8
    11f6:	3e de       	rcall	.-900    	; 0xe74 <prvWriteMessageToBuffer>
    11f8:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    11fa:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    11fc:	e9 f0       	breq	.+58     	; 0x1238 <xStreamBufferSend+0x152>
    11fe:	c4 01       	movw	r24, r8
    1200:	cd dd       	rcall	.-1126   	; 0xd9c <prvBytesInBuffer>
    1202:	f4 01       	movw	r30, r8
    1204:	26 81       	ldd	r18, Z+6	; 0x06
    1206:	37 81       	ldd	r19, Z+7	; 0x07
    1208:	82 17       	cp	r24, r18
    120a:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    120c:	a8 f0       	brcs	.+42     	; 0x1238 <xStreamBufferSend+0x152>
    120e:	8d d3       	rcall	.+1818   	; 0x192a <vTaskSuspendAll>
    1210:	f4 01       	movw	r30, r8
    1212:	80 85       	ldd	r24, Z+8	; 0x08
    1214:	91 85       	ldd	r25, Z+9	; 0x09
    1216:	89 2b       	or	r24, r25
    1218:	71 f0       	breq	.+28     	; 0x1236 <xStreamBufferSend+0x150>
    121a:	80 85       	ldd	r24, Z+8	; 0x08
    121c:	91 85       	ldd	r25, Z+9	; 0x09
    121e:	e1 2c       	mov	r14, r1
    1220:	f1 2c       	mov	r15, r1
    1222:	00 e0       	ldi	r16, 0x00	; 0
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	a9 01       	movw	r20, r18
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	0e 94 44 12 	call	0x2488	; 0x2488 <xTaskGenericNotify>
    1230:	f4 01       	movw	r30, r8
    1232:	11 86       	std	Z+9, r1	; 0x09
    1234:	10 86       	std	Z+8, r1	; 0x08
    1236:	b9 d4       	rcall	.+2418   	; 0x1baa <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1238:	c6 01       	movw	r24, r12
    123a:	2b 96       	adiw	r28, 0x0b	; 11
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	1f 91       	pop	r17
    124c:	0f 91       	pop	r16
    124e:	ff 90       	pop	r15
    1250:	ef 90       	pop	r14
    1252:	df 90       	pop	r13
    1254:	cf 90       	pop	r12
    1256:	bf 90       	pop	r11
    1258:	af 90       	pop	r10
    125a:	9f 90       	pop	r9
    125c:	8f 90       	pop	r8
    125e:	7f 90       	pop	r7
    1260:	6f 90       	pop	r6
    1262:	5f 90       	pop	r5
    1264:	4f 90       	pop	r4
    1266:	3f 90       	pop	r3
    1268:	2f 90       	pop	r2
    126a:	08 95       	ret

0000126c <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    126c:	af 92       	push	r10
    126e:	bf 92       	push	r11
    1270:	cf 92       	push	r12
    1272:	df 92       	push	r13
    1274:	ef 92       	push	r14
    1276:	ff 92       	push	r15
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	ec 01       	movw	r28, r24
    1282:	7b 01       	movw	r14, r22
    1284:	5a 01       	movw	r10, r20
    1286:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1288:	8e 85       	ldd	r24, Y+14	; 0x0e
    128a:	80 ff       	sbrs	r24, 0
    128c:	04 c0       	rjmp	.+8      	; 0x1296 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    128e:	8a 01       	movw	r16, r20
    1290:	0e 5f       	subi	r16, 0xFE	; 254
    1292:	1f 4f       	sbci	r17, 0xFF	; 255
    1294:	01 c0       	rjmp	.+2      	; 0x1298 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1296:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1298:	ce 01       	movw	r24, r28
    129a:	13 df       	rcall	.-474    	; 0x10c2 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    129c:	9c 01       	movw	r18, r24
    129e:	a5 01       	movw	r20, r10
    12a0:	b7 01       	movw	r22, r14
    12a2:	ce 01       	movw	r24, r28
    12a4:	e7 dd       	rcall	.-1074   	; 0xe74 <prvWriteMessageToBuffer>
    12a6:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    12a8:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    12aa:	c1 f0       	breq	.+48     	; 0x12dc <xStreamBufferSendFromISR+0x70>
    12ac:	ce 01       	movw	r24, r28
    12ae:	76 dd       	rcall	.-1300   	; 0xd9c <prvBytesInBuffer>
    12b0:	2e 81       	ldd	r18, Y+6	; 0x06
    12b2:	3f 81       	ldd	r19, Y+7	; 0x07
    12b4:	82 17       	cp	r24, r18
    12b6:	93 07       	cpc	r25, r19
    12b8:	88 f0       	brcs	.+34     	; 0x12dc <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    12ba:	88 85       	ldd	r24, Y+8	; 0x08
    12bc:	99 85       	ldd	r25, Y+9	; 0x09
    12be:	89 2b       	or	r24, r25
    12c0:	69 f0       	breq	.+26     	; 0x12dc <xStreamBufferSendFromISR+0x70>
    12c2:	88 85       	ldd	r24, Y+8	; 0x08
    12c4:	99 85       	ldd	r25, Y+9	; 0x09
    12c6:	e1 2c       	mov	r14, r1
    12c8:	f1 2c       	mov	r15, r1
    12ca:	00 e0       	ldi	r16, 0x00	; 0
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	a9 01       	movw	r20, r18
    12d2:	60 e0       	ldi	r22, 0x00	; 0
    12d4:	0e 94 3b 13 	call	0x2676	; 0x2676 <xTaskGenericNotifyFromISR>
    12d8:	19 86       	std	Y+9, r1	; 0x09
    12da:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    12dc:	c5 01       	movw	r24, r10
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	1f 91       	pop	r17
    12e4:	0f 91       	pop	r16
    12e6:	ff 90       	pop	r15
    12e8:	ef 90       	pop	r14
    12ea:	df 90       	pop	r13
    12ec:	cf 90       	pop	r12
    12ee:	bf 90       	pop	r11
    12f0:	af 90       	pop	r10
    12f2:	08 95       	ret

000012f4 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    12f4:	4f 92       	push	r4
    12f6:	5f 92       	push	r5
    12f8:	6f 92       	push	r6
    12fa:	7f 92       	push	r7
    12fc:	8f 92       	push	r8
    12fe:	9f 92       	push	r9
    1300:	af 92       	push	r10
    1302:	bf 92       	push	r11
    1304:	cf 92       	push	r12
    1306:	df 92       	push	r13
    1308:	ef 92       	push	r14
    130a:	ff 92       	push	r15
    130c:	0f 93       	push	r16
    130e:	1f 93       	push	r17
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	ec 01       	movw	r28, r24
    1316:	2b 01       	movw	r4, r22
    1318:	3a 01       	movw	r6, r20
    131a:	58 01       	movw	r10, r16
    131c:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    131e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1320:	80 ff       	sbrs	r24, 0
    1322:	05 c0       	rjmp	.+10     	; 0x132e <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1324:	68 94       	set
    1326:	88 24       	eor	r8, r8
    1328:	81 f8       	bld	r8, 1
    132a:	91 2c       	mov	r9, r1
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    132e:	81 2c       	mov	r8, r1
    1330:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1332:	a1 14       	cp	r10, r1
    1334:	b1 04       	cpc	r11, r1
    1336:	c1 04       	cpc	r12, r1
    1338:	d1 04       	cpc	r13, r1
    133a:	31 f1       	breq	.+76     	; 0x1388 <xStreamBufferReceive+0x94>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1342:	ce 01       	movw	r24, r28
    1344:	2b dd       	rcall	.-1450   	; 0xd9c <prvBytesInBuffer>
    1346:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1348:	88 16       	cp	r8, r24
    134a:	99 06       	cpc	r9, r25
    134c:	40 f0       	brcs	.+16     	; 0x135e <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 5d 14 	call	0x28ba	; 0x28ba <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1358:	82 d7       	rcall	.+3844   	; 0x225e <xTaskGetCurrentTaskHandle>
    135a:	99 87       	std	Y+9, r25	; 0x09
    135c:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    135e:	0f 90       	pop	r0
    1360:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1362:	8e 14       	cp	r8, r14
    1364:	9f 04       	cpc	r9, r15
    1366:	98 f0       	brcs	.+38     	; 0x138e <xStreamBufferReceive+0x9a>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1368:	e1 2c       	mov	r14, r1
    136a:	f1 2c       	mov	r15, r1
    136c:	00 e0       	ldi	r16, 0x00	; 0
    136e:	10 e0       	ldi	r17, 0x00	; 0
    1370:	98 01       	movw	r18, r16
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	ba 01       	movw	r22, r20
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	df d7       	rcall	.+4030   	; 0x233a <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    137c:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    137e:	18 86       	std	Y+8, r1	; 0x08
    1380:	ce 01       	movw	r24, r28
    1382:	0c dd       	rcall	.-1512   	; 0xd9c <prvBytesInBuffer>
    1384:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1386:	03 c0       	rjmp	.+6      	; 0x138e <xStreamBufferReceive+0x9a>
    1388:	ce 01       	movw	r24, r28
    138a:	08 dd       	rcall	.-1520   	; 0xd9c <prvBytesInBuffer>
    138c:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    138e:	8e 14       	cp	r8, r14
    1390:	9f 04       	cpc	r9, r15
    1392:	e8 f4       	brcc	.+58     	; 0x13ce <xStreamBufferReceive+0xda>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1394:	84 01       	movw	r16, r8
    1396:	97 01       	movw	r18, r14
    1398:	a3 01       	movw	r20, r6
    139a:	b2 01       	movw	r22, r4
    139c:	ce 01       	movw	r24, r28
    139e:	fc dd       	rcall	.-1032   	; 0xf98 <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    13a0:	6c 01       	movw	r12, r24
    13a2:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    13a4:	b1 f0       	breq	.+44     	; 0x13d2 <xStreamBufferReceive+0xde>
    13a6:	c1 d2       	rcall	.+1410   	; 0x192a <vTaskSuspendAll>
    13a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    13aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    13ac:	89 2b       	or	r24, r25
    13ae:	69 f0       	breq	.+26     	; 0x13ca <xStreamBufferReceive+0xd6>
    13b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    13b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    13b4:	e1 2c       	mov	r14, r1
    13b6:	f1 2c       	mov	r15, r1
    13b8:	00 e0       	ldi	r16, 0x00	; 0
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	a9 01       	movw	r20, r18
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	0e 94 44 12 	call	0x2488	; 0x2488 <xTaskGenericNotify>
    13c6:	1b 86       	std	Y+11, r1	; 0x0b
    13c8:	1a 86       	std	Y+10, r1	; 0x0a
    13ca:	ef d3       	rcall	.+2014   	; 0x1baa <xTaskResumeAll>
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <xStreamBufferReceive+0xde>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    13ce:	c1 2c       	mov	r12, r1
    13d0:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    13d2:	c6 01       	movw	r24, r12
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	1f 91       	pop	r17
    13da:	0f 91       	pop	r16
    13dc:	ff 90       	pop	r15
    13de:	ef 90       	pop	r14
    13e0:	df 90       	pop	r13
    13e2:	cf 90       	pop	r12
    13e4:	bf 90       	pop	r11
    13e6:	af 90       	pop	r10
    13e8:	9f 90       	pop	r9
    13ea:	8f 90       	pop	r8
    13ec:	7f 90       	pop	r7
    13ee:	6f 90       	pop	r6
    13f0:	5f 90       	pop	r5
    13f2:	4f 90       	pop	r4
    13f4:	08 95       	ret

000013f6 <prvResetNextTaskUnblockTime>:
    13f6:	e0 91 97 14 	lds	r30, 0x1497	; 0x801497 <pxDelayedTaskList>
    13fa:	f0 91 98 14 	lds	r31, 0x1498	; 0x801498 <pxDelayedTaskList+0x1>
    13fe:	80 81       	ld	r24, Z
    1400:	81 11       	cpse	r24, r1
    1402:	0c c0       	rjmp	.+24     	; 0x141c <prvResetNextTaskUnblockTime+0x26>
    1404:	8f ef       	ldi	r24, 0xFF	; 255
    1406:	9f ef       	ldi	r25, 0xFF	; 255
    1408:	dc 01       	movw	r26, r24
    140a:	80 93 61 14 	sts	0x1461, r24	; 0x801461 <xNextTaskUnblockTime>
    140e:	90 93 62 14 	sts	0x1462, r25	; 0x801462 <xNextTaskUnblockTime+0x1>
    1412:	a0 93 63 14 	sts	0x1463, r26	; 0x801463 <xNextTaskUnblockTime+0x2>
    1416:	b0 93 64 14 	sts	0x1464, r27	; 0x801464 <xNextTaskUnblockTime+0x3>
    141a:	08 95       	ret
    141c:	e0 91 97 14 	lds	r30, 0x1497	; 0x801497 <pxDelayedTaskList>
    1420:	f0 91 98 14 	lds	r31, 0x1498	; 0x801498 <pxDelayedTaskList+0x1>
    1424:	07 80       	ldd	r0, Z+7	; 0x07
    1426:	f0 85       	ldd	r31, Z+8	; 0x08
    1428:	e0 2d       	mov	r30, r0
    142a:	80 81       	ld	r24, Z
    142c:	91 81       	ldd	r25, Z+1	; 0x01
    142e:	a2 81       	ldd	r26, Z+2	; 0x02
    1430:	b3 81       	ldd	r27, Z+3	; 0x03
    1432:	80 93 61 14 	sts	0x1461, r24	; 0x801461 <xNextTaskUnblockTime>
    1436:	90 93 62 14 	sts	0x1462, r25	; 0x801462 <xNextTaskUnblockTime+0x1>
    143a:	a0 93 63 14 	sts	0x1463, r26	; 0x801463 <xNextTaskUnblockTime+0x2>
    143e:	b0 93 64 14 	sts	0x1464, r27	; 0x801464 <xNextTaskUnblockTime+0x3>
    1442:	08 95       	ret

00001444 <prvDeleteTCB>:
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
    1448:	ec 01       	movw	r28, r24
    144a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    144c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    144e:	0e 94 25 02 	call	0x44a	; 0x44a <vPortFree>
    1452:	ce 01       	movw	r24, r28
    1454:	0e 94 25 02 	call	0x44a	; 0x44a <vPortFree>
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	08 95       	ret

0000145e <prvInitialiseNewTask>:
    145e:	4f 92       	push	r4
    1460:	5f 92       	push	r5
    1462:	6f 92       	push	r6
    1464:	7f 92       	push	r7
    1466:	8f 92       	push	r8
    1468:	9f 92       	push	r9
    146a:	af 92       	push	r10
    146c:	bf 92       	push	r11
    146e:	cf 92       	push	r12
    1470:	df 92       	push	r13
    1472:	ef 92       	push	r14
    1474:	ff 92       	push	r15
    1476:	0f 93       	push	r16
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	2c 01       	movw	r4, r24
    147e:	5b 01       	movw	r10, r22
    1480:	4a 01       	movw	r8, r20
    1482:	39 01       	movw	r6, r18
    1484:	e6 01       	movw	r28, r12
    1486:	65 ea       	ldi	r22, 0xA5	; 165
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    148c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    148e:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <memset>
    1492:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1494:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1496:	21 e0       	ldi	r18, 0x01	; 1
    1498:	82 1a       	sub	r8, r18
    149a:	91 08       	sbc	r9, r1
    149c:	88 0e       	add	r8, r24
    149e:	99 1e       	adc	r9, r25
    14a0:	a1 14       	cp	r10, r1
    14a2:	b1 04       	cpc	r11, r1
    14a4:	89 f4       	brne	.+34     	; 0x14c8 <prvInitialiseNewTask+0x6a>
    14a6:	15 c0       	rjmp	.+42     	; 0x14d2 <prvInitialiseNewTask+0x74>
    14a8:	82 2f       	mov	r24, r18
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	f5 01       	movw	r30, r10
    14ae:	e8 0f       	add	r30, r24
    14b0:	f9 1f       	adc	r31, r25
    14b2:	30 81       	ld	r19, Z
    14b4:	de 01       	movw	r26, r28
    14b6:	a8 0f       	add	r26, r24
    14b8:	b9 1f       	adc	r27, r25
    14ba:	5d 96       	adiw	r26, 0x1d	; 29
    14bc:	3c 93       	st	X, r19
    14be:	80 81       	ld	r24, Z
    14c0:	88 23       	and	r24, r24
    14c2:	29 f0       	breq	.+10     	; 0x14ce <prvInitialiseNewTask+0x70>
    14c4:	2f 5f       	subi	r18, 0xFF	; 255
    14c6:	01 c0       	rjmp	.+2      	; 0x14ca <prvInitialiseNewTask+0x6c>
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	20 31       	cpi	r18, 0x10	; 16
    14cc:	68 f3       	brcs	.-38     	; 0x14a8 <prvInitialiseNewTask+0x4a>
    14ce:	1c a6       	std	Y+44, r1	; 0x2c
    14d0:	01 c0       	rjmp	.+2      	; 0x14d4 <prvInitialiseNewTask+0x76>
    14d2:	1d 8e       	std	Y+29, r1	; 0x1d
    14d4:	0a 30       	cpi	r16, 0x0A	; 10
    14d6:	08 f0       	brcs	.+2      	; 0x14da <prvInitialiseNewTask+0x7c>
    14d8:	09 e0       	ldi	r16, 0x09	; 9
    14da:	0a 8f       	std	Y+26, r16	; 0x1a
    14dc:	0d a7       	std	Y+45, r16	; 0x2d
    14de:	1e a6       	std	Y+46, r1	; 0x2e
    14e0:	ce 01       	movw	r24, r28
    14e2:	02 96       	adiw	r24, 0x02	; 2
    14e4:	00 d8       	rcall	.-4096   	; 0x4e6 <vListInitialiseItem>
    14e6:	ce 01       	movw	r24, r28
    14e8:	0e 96       	adiw	r24, 0x0e	; 14
    14ea:	0e 94 73 02 	call	0x4e6	; 0x4e6 <vListInitialiseItem>
    14ee:	db 87       	std	Y+11, r29	; 0x0b
    14f0:	ca 87       	std	Y+10, r28	; 0x0a
    14f2:	8a e0       	ldi	r24, 0x0A	; 10
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	a0 e0       	ldi	r26, 0x00	; 0
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	80 1b       	sub	r24, r16
    14fc:	91 09       	sbc	r25, r1
    14fe:	a1 09       	sbc	r26, r1
    1500:	b1 09       	sbc	r27, r1
    1502:	8e 87       	std	Y+14, r24	; 0x0e
    1504:	9f 87       	std	Y+15, r25	; 0x0f
    1506:	a8 8b       	std	Y+16, r26	; 0x10
    1508:	b9 8b       	std	Y+17, r27	; 0x11
    150a:	df 8b       	std	Y+23, r29	; 0x17
    150c:	ce 8b       	std	Y+22, r28	; 0x16
    150e:	84 e0       	ldi	r24, 0x04	; 4
    1510:	fe 01       	movw	r30, r28
    1512:	bf 96       	adiw	r30, 0x2f	; 47
    1514:	df 01       	movw	r26, r30
    1516:	1d 92       	st	X+, r1
    1518:	8a 95       	dec	r24
    151a:	e9 f7       	brne	.-6      	; 0x1516 <prvInitialiseNewTask+0xb8>
    151c:	1b aa       	std	Y+51, r1	; 0x33
    151e:	a3 01       	movw	r20, r6
    1520:	b2 01       	movw	r22, r4
    1522:	c4 01       	movw	r24, r8
    1524:	54 d8       	rcall	.-3928   	; 0x5ce <pxPortInitialiseStack>
    1526:	99 83       	std	Y+1, r25	; 0x01
    1528:	88 83       	st	Y, r24
    152a:	e1 14       	cp	r14, r1
    152c:	f1 04       	cpc	r15, r1
    152e:	19 f0       	breq	.+6      	; 0x1536 <prvInitialiseNewTask+0xd8>
    1530:	f7 01       	movw	r30, r14
    1532:	d1 83       	std	Z+1, r29	; 0x01
    1534:	c0 83       	st	Z, r28
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	0f 91       	pop	r16
    153c:	ff 90       	pop	r15
    153e:	ef 90       	pop	r14
    1540:	df 90       	pop	r13
    1542:	cf 90       	pop	r12
    1544:	bf 90       	pop	r11
    1546:	af 90       	pop	r10
    1548:	9f 90       	pop	r9
    154a:	8f 90       	pop	r8
    154c:	7f 90       	pop	r7
    154e:	6f 90       	pop	r6
    1550:	5f 90       	pop	r5
    1552:	4f 90       	pop	r4
    1554:	08 95       	ret

00001556 <prvInitialiseTaskLists>:
    1556:	cf 93       	push	r28
    1558:	c0 e0       	ldi	r28, 0x00	; 0
    155a:	09 c0       	rjmp	.+18     	; 0x156e <prvInitialiseTaskLists+0x18>
    155c:	2b e0       	ldi	r18, 0x0B	; 11
    155e:	c2 9f       	mul	r28, r18
    1560:	c0 01       	movw	r24, r0
    1562:	11 24       	eor	r1, r1
    1564:	81 55       	subi	r24, 0x51	; 81
    1566:	9b 4e       	sbci	r25, 0xEB	; 235
    1568:	0e 94 62 02 	call	0x4c4	; 0x4c4 <vListInitialise>
    156c:	cf 5f       	subi	r28, 0xFF	; 255
    156e:	ca 30       	cpi	r28, 0x0A	; 10
    1570:	a8 f3       	brcs	.-22     	; 0x155c <prvInitialiseTaskLists+0x6>
    1572:	84 ea       	ldi	r24, 0xA4	; 164
    1574:	94 e1       	ldi	r25, 0x14	; 20
    1576:	0e 94 62 02 	call	0x4c4	; 0x4c4 <vListInitialise>
    157a:	89 e9       	ldi	r24, 0x99	; 153
    157c:	94 e1       	ldi	r25, 0x14	; 20
    157e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <vListInitialise>
    1582:	8a e8       	ldi	r24, 0x8A	; 138
    1584:	94 e1       	ldi	r25, 0x14	; 20
    1586:	0e 94 62 02 	call	0x4c4	; 0x4c4 <vListInitialise>
    158a:	8f e7       	ldi	r24, 0x7F	; 127
    158c:	94 e1       	ldi	r25, 0x14	; 20
    158e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <vListInitialise>
    1592:	83 e7       	ldi	r24, 0x73	; 115
    1594:	94 e1       	ldi	r25, 0x14	; 20
    1596:	0e 94 62 02 	call	0x4c4	; 0x4c4 <vListInitialise>
    159a:	84 ea       	ldi	r24, 0xA4	; 164
    159c:	94 e1       	ldi	r25, 0x14	; 20
    159e:	90 93 98 14 	sts	0x1498, r25	; 0x801498 <pxDelayedTaskList+0x1>
    15a2:	80 93 97 14 	sts	0x1497, r24	; 0x801497 <pxDelayedTaskList>
    15a6:	89 e9       	ldi	r24, 0x99	; 153
    15a8:	94 e1       	ldi	r25, 0x14	; 20
    15aa:	90 93 96 14 	sts	0x1496, r25	; 0x801496 <pxOverflowDelayedTaskList+0x1>
    15ae:	80 93 95 14 	sts	0x1495, r24	; 0x801495 <pxOverflowDelayedTaskList>
    15b2:	cf 91       	pop	r28
    15b4:	08 95       	ret

000015b6 <prvAddNewTaskToReadyList>:
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
    15ba:	ec 01       	movw	r28, r24
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	0f 92       	push	r0
    15c2:	80 91 72 14 	lds	r24, 0x1472	; 0x801472 <uxCurrentNumberOfTasks>
    15c6:	8f 5f       	subi	r24, 0xFF	; 255
    15c8:	80 93 72 14 	sts	0x1472, r24	; 0x801472 <uxCurrentNumberOfTasks>
    15cc:	80 91 1d 15 	lds	r24, 0x151D	; 0x80151d <pxCurrentTCB>
    15d0:	90 91 1e 15 	lds	r25, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    15d4:	89 2b       	or	r24, r25
    15d6:	51 f4       	brne	.+20     	; 0x15ec <prvAddNewTaskToReadyList+0x36>
    15d8:	d0 93 1e 15 	sts	0x151E, r29	; 0x80151e <pxCurrentTCB+0x1>
    15dc:	c0 93 1d 15 	sts	0x151D, r28	; 0x80151d <pxCurrentTCB>
    15e0:	80 91 72 14 	lds	r24, 0x1472	; 0x801472 <uxCurrentNumberOfTasks>
    15e4:	81 30       	cpi	r24, 0x01	; 1
    15e6:	91 f4       	brne	.+36     	; 0x160c <prvAddNewTaskToReadyList+0x56>
    15e8:	b6 df       	rcall	.-148    	; 0x1556 <prvInitialiseTaskLists>
    15ea:	10 c0       	rjmp	.+32     	; 0x160c <prvAddNewTaskToReadyList+0x56>
    15ec:	80 91 6c 14 	lds	r24, 0x146C	; 0x80146c <xSchedulerRunning>
    15f0:	81 11       	cpse	r24, r1
    15f2:	0c c0       	rjmp	.+24     	; 0x160c <prvAddNewTaskToReadyList+0x56>
    15f4:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    15f8:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    15fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    15fe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1600:	89 17       	cp	r24, r25
    1602:	20 f0       	brcs	.+8      	; 0x160c <prvAddNewTaskToReadyList+0x56>
    1604:	d0 93 1e 15 	sts	0x151E, r29	; 0x80151e <pxCurrentTCB+0x1>
    1608:	c0 93 1d 15 	sts	0x151D, r28	; 0x80151d <pxCurrentTCB>
    160c:	80 91 65 14 	lds	r24, 0x1465	; 0x801465 <uxTaskNumber>
    1610:	8f 5f       	subi	r24, 0xFF	; 255
    1612:	80 93 65 14 	sts	0x1465, r24	; 0x801465 <uxTaskNumber>
    1616:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1618:	80 91 6d 14 	lds	r24, 0x146D	; 0x80146d <uxTopReadyPriority>
    161c:	8e 17       	cp	r24, r30
    161e:	10 f4       	brcc	.+4      	; 0x1624 <prvAddNewTaskToReadyList+0x6e>
    1620:	e0 93 6d 14 	sts	0x146D, r30	; 0x80146d <uxTopReadyPriority>
    1624:	8b e0       	ldi	r24, 0x0B	; 11
    1626:	8e 9f       	mul	r24, r30
    1628:	f0 01       	movw	r30, r0
    162a:	11 24       	eor	r1, r1
    162c:	e1 55       	subi	r30, 0x51	; 81
    162e:	fb 4e       	sbci	r31, 0xEB	; 235
    1630:	01 80       	ldd	r0, Z+1	; 0x01
    1632:	f2 81       	ldd	r31, Z+2	; 0x02
    1634:	e0 2d       	mov	r30, r0
    1636:	ff 83       	std	Y+7, r31	; 0x07
    1638:	ee 83       	std	Y+6, r30	; 0x06
    163a:	26 81       	ldd	r18, Z+6	; 0x06
    163c:	37 81       	ldd	r19, Z+7	; 0x07
    163e:	39 87       	std	Y+9, r19	; 0x09
    1640:	28 87       	std	Y+8, r18	; 0x08
    1642:	a6 81       	ldd	r26, Z+6	; 0x06
    1644:	b7 81       	ldd	r27, Z+7	; 0x07
    1646:	9e 01       	movw	r18, r28
    1648:	2e 5f       	subi	r18, 0xFE	; 254
    164a:	3f 4f       	sbci	r19, 0xFF	; 255
    164c:	15 96       	adiw	r26, 0x05	; 5
    164e:	3c 93       	st	X, r19
    1650:	2e 93       	st	-X, r18
    1652:	14 97       	sbiw	r26, 0x04	; 4
    1654:	37 83       	std	Z+7, r19	; 0x07
    1656:	26 83       	std	Z+6, r18	; 0x06
    1658:	ea 8d       	ldd	r30, Y+26	; 0x1a
    165a:	8e 9f       	mul	r24, r30
    165c:	f0 01       	movw	r30, r0
    165e:	11 24       	eor	r1, r1
    1660:	e1 55       	subi	r30, 0x51	; 81
    1662:	fb 4e       	sbci	r31, 0xEB	; 235
    1664:	fd 87       	std	Y+13, r31	; 0x0d
    1666:	ec 87       	std	Y+12, r30	; 0x0c
    1668:	80 81       	ld	r24, Z
    166a:	8f 5f       	subi	r24, 0xFF	; 255
    166c:	80 83       	st	Z, r24
    166e:	0f 90       	pop	r0
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	80 91 6c 14 	lds	r24, 0x146C	; 0x80146c <xSchedulerRunning>
    1676:	88 23       	and	r24, r24
    1678:	51 f0       	breq	.+20     	; 0x168e <prvAddNewTaskToReadyList+0xd8>
    167a:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    167e:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1682:	92 8d       	ldd	r25, Z+26	; 0x1a
    1684:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1686:	98 17       	cp	r25, r24
    1688:	10 f4       	brcc	.+4      	; 0x168e <prvAddNewTaskToReadyList+0xd8>
    168a:	0e 94 30 03 	call	0x660	; 0x660 <vPortYield>
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

00001694 <prvCheckTasksWaitingTermination>:
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	1b c0       	rjmp	.+54     	; 0x16d0 <prvCheckTasksWaitingTermination+0x3c>
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	0f 92       	push	r0
    16a0:	e0 91 86 14 	lds	r30, 0x1486	; 0x801486 <xTasksWaitingTermination+0x7>
    16a4:	f0 91 87 14 	lds	r31, 0x1487	; 0x801487 <xTasksWaitingTermination+0x8>
    16a8:	c0 85       	ldd	r28, Z+8	; 0x08
    16aa:	d1 85       	ldd	r29, Z+9	; 0x09
    16ac:	ce 01       	movw	r24, r28
    16ae:	02 96       	adiw	r24, 0x02	; 2
    16b0:	0e 94 b4 02 	call	0x568	; 0x568 <uxListRemove>
    16b4:	80 91 72 14 	lds	r24, 0x1472	; 0x801472 <uxCurrentNumberOfTasks>
    16b8:	81 50       	subi	r24, 0x01	; 1
    16ba:	80 93 72 14 	sts	0x1472, r24	; 0x801472 <uxCurrentNumberOfTasks>
    16be:	80 91 7e 14 	lds	r24, 0x147E	; 0x80147e <uxDeletedTasksWaitingCleanUp>
    16c2:	81 50       	subi	r24, 0x01	; 1
    16c4:	80 93 7e 14 	sts	0x147E, r24	; 0x80147e <uxDeletedTasksWaitingCleanUp>
    16c8:	0f 90       	pop	r0
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	ce 01       	movw	r24, r28
    16ce:	ba de       	rcall	.-652    	; 0x1444 <prvDeleteTCB>
    16d0:	80 91 7e 14 	lds	r24, 0x147E	; 0x80147e <uxDeletedTasksWaitingCleanUp>
    16d4:	81 11       	cpse	r24, r1
    16d6:	e1 cf       	rjmp	.-62     	; 0x169a <prvCheckTasksWaitingTermination+0x6>
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	08 95       	ret

000016de <prvAddCurrentTaskToDelayedList>:
    16de:	8f 92       	push	r8
    16e0:	9f 92       	push	r9
    16e2:	af 92       	push	r10
    16e4:	bf 92       	push	r11
    16e6:	cf 92       	push	r12
    16e8:	df 92       	push	r13
    16ea:	ef 92       	push	r14
    16ec:	ff 92       	push	r15
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	6b 01       	movw	r12, r22
    16f4:	7c 01       	movw	r14, r24
    16f6:	c4 2f       	mov	r28, r20
    16f8:	80 90 6e 14 	lds	r8, 0x146E	; 0x80146e <xTickCount>
    16fc:	90 90 6f 14 	lds	r9, 0x146F	; 0x80146f <xTickCount+0x1>
    1700:	a0 90 70 14 	lds	r10, 0x1470	; 0x801470 <xTickCount+0x2>
    1704:	b0 90 71 14 	lds	r11, 0x1471	; 0x801471 <xTickCount+0x3>
    1708:	80 91 1d 15 	lds	r24, 0x151D	; 0x80151d <pxCurrentTCB>
    170c:	90 91 1e 15 	lds	r25, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1710:	02 96       	adiw	r24, 0x02	; 2
    1712:	0e 94 b4 02 	call	0x568	; 0x568 <uxListRemove>
    1716:	8f ef       	ldi	r24, 0xFF	; 255
    1718:	c8 16       	cp	r12, r24
    171a:	d8 06       	cpc	r13, r24
    171c:	e8 06       	cpc	r14, r24
    171e:	f8 06       	cpc	r15, r24
    1720:	b1 f5       	brne	.+108    	; 0x178e <prvAddCurrentTaskToDelayedList+0xb0>
    1722:	cc 23       	and	r28, r28
    1724:	a1 f1       	breq	.+104    	; 0x178e <prvAddCurrentTaskToDelayedList+0xb0>
    1726:	e3 e7       	ldi	r30, 0x73	; 115
    1728:	f4 e1       	ldi	r31, 0x14	; 20
    172a:	a1 81       	ldd	r26, Z+1	; 0x01
    172c:	b2 81       	ldd	r27, Z+2	; 0x02
    172e:	c0 91 1d 15 	lds	r28, 0x151D	; 0x80151d <pxCurrentTCB>
    1732:	d0 91 1e 15 	lds	r29, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1736:	bf 83       	std	Y+7, r27	; 0x07
    1738:	ae 83       	std	Y+6, r26	; 0x06
    173a:	c0 91 1d 15 	lds	r28, 0x151D	; 0x80151d <pxCurrentTCB>
    173e:	d0 91 1e 15 	lds	r29, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1742:	16 96       	adiw	r26, 0x06	; 6
    1744:	8d 91       	ld	r24, X+
    1746:	9c 91       	ld	r25, X
    1748:	17 97       	sbiw	r26, 0x07	; 7
    174a:	99 87       	std	Y+9, r25	; 0x09
    174c:	88 87       	std	Y+8, r24	; 0x08
    174e:	16 96       	adiw	r26, 0x06	; 6
    1750:	cd 91       	ld	r28, X+
    1752:	dc 91       	ld	r29, X
    1754:	17 97       	sbiw	r26, 0x07	; 7
    1756:	80 91 1d 15 	lds	r24, 0x151D	; 0x80151d <pxCurrentTCB>
    175a:	90 91 1e 15 	lds	r25, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    175e:	02 96       	adiw	r24, 0x02	; 2
    1760:	9d 83       	std	Y+5, r25	; 0x05
    1762:	8c 83       	std	Y+4, r24	; 0x04
    1764:	80 91 1d 15 	lds	r24, 0x151D	; 0x80151d <pxCurrentTCB>
    1768:	90 91 1e 15 	lds	r25, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    176c:	02 96       	adiw	r24, 0x02	; 2
    176e:	17 96       	adiw	r26, 0x07	; 7
    1770:	9c 93       	st	X, r25
    1772:	8e 93       	st	-X, r24
    1774:	16 97       	sbiw	r26, 0x06	; 6
    1776:	a0 91 1d 15 	lds	r26, 0x151D	; 0x80151d <pxCurrentTCB>
    177a:	b0 91 1e 15 	lds	r27, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    177e:	1d 96       	adiw	r26, 0x0d	; 13
    1780:	fc 93       	st	X, r31
    1782:	ee 93       	st	-X, r30
    1784:	1c 97       	sbiw	r26, 0x0c	; 12
    1786:	80 81       	ld	r24, Z
    1788:	8f 5f       	subi	r24, 0xFF	; 255
    178a:	80 83       	st	Z, r24
    178c:	3f c0       	rjmp	.+126    	; 0x180c <prvAddCurrentTaskToDelayedList+0x12e>
    178e:	c8 0c       	add	r12, r8
    1790:	d9 1c       	adc	r13, r9
    1792:	ea 1c       	adc	r14, r10
    1794:	fb 1c       	adc	r15, r11
    1796:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    179a:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    179e:	c2 82       	std	Z+2, r12	; 0x02
    17a0:	d3 82       	std	Z+3, r13	; 0x03
    17a2:	e4 82       	std	Z+4, r14	; 0x04
    17a4:	f5 82       	std	Z+5, r15	; 0x05
    17a6:	c8 14       	cp	r12, r8
    17a8:	d9 04       	cpc	r13, r9
    17aa:	ea 04       	cpc	r14, r10
    17ac:	fb 04       	cpc	r15, r11
    17ae:	68 f4       	brcc	.+26     	; 0x17ca <prvAddCurrentTaskToDelayedList+0xec>
    17b0:	60 91 1d 15 	lds	r22, 0x151D	; 0x80151d <pxCurrentTCB>
    17b4:	70 91 1e 15 	lds	r23, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    17b8:	80 91 95 14 	lds	r24, 0x1495	; 0x801495 <pxOverflowDelayedTaskList>
    17bc:	90 91 96 14 	lds	r25, 0x1496	; 0x801496 <pxOverflowDelayedTaskList+0x1>
    17c0:	6e 5f       	subi	r22, 0xFE	; 254
    17c2:	7f 4f       	sbci	r23, 0xFF	; 255
    17c4:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInsert>
    17c8:	21 c0       	rjmp	.+66     	; 0x180c <prvAddCurrentTaskToDelayedList+0x12e>
    17ca:	60 91 1d 15 	lds	r22, 0x151D	; 0x80151d <pxCurrentTCB>
    17ce:	70 91 1e 15 	lds	r23, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    17d2:	80 91 97 14 	lds	r24, 0x1497	; 0x801497 <pxDelayedTaskList>
    17d6:	90 91 98 14 	lds	r25, 0x1498	; 0x801498 <pxDelayedTaskList+0x1>
    17da:	6e 5f       	subi	r22, 0xFE	; 254
    17dc:	7f 4f       	sbci	r23, 0xFF	; 255
    17de:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInsert>
    17e2:	80 91 61 14 	lds	r24, 0x1461	; 0x801461 <xNextTaskUnblockTime>
    17e6:	90 91 62 14 	lds	r25, 0x1462	; 0x801462 <xNextTaskUnblockTime+0x1>
    17ea:	a0 91 63 14 	lds	r26, 0x1463	; 0x801463 <xNextTaskUnblockTime+0x2>
    17ee:	b0 91 64 14 	lds	r27, 0x1464	; 0x801464 <xNextTaskUnblockTime+0x3>
    17f2:	c8 16       	cp	r12, r24
    17f4:	d9 06       	cpc	r13, r25
    17f6:	ea 06       	cpc	r14, r26
    17f8:	fb 06       	cpc	r15, r27
    17fa:	40 f4       	brcc	.+16     	; 0x180c <prvAddCurrentTaskToDelayedList+0x12e>
    17fc:	c0 92 61 14 	sts	0x1461, r12	; 0x801461 <xNextTaskUnblockTime>
    1800:	d0 92 62 14 	sts	0x1462, r13	; 0x801462 <xNextTaskUnblockTime+0x1>
    1804:	e0 92 63 14 	sts	0x1463, r14	; 0x801463 <xNextTaskUnblockTime+0x2>
    1808:	f0 92 64 14 	sts	0x1464, r15	; 0x801464 <xNextTaskUnblockTime+0x3>
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	ff 90       	pop	r15
    1812:	ef 90       	pop	r14
    1814:	df 90       	pop	r13
    1816:	cf 90       	pop	r12
    1818:	bf 90       	pop	r11
    181a:	af 90       	pop	r10
    181c:	9f 90       	pop	r9
    181e:	8f 90       	pop	r8
    1820:	08 95       	ret

00001822 <xTaskCreate>:
    1822:	2f 92       	push	r2
    1824:	3f 92       	push	r3
    1826:	4f 92       	push	r4
    1828:	5f 92       	push	r5
    182a:	6f 92       	push	r6
    182c:	7f 92       	push	r7
    182e:	8f 92       	push	r8
    1830:	9f 92       	push	r9
    1832:	af 92       	push	r10
    1834:	bf 92       	push	r11
    1836:	cf 92       	push	r12
    1838:	df 92       	push	r13
    183a:	ef 92       	push	r14
    183c:	ff 92       	push	r15
    183e:	0f 93       	push	r16
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	3c 01       	movw	r6, r24
    1846:	1b 01       	movw	r2, r22
    1848:	4a 01       	movw	r8, r20
    184a:	29 01       	movw	r4, r18
    184c:	ca 01       	movw	r24, r20
    184e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <pvPortMalloc>
    1852:	6c 01       	movw	r12, r24
    1854:	89 2b       	or	r24, r25
    1856:	71 f0       	breq	.+28     	; 0x1874 <xTaskCreate+0x52>
    1858:	84 e3       	ldi	r24, 0x34	; 52
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <pvPortMalloc>
    1860:	ec 01       	movw	r28, r24
    1862:	89 2b       	or	r24, r25
    1864:	19 f0       	breq	.+6      	; 0x186c <xTaskCreate+0x4a>
    1866:	dc 8e       	std	Y+28, r13	; 0x1c
    1868:	cb 8e       	std	Y+27, r12	; 0x1b
    186a:	06 c0       	rjmp	.+12     	; 0x1878 <xTaskCreate+0x56>
    186c:	c6 01       	movw	r24, r12
    186e:	0e 94 25 02 	call	0x44a	; 0x44a <vPortFree>
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <xTaskCreate+0x56>
    1874:	c0 e0       	ldi	r28, 0x00	; 0
    1876:	d0 e0       	ldi	r29, 0x00	; 0
    1878:	20 97       	sbiw	r28, 0x00	; 0
    187a:	61 f0       	breq	.+24     	; 0x1894 <xTaskCreate+0x72>
    187c:	a1 2c       	mov	r10, r1
    187e:	b1 2c       	mov	r11, r1
    1880:	6e 01       	movw	r12, r28
    1882:	92 01       	movw	r18, r4
    1884:	a4 01       	movw	r20, r8
    1886:	b1 01       	movw	r22, r2
    1888:	c3 01       	movw	r24, r6
    188a:	e9 dd       	rcall	.-1070   	; 0x145e <prvInitialiseNewTask>
    188c:	ce 01       	movw	r24, r28
    188e:	93 de       	rcall	.-730    	; 0x15b6 <prvAddNewTaskToReadyList>
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	01 c0       	rjmp	.+2      	; 0x1896 <xTaskCreate+0x74>
    1894:	8f ef       	ldi	r24, 0xFF	; 255
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	0f 91       	pop	r16
    189c:	ff 90       	pop	r15
    189e:	ef 90       	pop	r14
    18a0:	df 90       	pop	r13
    18a2:	cf 90       	pop	r12
    18a4:	bf 90       	pop	r11
    18a6:	af 90       	pop	r10
    18a8:	9f 90       	pop	r9
    18aa:	8f 90       	pop	r8
    18ac:	7f 90       	pop	r7
    18ae:	6f 90       	pop	r6
    18b0:	5f 90       	pop	r5
    18b2:	4f 90       	pop	r4
    18b4:	3f 90       	pop	r3
    18b6:	2f 90       	pop	r2
    18b8:	08 95       	ret

000018ba <vTaskStartScheduler>:
    18ba:	ef 92       	push	r14
    18bc:	ff 92       	push	r15
    18be:	0f 93       	push	r16
    18c0:	0f 2e       	mov	r0, r31
    18c2:	ff e5       	ldi	r31, 0x5F	; 95
    18c4:	ef 2e       	mov	r14, r31
    18c6:	f4 e1       	ldi	r31, 0x14	; 20
    18c8:	ff 2e       	mov	r15, r31
    18ca:	f0 2d       	mov	r31, r0
    18cc:	00 e0       	ldi	r16, 0x00	; 0
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	40 ec       	ldi	r20, 0xC0	; 192
    18d4:	50 e0       	ldi	r21, 0x00	; 0
    18d6:	6e e3       	ldi	r22, 0x3E	; 62
    18d8:	72 e0       	ldi	r23, 0x02	; 2
    18da:	8d ec       	ldi	r24, 0xCD	; 205
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	a1 df       	rcall	.-190    	; 0x1822 <xTaskCreate>
    18e0:	81 30       	cpi	r24, 0x01	; 1
    18e2:	11 f4       	brne	.+4      	; 0x18e8 <vTaskStartScheduler+0x2e>
    18e4:	0e 94 01 15 	call	0x2a02	; 0x2a02 <xTimerCreateTimerTask>
    18e8:	81 30       	cpi	r24, 0x01	; 1
    18ea:	c9 f4       	brne	.+50     	; 0x191e <vTaskStartScheduler+0x64>
    18ec:	f8 94       	cli
    18ee:	8f ef       	ldi	r24, 0xFF	; 255
    18f0:	9f ef       	ldi	r25, 0xFF	; 255
    18f2:	dc 01       	movw	r26, r24
    18f4:	80 93 61 14 	sts	0x1461, r24	; 0x801461 <xNextTaskUnblockTime>
    18f8:	90 93 62 14 	sts	0x1462, r25	; 0x801462 <xNextTaskUnblockTime+0x1>
    18fc:	a0 93 63 14 	sts	0x1463, r26	; 0x801463 <xNextTaskUnblockTime+0x2>
    1900:	b0 93 64 14 	sts	0x1464, r27	; 0x801464 <xNextTaskUnblockTime+0x3>
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	80 93 6c 14 	sts	0x146C, r24	; 0x80146c <xSchedulerRunning>
    190a:	10 92 6e 14 	sts	0x146E, r1	; 0x80146e <xTickCount>
    190e:	10 92 6f 14 	sts	0x146F, r1	; 0x80146f <xTickCount+0x1>
    1912:	10 92 70 14 	sts	0x1470, r1	; 0x801470 <xTickCount+0x2>
    1916:	10 92 71 14 	sts	0x1471, r1	; 0x801471 <xTickCount+0x3>
    191a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <xPortStartScheduler>
    191e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1922:	0f 91       	pop	r16
    1924:	ff 90       	pop	r15
    1926:	ef 90       	pop	r14
    1928:	08 95       	ret

0000192a <vTaskSuspendAll>:
    192a:	80 91 5e 14 	lds	r24, 0x145E	; 0x80145e <uxSchedulerSuspended>
    192e:	8f 5f       	subi	r24, 0xFF	; 255
    1930:	80 93 5e 14 	sts	0x145E, r24	; 0x80145e <uxSchedulerSuspended>
    1934:	08 95       	ret

00001936 <xTaskGetTickCount>:
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	0f 92       	push	r0
    193c:	60 91 6e 14 	lds	r22, 0x146E	; 0x80146e <xTickCount>
    1940:	70 91 6f 14 	lds	r23, 0x146F	; 0x80146f <xTickCount+0x1>
    1944:	80 91 70 14 	lds	r24, 0x1470	; 0x801470 <xTickCount+0x2>
    1948:	90 91 71 14 	lds	r25, 0x1471	; 0x801471 <xTickCount+0x3>
    194c:	0f 90       	pop	r0
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	08 95       	ret

00001952 <xTaskIncrementTick>:
    1952:	cf 92       	push	r12
    1954:	df 92       	push	r13
    1956:	ef 92       	push	r14
    1958:	ff 92       	push	r15
    195a:	cf 93       	push	r28
    195c:	df 93       	push	r29
    195e:	80 91 5e 14 	lds	r24, 0x145E	; 0x80145e <uxSchedulerSuspended>
    1962:	81 11       	cpse	r24, r1
    1964:	05 c1       	rjmp	.+522    	; 0x1b70 <xTaskIncrementTick+0x21e>
    1966:	c0 90 6e 14 	lds	r12, 0x146E	; 0x80146e <xTickCount>
    196a:	d0 90 6f 14 	lds	r13, 0x146F	; 0x80146f <xTickCount+0x1>
    196e:	e0 90 70 14 	lds	r14, 0x1470	; 0x801470 <xTickCount+0x2>
    1972:	f0 90 71 14 	lds	r15, 0x1471	; 0x801471 <xTickCount+0x3>
    1976:	8f ef       	ldi	r24, 0xFF	; 255
    1978:	c8 1a       	sub	r12, r24
    197a:	d8 0a       	sbc	r13, r24
    197c:	e8 0a       	sbc	r14, r24
    197e:	f8 0a       	sbc	r15, r24
    1980:	c0 92 6e 14 	sts	0x146E, r12	; 0x80146e <xTickCount>
    1984:	d0 92 6f 14 	sts	0x146F, r13	; 0x80146f <xTickCount+0x1>
    1988:	e0 92 70 14 	sts	0x1470, r14	; 0x801470 <xTickCount+0x2>
    198c:	f0 92 71 14 	sts	0x1471, r15	; 0x801471 <xTickCount+0x3>
    1990:	c1 14       	cp	r12, r1
    1992:	d1 04       	cpc	r13, r1
    1994:	e1 04       	cpc	r14, r1
    1996:	f1 04       	cpc	r15, r1
    1998:	b1 f4       	brne	.+44     	; 0x19c6 <xTaskIncrementTick+0x74>
    199a:	80 91 97 14 	lds	r24, 0x1497	; 0x801497 <pxDelayedTaskList>
    199e:	90 91 98 14 	lds	r25, 0x1498	; 0x801498 <pxDelayedTaskList+0x1>
    19a2:	20 91 95 14 	lds	r18, 0x1495	; 0x801495 <pxOverflowDelayedTaskList>
    19a6:	30 91 96 14 	lds	r19, 0x1496	; 0x801496 <pxOverflowDelayedTaskList+0x1>
    19aa:	30 93 98 14 	sts	0x1498, r19	; 0x801498 <pxDelayedTaskList+0x1>
    19ae:	20 93 97 14 	sts	0x1497, r18	; 0x801497 <pxDelayedTaskList>
    19b2:	90 93 96 14 	sts	0x1496, r25	; 0x801496 <pxOverflowDelayedTaskList+0x1>
    19b6:	80 93 95 14 	sts	0x1495, r24	; 0x801495 <pxOverflowDelayedTaskList>
    19ba:	80 91 66 14 	lds	r24, 0x1466	; 0x801466 <xNumOfOverflows>
    19be:	8f 5f       	subi	r24, 0xFF	; 255
    19c0:	80 93 66 14 	sts	0x1466, r24	; 0x801466 <xNumOfOverflows>
    19c4:	18 dd       	rcall	.-1488   	; 0x13f6 <prvResetNextTaskUnblockTime>
    19c6:	80 91 61 14 	lds	r24, 0x1461	; 0x801461 <xNextTaskUnblockTime>
    19ca:	90 91 62 14 	lds	r25, 0x1462	; 0x801462 <xNextTaskUnblockTime+0x1>
    19ce:	a0 91 63 14 	lds	r26, 0x1463	; 0x801463 <xNextTaskUnblockTime+0x2>
    19d2:	b0 91 64 14 	lds	r27, 0x1464	; 0x801464 <xNextTaskUnblockTime+0x3>
    19d6:	c8 16       	cp	r12, r24
    19d8:	d9 06       	cpc	r13, r25
    19da:	ea 06       	cpc	r14, r26
    19dc:	fb 06       	cpc	r15, r27
    19de:	20 f4       	brcc	.+8      	; 0x19e8 <xTaskIncrementTick+0x96>
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	b2 c0       	rjmp	.+356    	; 0x1b48 <xTaskIncrementTick+0x1f6>
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	01 c0       	rjmp	.+2      	; 0x19ea <xTaskIncrementTick+0x98>
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	e0 91 97 14 	lds	r30, 0x1497	; 0x801497 <pxDelayedTaskList>
    19ee:	f0 91 98 14 	lds	r31, 0x1498	; 0x801498 <pxDelayedTaskList+0x1>
    19f2:	90 81       	ld	r25, Z
    19f4:	91 11       	cpse	r25, r1
    19f6:	0c c0       	rjmp	.+24     	; 0x1a10 <xTaskIncrementTick+0xbe>
    19f8:	4f ef       	ldi	r20, 0xFF	; 255
    19fa:	5f ef       	ldi	r21, 0xFF	; 255
    19fc:	ba 01       	movw	r22, r20
    19fe:	40 93 61 14 	sts	0x1461, r20	; 0x801461 <xNextTaskUnblockTime>
    1a02:	50 93 62 14 	sts	0x1462, r21	; 0x801462 <xNextTaskUnblockTime+0x1>
    1a06:	60 93 63 14 	sts	0x1463, r22	; 0x801463 <xNextTaskUnblockTime+0x2>
    1a0a:	70 93 64 14 	sts	0x1464, r23	; 0x801464 <xNextTaskUnblockTime+0x3>
    1a0e:	9c c0       	rjmp	.+312    	; 0x1b48 <xTaskIncrementTick+0x1f6>
    1a10:	e0 91 97 14 	lds	r30, 0x1497	; 0x801497 <pxDelayedTaskList>
    1a14:	f0 91 98 14 	lds	r31, 0x1498	; 0x801498 <pxDelayedTaskList+0x1>
    1a18:	07 80       	ldd	r0, Z+7	; 0x07
    1a1a:	f0 85       	ldd	r31, Z+8	; 0x08
    1a1c:	e0 2d       	mov	r30, r0
    1a1e:	00 84       	ldd	r0, Z+8	; 0x08
    1a20:	f1 85       	ldd	r31, Z+9	; 0x09
    1a22:	e0 2d       	mov	r30, r0
    1a24:	42 81       	ldd	r20, Z+2	; 0x02
    1a26:	53 81       	ldd	r21, Z+3	; 0x03
    1a28:	64 81       	ldd	r22, Z+4	; 0x04
    1a2a:	75 81       	ldd	r23, Z+5	; 0x05
    1a2c:	c4 16       	cp	r12, r20
    1a2e:	d5 06       	cpc	r13, r21
    1a30:	e6 06       	cpc	r14, r22
    1a32:	f7 06       	cpc	r15, r23
    1a34:	48 f4       	brcc	.+18     	; 0x1a48 <xTaskIncrementTick+0xf6>
    1a36:	40 93 61 14 	sts	0x1461, r20	; 0x801461 <xNextTaskUnblockTime>
    1a3a:	50 93 62 14 	sts	0x1462, r21	; 0x801462 <xNextTaskUnblockTime+0x1>
    1a3e:	60 93 63 14 	sts	0x1463, r22	; 0x801463 <xNextTaskUnblockTime+0x2>
    1a42:	70 93 64 14 	sts	0x1464, r23	; 0x801464 <xNextTaskUnblockTime+0x3>
    1a46:	80 c0       	rjmp	.+256    	; 0x1b48 <xTaskIncrementTick+0x1f6>
    1a48:	a4 85       	ldd	r26, Z+12	; 0x0c
    1a4a:	b5 85       	ldd	r27, Z+13	; 0x0d
    1a4c:	c6 81       	ldd	r28, Z+6	; 0x06
    1a4e:	d7 81       	ldd	r29, Z+7	; 0x07
    1a50:	20 85       	ldd	r18, Z+8	; 0x08
    1a52:	31 85       	ldd	r19, Z+9	; 0x09
    1a54:	3f 83       	std	Y+7, r19	; 0x07
    1a56:	2e 83       	std	Y+6, r18	; 0x06
    1a58:	c0 85       	ldd	r28, Z+8	; 0x08
    1a5a:	d1 85       	ldd	r29, Z+9	; 0x09
    1a5c:	26 81       	ldd	r18, Z+6	; 0x06
    1a5e:	37 81       	ldd	r19, Z+7	; 0x07
    1a60:	3d 83       	std	Y+5, r19	; 0x05
    1a62:	2c 83       	std	Y+4, r18	; 0x04
    1a64:	11 96       	adiw	r26, 0x01	; 1
    1a66:	4d 91       	ld	r20, X+
    1a68:	5c 91       	ld	r21, X
    1a6a:	12 97       	sbiw	r26, 0x02	; 2
    1a6c:	9f 01       	movw	r18, r30
    1a6e:	2e 5f       	subi	r18, 0xFE	; 254
    1a70:	3f 4f       	sbci	r19, 0xFF	; 255
    1a72:	42 17       	cp	r20, r18
    1a74:	53 07       	cpc	r21, r19
    1a76:	31 f4       	brne	.+12     	; 0x1a84 <xTaskIncrementTick+0x132>
    1a78:	40 85       	ldd	r20, Z+8	; 0x08
    1a7a:	51 85       	ldd	r21, Z+9	; 0x09
    1a7c:	12 96       	adiw	r26, 0x02	; 2
    1a7e:	5c 93       	st	X, r21
    1a80:	4e 93       	st	-X, r20
    1a82:	11 97       	sbiw	r26, 0x01	; 1
    1a84:	15 86       	std	Z+13, r1	; 0x0d
    1a86:	14 86       	std	Z+12, r1	; 0x0c
    1a88:	9c 91       	ld	r25, X
    1a8a:	91 50       	subi	r25, 0x01	; 1
    1a8c:	9c 93       	st	X, r25
    1a8e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1a90:	b1 8d       	ldd	r27, Z+25	; 0x19
    1a92:	10 97       	sbiw	r26, 0x00	; 0
    1a94:	09 f1       	breq	.+66     	; 0x1ad8 <xTaskIncrementTick+0x186>
    1a96:	c2 89       	ldd	r28, Z+18	; 0x12
    1a98:	d3 89       	ldd	r29, Z+19	; 0x13
    1a9a:	44 89       	ldd	r20, Z+20	; 0x14
    1a9c:	55 89       	ldd	r21, Z+21	; 0x15
    1a9e:	5f 83       	std	Y+7, r21	; 0x07
    1aa0:	4e 83       	std	Y+6, r20	; 0x06
    1aa2:	c4 89       	ldd	r28, Z+20	; 0x14
    1aa4:	d5 89       	ldd	r29, Z+21	; 0x15
    1aa6:	42 89       	ldd	r20, Z+18	; 0x12
    1aa8:	53 89       	ldd	r21, Z+19	; 0x13
    1aaa:	5d 83       	std	Y+5, r21	; 0x05
    1aac:	4c 83       	std	Y+4, r20	; 0x04
    1aae:	11 96       	adiw	r26, 0x01	; 1
    1ab0:	6d 91       	ld	r22, X+
    1ab2:	7c 91       	ld	r23, X
    1ab4:	12 97       	sbiw	r26, 0x02	; 2
    1ab6:	af 01       	movw	r20, r30
    1ab8:	42 5f       	subi	r20, 0xF2	; 242
    1aba:	5f 4f       	sbci	r21, 0xFF	; 255
    1abc:	64 17       	cp	r22, r20
    1abe:	75 07       	cpc	r23, r21
    1ac0:	31 f4       	brne	.+12     	; 0x1ace <xTaskIncrementTick+0x17c>
    1ac2:	44 89       	ldd	r20, Z+20	; 0x14
    1ac4:	55 89       	ldd	r21, Z+21	; 0x15
    1ac6:	12 96       	adiw	r26, 0x02	; 2
    1ac8:	5c 93       	st	X, r21
    1aca:	4e 93       	st	-X, r20
    1acc:	11 97       	sbiw	r26, 0x01	; 1
    1ace:	11 8e       	std	Z+25, r1	; 0x19
    1ad0:	10 8e       	std	Z+24, r1	; 0x18
    1ad2:	9c 91       	ld	r25, X
    1ad4:	91 50       	subi	r25, 0x01	; 1
    1ad6:	9c 93       	st	X, r25
    1ad8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ada:	90 91 6d 14 	lds	r25, 0x146D	; 0x80146d <uxTopReadyPriority>
    1ade:	9a 17       	cp	r25, r26
    1ae0:	10 f4       	brcc	.+4      	; 0x1ae6 <xTaskIncrementTick+0x194>
    1ae2:	a0 93 6d 14 	sts	0x146D, r26	; 0x80146d <uxTopReadyPriority>
    1ae6:	9b e0       	ldi	r25, 0x0B	; 11
    1ae8:	9a 9f       	mul	r25, r26
    1aea:	d0 01       	movw	r26, r0
    1aec:	11 24       	eor	r1, r1
    1aee:	a1 55       	subi	r26, 0x51	; 81
    1af0:	bb 4e       	sbci	r27, 0xEB	; 235
    1af2:	11 96       	adiw	r26, 0x01	; 1
    1af4:	0d 90       	ld	r0, X+
    1af6:	bc 91       	ld	r27, X
    1af8:	a0 2d       	mov	r26, r0
    1afa:	b7 83       	std	Z+7, r27	; 0x07
    1afc:	a6 83       	std	Z+6, r26	; 0x06
    1afe:	16 96       	adiw	r26, 0x06	; 6
    1b00:	4d 91       	ld	r20, X+
    1b02:	5c 91       	ld	r21, X
    1b04:	17 97       	sbiw	r26, 0x07	; 7
    1b06:	51 87       	std	Z+9, r21	; 0x09
    1b08:	40 87       	std	Z+8, r20	; 0x08
    1b0a:	16 96       	adiw	r26, 0x06	; 6
    1b0c:	cd 91       	ld	r28, X+
    1b0e:	dc 91       	ld	r29, X
    1b10:	17 97       	sbiw	r26, 0x07	; 7
    1b12:	3d 83       	std	Y+5, r19	; 0x05
    1b14:	2c 83       	std	Y+4, r18	; 0x04
    1b16:	17 96       	adiw	r26, 0x07	; 7
    1b18:	3c 93       	st	X, r19
    1b1a:	2e 93       	st	-X, r18
    1b1c:	16 97       	sbiw	r26, 0x06	; 6
    1b1e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b20:	9a 9f       	mul	r25, r26
    1b22:	d0 01       	movw	r26, r0
    1b24:	11 24       	eor	r1, r1
    1b26:	a1 55       	subi	r26, 0x51	; 81
    1b28:	bb 4e       	sbci	r27, 0xEB	; 235
    1b2a:	b5 87       	std	Z+13, r27	; 0x0d
    1b2c:	a4 87       	std	Z+12, r26	; 0x0c
    1b2e:	9c 91       	ld	r25, X
    1b30:	9f 5f       	subi	r25, 0xFF	; 255
    1b32:	9c 93       	st	X, r25
    1b34:	22 8d       	ldd	r18, Z+26	; 0x1a
    1b36:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    1b3a:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1b3e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b40:	29 17       	cp	r18, r25
    1b42:	08 f0       	brcs	.+2      	; 0x1b46 <xTaskIncrementTick+0x1f4>
    1b44:	4f cf       	rjmp	.-354    	; 0x19e4 <xTaskIncrementTick+0x92>
    1b46:	51 cf       	rjmp	.-350    	; 0x19ea <xTaskIncrementTick+0x98>
    1b48:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    1b4c:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1b50:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1b52:	9b e0       	ldi	r25, 0x0B	; 11
    1b54:	e9 9f       	mul	r30, r25
    1b56:	f0 01       	movw	r30, r0
    1b58:	11 24       	eor	r1, r1
    1b5a:	e1 55       	subi	r30, 0x51	; 81
    1b5c:	fb 4e       	sbci	r31, 0xEB	; 235
    1b5e:	90 81       	ld	r25, Z
    1b60:	92 30       	cpi	r25, 0x02	; 2
    1b62:	08 f0       	brcs	.+2      	; 0x1b66 <xTaskIncrementTick+0x214>
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 91 67 14 	lds	r25, 0x1467	; 0x801467 <xYieldPending>
    1b6a:	91 11       	cpse	r25, r1
    1b6c:	16 c0       	rjmp	.+44     	; 0x1b9a <xTaskIncrementTick+0x248>
    1b6e:	16 c0       	rjmp	.+44     	; 0x1b9c <xTaskIncrementTick+0x24a>
    1b70:	80 91 68 14 	lds	r24, 0x1468	; 0x801468 <xPendedTicks>
    1b74:	90 91 69 14 	lds	r25, 0x1469	; 0x801469 <xPendedTicks+0x1>
    1b78:	a0 91 6a 14 	lds	r26, 0x146A	; 0x80146a <xPendedTicks+0x2>
    1b7c:	b0 91 6b 14 	lds	r27, 0x146B	; 0x80146b <xPendedTicks+0x3>
    1b80:	01 96       	adiw	r24, 0x01	; 1
    1b82:	a1 1d       	adc	r26, r1
    1b84:	b1 1d       	adc	r27, r1
    1b86:	80 93 68 14 	sts	0x1468, r24	; 0x801468 <xPendedTicks>
    1b8a:	90 93 69 14 	sts	0x1469, r25	; 0x801469 <xPendedTicks+0x1>
    1b8e:	a0 93 6a 14 	sts	0x146A, r26	; 0x80146a <xPendedTicks+0x2>
    1b92:	b0 93 6b 14 	sts	0x146B, r27	; 0x80146b <xPendedTicks+0x3>
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	01 c0       	rjmp	.+2      	; 0x1b9c <xTaskIncrementTick+0x24a>
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	df 91       	pop	r29
    1b9e:	cf 91       	pop	r28
    1ba0:	ff 90       	pop	r15
    1ba2:	ef 90       	pop	r14
    1ba4:	df 90       	pop	r13
    1ba6:	cf 90       	pop	r12
    1ba8:	08 95       	ret

00001baa <xTaskResumeAll>:
    1baa:	cf 92       	push	r12
    1bac:	df 92       	push	r13
    1bae:	ef 92       	push	r14
    1bb0:	ff 92       	push	r15
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	0f 92       	push	r0
    1bbc:	80 91 5e 14 	lds	r24, 0x145E	; 0x80145e <uxSchedulerSuspended>
    1bc0:	81 50       	subi	r24, 0x01	; 1
    1bc2:	80 93 5e 14 	sts	0x145E, r24	; 0x80145e <uxSchedulerSuspended>
    1bc6:	80 91 5e 14 	lds	r24, 0x145E	; 0x80145e <uxSchedulerSuspended>
    1bca:	81 11       	cpse	r24, r1
    1bcc:	be c0       	rjmp	.+380    	; 0x1d4a <xTaskResumeAll+0x1a0>
    1bce:	80 91 72 14 	lds	r24, 0x1472	; 0x801472 <uxCurrentNumberOfTasks>
    1bd2:	81 11       	cpse	r24, r1
    1bd4:	88 c0       	rjmp	.+272    	; 0x1ce6 <xTaskResumeAll+0x13c>
    1bd6:	bc c0       	rjmp	.+376    	; 0x1d50 <xTaskResumeAll+0x1a6>
    1bd8:	e0 91 91 14 	lds	r30, 0x1491	; 0x801491 <xPendingReadyList+0x7>
    1bdc:	f0 91 92 14 	lds	r31, 0x1492	; 0x801492 <xPendingReadyList+0x8>
    1be0:	00 84       	ldd	r0, Z+8	; 0x08
    1be2:	f1 85       	ldd	r31, Z+9	; 0x09
    1be4:	e0 2d       	mov	r30, r0
    1be6:	a0 8d       	ldd	r26, Z+24	; 0x18
    1be8:	b1 8d       	ldd	r27, Z+25	; 0x19
    1bea:	c2 89       	ldd	r28, Z+18	; 0x12
    1bec:	d3 89       	ldd	r29, Z+19	; 0x13
    1bee:	84 89       	ldd	r24, Z+20	; 0x14
    1bf0:	95 89       	ldd	r25, Z+21	; 0x15
    1bf2:	9f 83       	std	Y+7, r25	; 0x07
    1bf4:	8e 83       	std	Y+6, r24	; 0x06
    1bf6:	c4 89       	ldd	r28, Z+20	; 0x14
    1bf8:	d5 89       	ldd	r29, Z+21	; 0x15
    1bfa:	82 89       	ldd	r24, Z+18	; 0x12
    1bfc:	93 89       	ldd	r25, Z+19	; 0x13
    1bfe:	9d 83       	std	Y+5, r25	; 0x05
    1c00:	8c 83       	std	Y+4, r24	; 0x04
    1c02:	11 96       	adiw	r26, 0x01	; 1
    1c04:	2d 91       	ld	r18, X+
    1c06:	3c 91       	ld	r19, X
    1c08:	12 97       	sbiw	r26, 0x02	; 2
    1c0a:	cf 01       	movw	r24, r30
    1c0c:	0e 96       	adiw	r24, 0x0e	; 14
    1c0e:	28 17       	cp	r18, r24
    1c10:	39 07       	cpc	r19, r25
    1c12:	31 f4       	brne	.+12     	; 0x1c20 <xTaskResumeAll+0x76>
    1c14:	84 89       	ldd	r24, Z+20	; 0x14
    1c16:	95 89       	ldd	r25, Z+21	; 0x15
    1c18:	12 96       	adiw	r26, 0x02	; 2
    1c1a:	9c 93       	st	X, r25
    1c1c:	8e 93       	st	-X, r24
    1c1e:	11 97       	sbiw	r26, 0x01	; 1
    1c20:	11 8e       	std	Z+25, r1	; 0x19
    1c22:	10 8e       	std	Z+24, r1	; 0x18
    1c24:	8c 91       	ld	r24, X
    1c26:	81 50       	subi	r24, 0x01	; 1
    1c28:	8c 93       	st	X, r24
    1c2a:	a4 85       	ldd	r26, Z+12	; 0x0c
    1c2c:	b5 85       	ldd	r27, Z+13	; 0x0d
    1c2e:	c6 81       	ldd	r28, Z+6	; 0x06
    1c30:	d7 81       	ldd	r29, Z+7	; 0x07
    1c32:	80 85       	ldd	r24, Z+8	; 0x08
    1c34:	91 85       	ldd	r25, Z+9	; 0x09
    1c36:	9f 83       	std	Y+7, r25	; 0x07
    1c38:	8e 83       	std	Y+6, r24	; 0x06
    1c3a:	c0 85       	ldd	r28, Z+8	; 0x08
    1c3c:	d1 85       	ldd	r29, Z+9	; 0x09
    1c3e:	86 81       	ldd	r24, Z+6	; 0x06
    1c40:	97 81       	ldd	r25, Z+7	; 0x07
    1c42:	9d 83       	std	Y+5, r25	; 0x05
    1c44:	8c 83       	std	Y+4, r24	; 0x04
    1c46:	11 96       	adiw	r26, 0x01	; 1
    1c48:	8d 91       	ld	r24, X+
    1c4a:	9c 91       	ld	r25, X
    1c4c:	12 97       	sbiw	r26, 0x02	; 2
    1c4e:	9f 01       	movw	r18, r30
    1c50:	2e 5f       	subi	r18, 0xFE	; 254
    1c52:	3f 4f       	sbci	r19, 0xFF	; 255
    1c54:	82 17       	cp	r24, r18
    1c56:	93 07       	cpc	r25, r19
    1c58:	31 f4       	brne	.+12     	; 0x1c66 <xTaskResumeAll+0xbc>
    1c5a:	80 85       	ldd	r24, Z+8	; 0x08
    1c5c:	91 85       	ldd	r25, Z+9	; 0x09
    1c5e:	12 96       	adiw	r26, 0x02	; 2
    1c60:	9c 93       	st	X, r25
    1c62:	8e 93       	st	-X, r24
    1c64:	11 97       	sbiw	r26, 0x01	; 1
    1c66:	15 86       	std	Z+13, r1	; 0x0d
    1c68:	14 86       	std	Z+12, r1	; 0x0c
    1c6a:	8c 91       	ld	r24, X
    1c6c:	81 50       	subi	r24, 0x01	; 1
    1c6e:	8c 93       	st	X, r24
    1c70:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c72:	80 91 6d 14 	lds	r24, 0x146D	; 0x80146d <uxTopReadyPriority>
    1c76:	8a 17       	cp	r24, r26
    1c78:	10 f4       	brcc	.+4      	; 0x1c7e <xTaskResumeAll+0xd4>
    1c7a:	a0 93 6d 14 	sts	0x146D, r26	; 0x80146d <uxTopReadyPriority>
    1c7e:	8b e0       	ldi	r24, 0x0B	; 11
    1c80:	8a 9f       	mul	r24, r26
    1c82:	d0 01       	movw	r26, r0
    1c84:	11 24       	eor	r1, r1
    1c86:	a1 55       	subi	r26, 0x51	; 81
    1c88:	bb 4e       	sbci	r27, 0xEB	; 235
    1c8a:	11 96       	adiw	r26, 0x01	; 1
    1c8c:	0d 90       	ld	r0, X+
    1c8e:	bc 91       	ld	r27, X
    1c90:	a0 2d       	mov	r26, r0
    1c92:	b7 83       	std	Z+7, r27	; 0x07
    1c94:	a6 83       	std	Z+6, r26	; 0x06
    1c96:	16 96       	adiw	r26, 0x06	; 6
    1c98:	4d 91       	ld	r20, X+
    1c9a:	5c 91       	ld	r21, X
    1c9c:	17 97       	sbiw	r26, 0x07	; 7
    1c9e:	51 87       	std	Z+9, r21	; 0x09
    1ca0:	40 87       	std	Z+8, r20	; 0x08
    1ca2:	16 96       	adiw	r26, 0x06	; 6
    1ca4:	cd 91       	ld	r28, X+
    1ca6:	dc 91       	ld	r29, X
    1ca8:	17 97       	sbiw	r26, 0x07	; 7
    1caa:	3d 83       	std	Y+5, r19	; 0x05
    1cac:	2c 83       	std	Y+4, r18	; 0x04
    1cae:	17 96       	adiw	r26, 0x07	; 7
    1cb0:	3c 93       	st	X, r19
    1cb2:	2e 93       	st	-X, r18
    1cb4:	16 97       	sbiw	r26, 0x06	; 6
    1cb6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1cb8:	8a 9f       	mul	r24, r26
    1cba:	d0 01       	movw	r26, r0
    1cbc:	11 24       	eor	r1, r1
    1cbe:	a1 55       	subi	r26, 0x51	; 81
    1cc0:	bb 4e       	sbci	r27, 0xEB	; 235
    1cc2:	b5 87       	std	Z+13, r27	; 0x0d
    1cc4:	a4 87       	std	Z+12, r26	; 0x0c
    1cc6:	8c 91       	ld	r24, X
    1cc8:	8f 5f       	subi	r24, 0xFF	; 255
    1cca:	8c 93       	st	X, r24
    1ccc:	92 8d       	ldd	r25, Z+26	; 0x1a
    1cce:	a0 91 1d 15 	lds	r26, 0x151D	; 0x80151d <pxCurrentTCB>
    1cd2:	b0 91 1e 15 	lds	r27, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1cd6:	5a 96       	adiw	r26, 0x1a	; 26
    1cd8:	8c 91       	ld	r24, X
    1cda:	98 17       	cp	r25, r24
    1cdc:	30 f0       	brcs	.+12     	; 0x1cea <xTaskResumeAll+0x140>
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	80 93 67 14 	sts	0x1467, r24	; 0x801467 <xYieldPending>
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <xTaskResumeAll+0x140>
    1ce6:	e0 e0       	ldi	r30, 0x00	; 0
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 91 8a 14 	lds	r24, 0x148A	; 0x80148a <xPendingReadyList>
    1cee:	81 11       	cpse	r24, r1
    1cf0:	73 cf       	rjmp	.-282    	; 0x1bd8 <xTaskResumeAll+0x2e>
    1cf2:	ef 2b       	or	r30, r31
    1cf4:	09 f0       	breq	.+2      	; 0x1cf8 <xTaskResumeAll+0x14e>
    1cf6:	7f db       	rcall	.-2306   	; 0x13f6 <prvResetNextTaskUnblockTime>
    1cf8:	c0 90 68 14 	lds	r12, 0x1468	; 0x801468 <xPendedTicks>
    1cfc:	d0 90 69 14 	lds	r13, 0x1469	; 0x801469 <xPendedTicks+0x1>
    1d00:	e0 90 6a 14 	lds	r14, 0x146A	; 0x80146a <xPendedTicks+0x2>
    1d04:	f0 90 6b 14 	lds	r15, 0x146B	; 0x80146b <xPendedTicks+0x3>
    1d08:	c1 14       	cp	r12, r1
    1d0a:	d1 04       	cpc	r13, r1
    1d0c:	e1 04       	cpc	r14, r1
    1d0e:	f1 04       	cpc	r15, r1
    1d10:	a1 f0       	breq	.+40     	; 0x1d3a <xTaskResumeAll+0x190>
    1d12:	1f de       	rcall	.-962    	; 0x1952 <xTaskIncrementTick>
    1d14:	88 23       	and	r24, r24
    1d16:	19 f0       	breq	.+6      	; 0x1d1e <xTaskResumeAll+0x174>
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	80 93 67 14 	sts	0x1467, r24	; 0x801467 <xYieldPending>
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	c8 1a       	sub	r12, r24
    1d22:	d1 08       	sbc	r13, r1
    1d24:	e1 08       	sbc	r14, r1
    1d26:	f1 08       	sbc	r15, r1
    1d28:	a1 f7       	brne	.-24     	; 0x1d12 <xTaskResumeAll+0x168>
    1d2a:	10 92 68 14 	sts	0x1468, r1	; 0x801468 <xPendedTicks>
    1d2e:	10 92 69 14 	sts	0x1469, r1	; 0x801469 <xPendedTicks+0x1>
    1d32:	10 92 6a 14 	sts	0x146A, r1	; 0x80146a <xPendedTicks+0x2>
    1d36:	10 92 6b 14 	sts	0x146B, r1	; 0x80146b <xPendedTicks+0x3>
    1d3a:	80 91 67 14 	lds	r24, 0x1467	; 0x801467 <xYieldPending>
    1d3e:	88 23       	and	r24, r24
    1d40:	31 f0       	breq	.+12     	; 0x1d4e <xTaskResumeAll+0x1a4>
    1d42:	0e 94 30 03 	call	0x660	; 0x660 <vPortYield>
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	03 c0       	rjmp	.+6      	; 0x1d50 <xTaskResumeAll+0x1a6>
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	01 c0       	rjmp	.+2      	; 0x1d50 <xTaskResumeAll+0x1a6>
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	0f 90       	pop	r0
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	df 91       	pop	r29
    1d56:	cf 91       	pop	r28
    1d58:	ff 90       	pop	r15
    1d5a:	ef 90       	pop	r14
    1d5c:	df 90       	pop	r13
    1d5e:	cf 90       	pop	r12
    1d60:	08 95       	ret

00001d62 <xTaskDelayUntil>:
    1d62:	8f 92       	push	r8
    1d64:	9f 92       	push	r9
    1d66:	af 92       	push	r10
    1d68:	bf 92       	push	r11
    1d6a:	cf 92       	push	r12
    1d6c:	df 92       	push	r13
    1d6e:	ef 92       	push	r14
    1d70:	ff 92       	push	r15
    1d72:	1f 93       	push	r17
    1d74:	cf 93       	push	r28
    1d76:	df 93       	push	r29
    1d78:	ec 01       	movw	r28, r24
    1d7a:	6a 01       	movw	r12, r20
    1d7c:	7b 01       	movw	r14, r22
    1d7e:	d5 dd       	rcall	.-1110   	; 0x192a <vTaskSuspendAll>
    1d80:	80 90 6e 14 	lds	r8, 0x146E	; 0x80146e <xTickCount>
    1d84:	90 90 6f 14 	lds	r9, 0x146F	; 0x80146f <xTickCount+0x1>
    1d88:	a0 90 70 14 	lds	r10, 0x1470	; 0x801470 <xTickCount+0x2>
    1d8c:	b0 90 71 14 	lds	r11, 0x1471	; 0x801471 <xTickCount+0x3>
    1d90:	88 81       	ld	r24, Y
    1d92:	99 81       	ldd	r25, Y+1	; 0x01
    1d94:	aa 81       	ldd	r26, Y+2	; 0x02
    1d96:	bb 81       	ldd	r27, Y+3	; 0x03
    1d98:	ac 01       	movw	r20, r24
    1d9a:	bd 01       	movw	r22, r26
    1d9c:	4c 0d       	add	r20, r12
    1d9e:	5d 1d       	adc	r21, r13
    1da0:	6e 1d       	adc	r22, r14
    1da2:	7f 1d       	adc	r23, r15
    1da4:	88 16       	cp	r8, r24
    1da6:	99 06       	cpc	r9, r25
    1da8:	aa 06       	cpc	r10, r26
    1daa:	bb 06       	cpc	r11, r27
    1dac:	60 f4       	brcc	.+24     	; 0x1dc6 <xTaskDelayUntil+0x64>
    1dae:	48 17       	cp	r20, r24
    1db0:	59 07       	cpc	r21, r25
    1db2:	6a 07       	cpc	r22, r26
    1db4:	7b 07       	cpc	r23, r27
    1db6:	98 f4       	brcc	.+38     	; 0x1dde <xTaskDelayUntil+0x7c>
    1db8:	84 16       	cp	r8, r20
    1dba:	95 06       	cpc	r9, r21
    1dbc:	a6 06       	cpc	r10, r22
    1dbe:	b7 06       	cpc	r11, r23
    1dc0:	80 f0       	brcs	.+32     	; 0x1de2 <xTaskDelayUntil+0x80>
    1dc2:	10 e0       	ldi	r17, 0x00	; 0
    1dc4:	13 c0       	rjmp	.+38     	; 0x1dec <xTaskDelayUntil+0x8a>
    1dc6:	48 17       	cp	r20, r24
    1dc8:	59 07       	cpc	r21, r25
    1dca:	6a 07       	cpc	r22, r26
    1dcc:	7b 07       	cpc	r23, r27
    1dce:	58 f0       	brcs	.+22     	; 0x1de6 <xTaskDelayUntil+0x84>
    1dd0:	84 16       	cp	r8, r20
    1dd2:	95 06       	cpc	r9, r21
    1dd4:	a6 06       	cpc	r10, r22
    1dd6:	b7 06       	cpc	r11, r23
    1dd8:	40 f0       	brcs	.+16     	; 0x1dea <xTaskDelayUntil+0x88>
    1dda:	10 e0       	ldi	r17, 0x00	; 0
    1ddc:	07 c0       	rjmp	.+14     	; 0x1dec <xTaskDelayUntil+0x8a>
    1dde:	10 e0       	ldi	r17, 0x00	; 0
    1de0:	05 c0       	rjmp	.+10     	; 0x1dec <xTaskDelayUntil+0x8a>
    1de2:	11 e0       	ldi	r17, 0x01	; 1
    1de4:	03 c0       	rjmp	.+6      	; 0x1dec <xTaskDelayUntil+0x8a>
    1de6:	11 e0       	ldi	r17, 0x01	; 1
    1de8:	01 c0       	rjmp	.+2      	; 0x1dec <xTaskDelayUntil+0x8a>
    1dea:	11 e0       	ldi	r17, 0x01	; 1
    1dec:	48 83       	st	Y, r20
    1dee:	59 83       	std	Y+1, r21	; 0x01
    1df0:	6a 83       	std	Y+2, r22	; 0x02
    1df2:	7b 83       	std	Y+3, r23	; 0x03
    1df4:	11 23       	and	r17, r17
    1df6:	41 f0       	breq	.+16     	; 0x1e08 <xTaskDelayUntil+0xa6>
    1df8:	cb 01       	movw	r24, r22
    1dfa:	ba 01       	movw	r22, r20
    1dfc:	68 19       	sub	r22, r8
    1dfe:	79 09       	sbc	r23, r9
    1e00:	8a 09       	sbc	r24, r10
    1e02:	9b 09       	sbc	r25, r11
    1e04:	40 e0       	ldi	r20, 0x00	; 0
    1e06:	6b dc       	rcall	.-1834   	; 0x16de <prvAddCurrentTaskToDelayedList>
    1e08:	d0 de       	rcall	.-608    	; 0x1baa <xTaskResumeAll>
    1e0a:	81 11       	cpse	r24, r1
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <xTaskDelayUntil+0xb0>
    1e0e:	0e 94 30 03 	call	0x660	; 0x660 <vPortYield>
    1e12:	81 2f       	mov	r24, r17
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	1f 91       	pop	r17
    1e1a:	ff 90       	pop	r15
    1e1c:	ef 90       	pop	r14
    1e1e:	df 90       	pop	r13
    1e20:	cf 90       	pop	r12
    1e22:	bf 90       	pop	r11
    1e24:	af 90       	pop	r10
    1e26:	9f 90       	pop	r9
    1e28:	8f 90       	pop	r8
    1e2a:	08 95       	ret

00001e2c <vTaskDelay>:
    1e2c:	cf 92       	push	r12
    1e2e:	df 92       	push	r13
    1e30:	ef 92       	push	r14
    1e32:	ff 92       	push	r15
    1e34:	6b 01       	movw	r12, r22
    1e36:	7c 01       	movw	r14, r24
    1e38:	67 2b       	or	r22, r23
    1e3a:	68 2b       	or	r22, r24
    1e3c:	69 2b       	or	r22, r25
    1e3e:	39 f0       	breq	.+14     	; 0x1e4e <vTaskDelay+0x22>
    1e40:	74 dd       	rcall	.-1304   	; 0x192a <vTaskSuspendAll>
    1e42:	40 e0       	ldi	r20, 0x00	; 0
    1e44:	c7 01       	movw	r24, r14
    1e46:	b6 01       	movw	r22, r12
    1e48:	4a dc       	rcall	.-1900   	; 0x16de <prvAddCurrentTaskToDelayedList>
    1e4a:	af de       	rcall	.-674    	; 0x1baa <xTaskResumeAll>
    1e4c:	01 c0       	rjmp	.+2      	; 0x1e50 <vTaskDelay+0x24>
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	81 11       	cpse	r24, r1
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <vTaskDelay+0x2c>
    1e54:	0e 94 30 03 	call	0x660	; 0x660 <vPortYield>
    1e58:	ff 90       	pop	r15
    1e5a:	ef 90       	pop	r14
    1e5c:	df 90       	pop	r13
    1e5e:	cf 90       	pop	r12
    1e60:	08 95       	ret

00001e62 <vTaskSwitchContext>:
    1e62:	80 91 5e 14 	lds	r24, 0x145E	; 0x80145e <uxSchedulerSuspended>
    1e66:	88 23       	and	r24, r24
    1e68:	21 f0       	breq	.+8      	; 0x1e72 <vTaskSwitchContext+0x10>
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	80 93 67 14 	sts	0x1467, r24	; 0x801467 <xYieldPending>
    1e70:	08 95       	ret
    1e72:	10 92 67 14 	sts	0x1467, r1	; 0x801467 <xYieldPending>
    1e76:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    1e7a:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1e7e:	20 81       	ld	r18, Z
    1e80:	31 81       	ldd	r19, Z+1	; 0x01
    1e82:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    1e86:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1e8a:	83 8d       	ldd	r24, Z+27	; 0x1b
    1e8c:	94 8d       	ldd	r25, Z+28	; 0x1c
    1e8e:	82 17       	cp	r24, r18
    1e90:	93 07       	cpc	r25, r19
    1e92:	60 f0       	brcs	.+24     	; 0x1eac <vTaskSwitchContext+0x4a>
    1e94:	60 91 1d 15 	lds	r22, 0x151D	; 0x80151d <pxCurrentTCB>
    1e98:	70 91 1e 15 	lds	r23, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1e9c:	63 5e       	subi	r22, 0xE3	; 227
    1e9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea0:	80 91 1d 15 	lds	r24, 0x151D	; 0x80151d <pxCurrentTCB>
    1ea4:	90 91 1e 15 	lds	r25, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1ea8:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <vApplicationStackOverflowHook>
    1eac:	80 91 6d 14 	lds	r24, 0x146D	; 0x80146d <uxTopReadyPriority>
    1eb0:	01 c0       	rjmp	.+2      	; 0x1eb4 <vTaskSwitchContext+0x52>
    1eb2:	81 50       	subi	r24, 0x01	; 1
    1eb4:	28 2f       	mov	r18, r24
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	9b e0       	ldi	r25, 0x0B	; 11
    1eba:	92 9f       	mul	r25, r18
    1ebc:	f0 01       	movw	r30, r0
    1ebe:	93 9f       	mul	r25, r19
    1ec0:	f0 0d       	add	r31, r0
    1ec2:	11 24       	eor	r1, r1
    1ec4:	e1 55       	subi	r30, 0x51	; 81
    1ec6:	fb 4e       	sbci	r31, 0xEB	; 235
    1ec8:	90 81       	ld	r25, Z
    1eca:	99 23       	and	r25, r25
    1ecc:	91 f3       	breq	.-28     	; 0x1eb2 <vTaskSwitchContext+0x50>
    1ece:	9b e0       	ldi	r25, 0x0B	; 11
    1ed0:	92 9f       	mul	r25, r18
    1ed2:	a0 01       	movw	r20, r0
    1ed4:	93 9f       	mul	r25, r19
    1ed6:	50 0d       	add	r21, r0
    1ed8:	11 24       	eor	r1, r1
    1eda:	df 01       	movw	r26, r30
    1edc:	01 80       	ldd	r0, Z+1	; 0x01
    1ede:	f2 81       	ldd	r31, Z+2	; 0x02
    1ee0:	e0 2d       	mov	r30, r0
    1ee2:	04 80       	ldd	r0, Z+4	; 0x04
    1ee4:	f5 81       	ldd	r31, Z+5	; 0x05
    1ee6:	e0 2d       	mov	r30, r0
    1ee8:	12 96       	adiw	r26, 0x02	; 2
    1eea:	fc 93       	st	X, r31
    1eec:	ee 93       	st	-X, r30
    1eee:	11 97       	sbiw	r26, 0x01	; 1
    1ef0:	4e 54       	subi	r20, 0x4E	; 78
    1ef2:	5b 4e       	sbci	r21, 0xEB	; 235
    1ef4:	e4 17       	cp	r30, r20
    1ef6:	f5 07       	cpc	r31, r21
    1ef8:	29 f4       	brne	.+10     	; 0x1f04 <vTaskSwitchContext+0xa2>
    1efa:	44 81       	ldd	r20, Z+4	; 0x04
    1efc:	55 81       	ldd	r21, Z+5	; 0x05
    1efe:	fd 01       	movw	r30, r26
    1f00:	52 83       	std	Z+2, r21	; 0x02
    1f02:	41 83       	std	Z+1, r20	; 0x01
    1f04:	9b e0       	ldi	r25, 0x0B	; 11
    1f06:	92 9f       	mul	r25, r18
    1f08:	f0 01       	movw	r30, r0
    1f0a:	93 9f       	mul	r25, r19
    1f0c:	f0 0d       	add	r31, r0
    1f0e:	11 24       	eor	r1, r1
    1f10:	e1 55       	subi	r30, 0x51	; 81
    1f12:	fb 4e       	sbci	r31, 0xEB	; 235
    1f14:	01 80       	ldd	r0, Z+1	; 0x01
    1f16:	f2 81       	ldd	r31, Z+2	; 0x02
    1f18:	e0 2d       	mov	r30, r0
    1f1a:	20 85       	ldd	r18, Z+8	; 0x08
    1f1c:	31 85       	ldd	r19, Z+9	; 0x09
    1f1e:	30 93 1e 15 	sts	0x151E, r19	; 0x80151e <pxCurrentTCB+0x1>
    1f22:	20 93 1d 15 	sts	0x151D, r18	; 0x80151d <pxCurrentTCB>
    1f26:	80 93 6d 14 	sts	0x146D, r24	; 0x80146d <uxTopReadyPriority>
    1f2a:	08 95       	ret

00001f2c <vTaskPlaceOnEventList>:
    1f2c:	cf 92       	push	r12
    1f2e:	df 92       	push	r13
    1f30:	ef 92       	push	r14
    1f32:	ff 92       	push	r15
    1f34:	6a 01       	movw	r12, r20
    1f36:	7b 01       	movw	r14, r22
    1f38:	60 91 1d 15 	lds	r22, 0x151D	; 0x80151d <pxCurrentTCB>
    1f3c:	70 91 1e 15 	lds	r23, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1f40:	62 5f       	subi	r22, 0xF2	; 242
    1f42:	7f 4f       	sbci	r23, 0xFF	; 255
    1f44:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInsert>
    1f48:	41 e0       	ldi	r20, 0x01	; 1
    1f4a:	c7 01       	movw	r24, r14
    1f4c:	b6 01       	movw	r22, r12
    1f4e:	c7 db       	rcall	.-2162   	; 0x16de <prvAddCurrentTaskToDelayedList>
    1f50:	ff 90       	pop	r15
    1f52:	ef 90       	pop	r14
    1f54:	df 90       	pop	r13
    1f56:	cf 90       	pop	r12
    1f58:	08 95       	ret

00001f5a <vTaskPlaceOnEventListRestricted>:
    1f5a:	cf 93       	push	r28
    1f5c:	df 93       	push	r29
    1f5e:	fc 01       	movw	r30, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	ba 01       	movw	r22, r20
    1f64:	a1 81       	ldd	r26, Z+1	; 0x01
    1f66:	b2 81       	ldd	r27, Z+2	; 0x02
    1f68:	c0 91 1d 15 	lds	r28, 0x151D	; 0x80151d <pxCurrentTCB>
    1f6c:	d0 91 1e 15 	lds	r29, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1f70:	bb 8b       	std	Y+19, r27	; 0x13
    1f72:	aa 8b       	std	Y+18, r26	; 0x12
    1f74:	c0 91 1d 15 	lds	r28, 0x151D	; 0x80151d <pxCurrentTCB>
    1f78:	d0 91 1e 15 	lds	r29, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1f7c:	16 96       	adiw	r26, 0x06	; 6
    1f7e:	4d 91       	ld	r20, X+
    1f80:	5c 91       	ld	r21, X
    1f82:	17 97       	sbiw	r26, 0x07	; 7
    1f84:	5d 8b       	std	Y+21, r21	; 0x15
    1f86:	4c 8b       	std	Y+20, r20	; 0x14
    1f88:	16 96       	adiw	r26, 0x06	; 6
    1f8a:	cd 91       	ld	r28, X+
    1f8c:	dc 91       	ld	r29, X
    1f8e:	17 97       	sbiw	r26, 0x07	; 7
    1f90:	40 91 1d 15 	lds	r20, 0x151D	; 0x80151d <pxCurrentTCB>
    1f94:	50 91 1e 15 	lds	r21, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1f98:	42 5f       	subi	r20, 0xF2	; 242
    1f9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f9c:	5d 83       	std	Y+5, r21	; 0x05
    1f9e:	4c 83       	std	Y+4, r20	; 0x04
    1fa0:	40 91 1d 15 	lds	r20, 0x151D	; 0x80151d <pxCurrentTCB>
    1fa4:	50 91 1e 15 	lds	r21, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1fa8:	42 5f       	subi	r20, 0xF2	; 242
    1faa:	5f 4f       	sbci	r21, 0xFF	; 255
    1fac:	17 96       	adiw	r26, 0x07	; 7
    1fae:	5c 93       	st	X, r21
    1fb0:	4e 93       	st	-X, r20
    1fb2:	16 97       	sbiw	r26, 0x06	; 6
    1fb4:	a0 91 1d 15 	lds	r26, 0x151D	; 0x80151d <pxCurrentTCB>
    1fb8:	b0 91 1e 15 	lds	r27, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1fbc:	59 96       	adiw	r26, 0x19	; 25
    1fbe:	fc 93       	st	X, r31
    1fc0:	ee 93       	st	-X, r30
    1fc2:	58 97       	sbiw	r26, 0x18	; 24
    1fc4:	30 81       	ld	r19, Z
    1fc6:	3f 5f       	subi	r19, 0xFF	; 255
    1fc8:	30 83       	st	Z, r19
    1fca:	22 23       	and	r18, r18
    1fcc:	19 f0       	breq	.+6      	; 0x1fd4 <vTaskPlaceOnEventListRestricted+0x7a>
    1fce:	6f ef       	ldi	r22, 0xFF	; 255
    1fd0:	7f ef       	ldi	r23, 0xFF	; 255
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	42 2f       	mov	r20, r18
    1fd6:	83 db       	rcall	.-2298   	; 0x16de <prvAddCurrentTaskToDelayedList>
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	08 95       	ret

00001fde <xTaskRemoveFromEventList>:
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	17 96       	adiw	r26, 0x07	; 7
    1fe6:	ed 91       	ld	r30, X+
    1fe8:	fc 91       	ld	r31, X
    1fea:	18 97       	sbiw	r26, 0x08	; 8
    1fec:	00 84       	ldd	r0, Z+8	; 0x08
    1fee:	f1 85       	ldd	r31, Z+9	; 0x09
    1ff0:	e0 2d       	mov	r30, r0
    1ff2:	a0 8d       	ldd	r26, Z+24	; 0x18
    1ff4:	b1 8d       	ldd	r27, Z+25	; 0x19
    1ff6:	c2 89       	ldd	r28, Z+18	; 0x12
    1ff8:	d3 89       	ldd	r29, Z+19	; 0x13
    1ffa:	84 89       	ldd	r24, Z+20	; 0x14
    1ffc:	95 89       	ldd	r25, Z+21	; 0x15
    1ffe:	9f 83       	std	Y+7, r25	; 0x07
    2000:	8e 83       	std	Y+6, r24	; 0x06
    2002:	c4 89       	ldd	r28, Z+20	; 0x14
    2004:	d5 89       	ldd	r29, Z+21	; 0x15
    2006:	82 89       	ldd	r24, Z+18	; 0x12
    2008:	93 89       	ldd	r25, Z+19	; 0x13
    200a:	9d 83       	std	Y+5, r25	; 0x05
    200c:	8c 83       	std	Y+4, r24	; 0x04
    200e:	11 96       	adiw	r26, 0x01	; 1
    2010:	8d 91       	ld	r24, X+
    2012:	9c 91       	ld	r25, X
    2014:	12 97       	sbiw	r26, 0x02	; 2
    2016:	9f 01       	movw	r18, r30
    2018:	22 5f       	subi	r18, 0xF2	; 242
    201a:	3f 4f       	sbci	r19, 0xFF	; 255
    201c:	82 17       	cp	r24, r18
    201e:	93 07       	cpc	r25, r19
    2020:	31 f4       	brne	.+12     	; 0x202e <__DATA_REGION_LENGTH__+0x2e>
    2022:	84 89       	ldd	r24, Z+20	; 0x14
    2024:	95 89       	ldd	r25, Z+21	; 0x15
    2026:	12 96       	adiw	r26, 0x02	; 2
    2028:	9c 93       	st	X, r25
    202a:	8e 93       	st	-X, r24
    202c:	11 97       	sbiw	r26, 0x01	; 1
    202e:	11 8e       	std	Z+25, r1	; 0x19
    2030:	10 8e       	std	Z+24, r1	; 0x18
    2032:	8c 91       	ld	r24, X
    2034:	81 50       	subi	r24, 0x01	; 1
    2036:	8c 93       	st	X, r24
    2038:	80 91 5e 14 	lds	r24, 0x145E	; 0x80145e <uxSchedulerSuspended>
    203c:	81 11       	cpse	r24, r1
    203e:	52 c0       	rjmp	.+164    	; 0x20e4 <__DATA_REGION_LENGTH__+0xe4>
    2040:	a4 85       	ldd	r26, Z+12	; 0x0c
    2042:	b5 85       	ldd	r27, Z+13	; 0x0d
    2044:	c6 81       	ldd	r28, Z+6	; 0x06
    2046:	d7 81       	ldd	r29, Z+7	; 0x07
    2048:	80 85       	ldd	r24, Z+8	; 0x08
    204a:	91 85       	ldd	r25, Z+9	; 0x09
    204c:	9f 83       	std	Y+7, r25	; 0x07
    204e:	8e 83       	std	Y+6, r24	; 0x06
    2050:	c0 85       	ldd	r28, Z+8	; 0x08
    2052:	d1 85       	ldd	r29, Z+9	; 0x09
    2054:	86 81       	ldd	r24, Z+6	; 0x06
    2056:	97 81       	ldd	r25, Z+7	; 0x07
    2058:	9d 83       	std	Y+5, r25	; 0x05
    205a:	8c 83       	std	Y+4, r24	; 0x04
    205c:	11 96       	adiw	r26, 0x01	; 1
    205e:	8d 91       	ld	r24, X+
    2060:	9c 91       	ld	r25, X
    2062:	12 97       	sbiw	r26, 0x02	; 2
    2064:	9f 01       	movw	r18, r30
    2066:	2e 5f       	subi	r18, 0xFE	; 254
    2068:	3f 4f       	sbci	r19, 0xFF	; 255
    206a:	82 17       	cp	r24, r18
    206c:	93 07       	cpc	r25, r19
    206e:	31 f4       	brne	.+12     	; 0x207c <__DATA_REGION_LENGTH__+0x7c>
    2070:	80 85       	ldd	r24, Z+8	; 0x08
    2072:	91 85       	ldd	r25, Z+9	; 0x09
    2074:	12 96       	adiw	r26, 0x02	; 2
    2076:	9c 93       	st	X, r25
    2078:	8e 93       	st	-X, r24
    207a:	11 97       	sbiw	r26, 0x01	; 1
    207c:	15 86       	std	Z+13, r1	; 0x0d
    207e:	14 86       	std	Z+12, r1	; 0x0c
    2080:	8c 91       	ld	r24, X
    2082:	81 50       	subi	r24, 0x01	; 1
    2084:	8c 93       	st	X, r24
    2086:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2088:	80 91 6d 14 	lds	r24, 0x146D	; 0x80146d <uxTopReadyPriority>
    208c:	8a 17       	cp	r24, r26
    208e:	10 f4       	brcc	.+4      	; 0x2094 <__DATA_REGION_LENGTH__+0x94>
    2090:	a0 93 6d 14 	sts	0x146D, r26	; 0x80146d <uxTopReadyPriority>
    2094:	8b e0       	ldi	r24, 0x0B	; 11
    2096:	8a 9f       	mul	r24, r26
    2098:	d0 01       	movw	r26, r0
    209a:	11 24       	eor	r1, r1
    209c:	a1 55       	subi	r26, 0x51	; 81
    209e:	bb 4e       	sbci	r27, 0xEB	; 235
    20a0:	11 96       	adiw	r26, 0x01	; 1
    20a2:	0d 90       	ld	r0, X+
    20a4:	bc 91       	ld	r27, X
    20a6:	a0 2d       	mov	r26, r0
    20a8:	b7 83       	std	Z+7, r27	; 0x07
    20aa:	a6 83       	std	Z+6, r26	; 0x06
    20ac:	16 96       	adiw	r26, 0x06	; 6
    20ae:	4d 91       	ld	r20, X+
    20b0:	5c 91       	ld	r21, X
    20b2:	17 97       	sbiw	r26, 0x07	; 7
    20b4:	51 87       	std	Z+9, r21	; 0x09
    20b6:	40 87       	std	Z+8, r20	; 0x08
    20b8:	16 96       	adiw	r26, 0x06	; 6
    20ba:	cd 91       	ld	r28, X+
    20bc:	dc 91       	ld	r29, X
    20be:	17 97       	sbiw	r26, 0x07	; 7
    20c0:	3d 83       	std	Y+5, r19	; 0x05
    20c2:	2c 83       	std	Y+4, r18	; 0x04
    20c4:	17 96       	adiw	r26, 0x07	; 7
    20c6:	3c 93       	st	X, r19
    20c8:	2e 93       	st	-X, r18
    20ca:	16 97       	sbiw	r26, 0x06	; 6
    20cc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    20ce:	8a 9f       	mul	r24, r26
    20d0:	d0 01       	movw	r26, r0
    20d2:	11 24       	eor	r1, r1
    20d4:	a1 55       	subi	r26, 0x51	; 81
    20d6:	bb 4e       	sbci	r27, 0xEB	; 235
    20d8:	b5 87       	std	Z+13, r27	; 0x0d
    20da:	a4 87       	std	Z+12, r26	; 0x0c
    20dc:	8c 91       	ld	r24, X
    20de:	8f 5f       	subi	r24, 0xFF	; 255
    20e0:	8c 93       	st	X, r24
    20e2:	1c c0       	rjmp	.+56     	; 0x211c <__DATA_REGION_LENGTH__+0x11c>
    20e4:	4a e8       	ldi	r20, 0x8A	; 138
    20e6:	54 e1       	ldi	r21, 0x14	; 20
    20e8:	da 01       	movw	r26, r20
    20ea:	11 96       	adiw	r26, 0x01	; 1
    20ec:	cd 91       	ld	r28, X+
    20ee:	dc 91       	ld	r29, X
    20f0:	12 97       	sbiw	r26, 0x02	; 2
    20f2:	d3 8b       	std	Z+19, r29	; 0x13
    20f4:	c2 8b       	std	Z+18, r28	; 0x12
    20f6:	8e 81       	ldd	r24, Y+6	; 0x06
    20f8:	9f 81       	ldd	r25, Y+7	; 0x07
    20fa:	95 8b       	std	Z+21, r25	; 0x15
    20fc:	84 8b       	std	Z+20, r24	; 0x14
    20fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2100:	9f 81       	ldd	r25, Y+7	; 0x07
    2102:	dc 01       	movw	r26, r24
    2104:	15 96       	adiw	r26, 0x05	; 5
    2106:	3c 93       	st	X, r19
    2108:	2e 93       	st	-X, r18
    210a:	14 97       	sbiw	r26, 0x04	; 4
    210c:	3f 83       	std	Y+7, r19	; 0x07
    210e:	2e 83       	std	Y+6, r18	; 0x06
    2110:	51 8f       	std	Z+25, r21	; 0x19
    2112:	40 8f       	std	Z+24, r20	; 0x18
    2114:	da 01       	movw	r26, r20
    2116:	8c 91       	ld	r24, X
    2118:	8f 5f       	subi	r24, 0xFF	; 255
    211a:	8c 93       	st	X, r24
    211c:	92 8d       	ldd	r25, Z+26	; 0x1a
    211e:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    2122:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    2126:	82 8d       	ldd	r24, Z+26	; 0x1a
    2128:	89 17       	cp	r24, r25
    212a:	20 f4       	brcc	.+8      	; 0x2134 <__DATA_REGION_LENGTH__+0x134>
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	80 93 67 14 	sts	0x1467, r24	; 0x801467 <xYieldPending>
    2132:	01 c0       	rjmp	.+2      	; 0x2136 <__DATA_REGION_LENGTH__+0x136>
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	df 91       	pop	r29
    2138:	cf 91       	pop	r28
    213a:	08 95       	ret

0000213c <vTaskSetTimeOutState>:
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	f8 94       	cli
    2140:	0f 92       	push	r0
    2142:	20 91 66 14 	lds	r18, 0x1466	; 0x801466 <xNumOfOverflows>
    2146:	fc 01       	movw	r30, r24
    2148:	20 83       	st	Z, r18
    214a:	40 91 6e 14 	lds	r20, 0x146E	; 0x80146e <xTickCount>
    214e:	50 91 6f 14 	lds	r21, 0x146F	; 0x80146f <xTickCount+0x1>
    2152:	60 91 70 14 	lds	r22, 0x1470	; 0x801470 <xTickCount+0x2>
    2156:	70 91 71 14 	lds	r23, 0x1471	; 0x801471 <xTickCount+0x3>
    215a:	41 83       	std	Z+1, r20	; 0x01
    215c:	52 83       	std	Z+2, r21	; 0x02
    215e:	63 83       	std	Z+3, r22	; 0x03
    2160:	74 83       	std	Z+4, r23	; 0x04
    2162:	0f 90       	pop	r0
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	08 95       	ret

00002168 <vTaskInternalSetTimeOutState>:
    2168:	20 91 66 14 	lds	r18, 0x1466	; 0x801466 <xNumOfOverflows>
    216c:	fc 01       	movw	r30, r24
    216e:	20 83       	st	Z, r18
    2170:	40 91 6e 14 	lds	r20, 0x146E	; 0x80146e <xTickCount>
    2174:	50 91 6f 14 	lds	r21, 0x146F	; 0x80146f <xTickCount+0x1>
    2178:	60 91 70 14 	lds	r22, 0x1470	; 0x801470 <xTickCount+0x2>
    217c:	70 91 71 14 	lds	r23, 0x1471	; 0x801471 <xTickCount+0x3>
    2180:	41 83       	std	Z+1, r20	; 0x01
    2182:	52 83       	std	Z+2, r21	; 0x02
    2184:	63 83       	std	Z+3, r22	; 0x03
    2186:	74 83       	std	Z+4, r23	; 0x04
    2188:	08 95       	ret

0000218a <xTaskCheckForTimeOut>:
    218a:	8f 92       	push	r8
    218c:	9f 92       	push	r9
    218e:	af 92       	push	r10
    2190:	bf 92       	push	r11
    2192:	cf 92       	push	r12
    2194:	df 92       	push	r13
    2196:	ef 92       	push	r14
    2198:	ff 92       	push	r15
    219a:	0f 93       	push	r16
    219c:	1f 93       	push	r17
    219e:	cf 93       	push	r28
    21a0:	df 93       	push	r29
    21a2:	fb 01       	movw	r30, r22
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	0f 92       	push	r0
    21aa:	c0 90 6e 14 	lds	r12, 0x146E	; 0x80146e <xTickCount>
    21ae:	d0 90 6f 14 	lds	r13, 0x146F	; 0x80146f <xTickCount+0x1>
    21b2:	e0 90 70 14 	lds	r14, 0x1470	; 0x801470 <xTickCount+0x2>
    21b6:	f0 90 71 14 	lds	r15, 0x1471	; 0x801471 <xTickCount+0x3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	11 96       	adiw	r26, 0x01	; 1
    21be:	0d 91       	ld	r16, X+
    21c0:	1d 91       	ld	r17, X+
    21c2:	2d 91       	ld	r18, X+
    21c4:	3c 91       	ld	r19, X
    21c6:	14 97       	sbiw	r26, 0x04	; 4
    21c8:	46 01       	movw	r8, r12
    21ca:	57 01       	movw	r10, r14
    21cc:	80 1a       	sub	r8, r16
    21ce:	91 0a       	sbc	r9, r17
    21d0:	a2 0a       	sbc	r10, r18
    21d2:	b3 0a       	sbc	r11, r19
    21d4:	40 81       	ld	r20, Z
    21d6:	51 81       	ldd	r21, Z+1	; 0x01
    21d8:	62 81       	ldd	r22, Z+2	; 0x02
    21da:	73 81       	ldd	r23, Z+3	; 0x03
    21dc:	4f 3f       	cpi	r20, 0xFF	; 255
    21de:	bf ef       	ldi	r27, 0xFF	; 255
    21e0:	5b 07       	cpc	r21, r27
    21e2:	6b 07       	cpc	r22, r27
    21e4:	7b 07       	cpc	r23, r27
    21e6:	39 f1       	breq	.+78     	; 0x2236 <__stack+0x37>
    21e8:	ec 01       	movw	r28, r24
    21ea:	b8 81       	ld	r27, Y
    21ec:	a0 91 66 14 	lds	r26, 0x1466	; 0x801466 <xNumOfOverflows>
    21f0:	ba 17       	cp	r27, r26
    21f2:	59 f0       	breq	.+22     	; 0x220a <__stack+0xb>
    21f4:	c0 16       	cp	r12, r16
    21f6:	d1 06       	cpc	r13, r17
    21f8:	e2 06       	cpc	r14, r18
    21fa:	f3 06       	cpc	r15, r19
    21fc:	30 f0       	brcs	.+12     	; 0x220a <__stack+0xb>
    21fe:	10 82       	st	Z, r1
    2200:	11 82       	std	Z+1, r1	; 0x01
    2202:	12 82       	std	Z+2, r1	; 0x02
    2204:	13 82       	std	Z+3, r1	; 0x03
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	17 c0       	rjmp	.+46     	; 0x2238 <__stack+0x39>
    220a:	84 16       	cp	r8, r20
    220c:	95 06       	cpc	r9, r21
    220e:	a6 06       	cpc	r10, r22
    2210:	b7 06       	cpc	r11, r23
    2212:	58 f4       	brcc	.+22     	; 0x222a <__stack+0x2b>
    2214:	48 19       	sub	r20, r8
    2216:	59 09       	sbc	r21, r9
    2218:	6a 09       	sbc	r22, r10
    221a:	7b 09       	sbc	r23, r11
    221c:	40 83       	st	Z, r20
    221e:	51 83       	std	Z+1, r21	; 0x01
    2220:	62 83       	std	Z+2, r22	; 0x02
    2222:	73 83       	std	Z+3, r23	; 0x03
    2224:	a1 df       	rcall	.-190    	; 0x2168 <vTaskInternalSetTimeOutState>
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	07 c0       	rjmp	.+14     	; 0x2238 <__stack+0x39>
    222a:	10 82       	st	Z, r1
    222c:	11 82       	std	Z+1, r1	; 0x01
    222e:	12 82       	std	Z+2, r1	; 0x02
    2230:	13 82       	std	Z+3, r1	; 0x03
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	01 c0       	rjmp	.+2      	; 0x2238 <__stack+0x39>
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	0f 90       	pop	r0
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	1f 91       	pop	r17
    2242:	0f 91       	pop	r16
    2244:	ff 90       	pop	r15
    2246:	ef 90       	pop	r14
    2248:	df 90       	pop	r13
    224a:	cf 90       	pop	r12
    224c:	bf 90       	pop	r11
    224e:	af 90       	pop	r10
    2250:	9f 90       	pop	r9
    2252:	8f 90       	pop	r8
    2254:	08 95       	ret

00002256 <vTaskMissedYield>:
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	80 93 67 14 	sts	0x1467, r24	; 0x801467 <xYieldPending>
    225c:	08 95       	ret

0000225e <xTaskGetCurrentTaskHandle>:
    225e:	80 91 1d 15 	lds	r24, 0x151D	; 0x80151d <pxCurrentTCB>
    2262:	90 91 1e 15 	lds	r25, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    2266:	08 95       	ret

00002268 <xTaskGetSchedulerState>:
    2268:	80 91 6c 14 	lds	r24, 0x146C	; 0x80146c <xSchedulerRunning>
    226c:	88 23       	and	r24, r24
    226e:	31 f0       	breq	.+12     	; 0x227c <xTaskGetSchedulerState+0x14>
    2270:	80 91 5e 14 	lds	r24, 0x145E	; 0x80145e <uxSchedulerSuspended>
    2274:	81 11       	cpse	r24, r1
    2276:	04 c0       	rjmp	.+8      	; 0x2280 <xTaskGetSchedulerState+0x18>
    2278:	82 e0       	ldi	r24, 0x02	; 2
    227a:	08 95       	ret
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	08 95       	ret
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	08 95       	ret

00002284 <xTaskPriorityDisinherit>:
    2284:	0f 93       	push	r16
    2286:	1f 93       	push	r17
    2288:	cf 93       	push	r28
    228a:	df 93       	push	r29
    228c:	fc 01       	movw	r30, r24
    228e:	89 2b       	or	r24, r25
    2290:	09 f4       	brne	.+2      	; 0x2294 <xTaskPriorityDisinherit+0x10>
    2292:	49 c0       	rjmp	.+146    	; 0x2326 <xTaskPriorityDisinherit+0xa2>
    2294:	86 a5       	ldd	r24, Z+46	; 0x2e
    2296:	81 50       	subi	r24, 0x01	; 1
    2298:	86 a7       	std	Z+46, r24	; 0x2e
    229a:	22 8d       	ldd	r18, Z+26	; 0x1a
    229c:	95 a5       	ldd	r25, Z+45	; 0x2d
    229e:	29 17       	cp	r18, r25
    22a0:	09 f4       	brne	.+2      	; 0x22a4 <xTaskPriorityDisinherit+0x20>
    22a2:	43 c0       	rjmp	.+134    	; 0x232a <xTaskPriorityDisinherit+0xa6>
    22a4:	81 11       	cpse	r24, r1
    22a6:	43 c0       	rjmp	.+134    	; 0x232e <xTaskPriorityDisinherit+0xaa>
    22a8:	ef 01       	movw	r28, r30
    22aa:	8f 01       	movw	r16, r30
    22ac:	0e 5f       	subi	r16, 0xFE	; 254
    22ae:	1f 4f       	sbci	r17, 0xFF	; 255
    22b0:	c8 01       	movw	r24, r16
    22b2:	0e 94 b4 02 	call	0x568	; 0x568 <uxListRemove>
    22b6:	ed a5       	ldd	r30, Y+45	; 0x2d
    22b8:	ea 8f       	std	Y+26, r30	; 0x1a
    22ba:	8a e0       	ldi	r24, 0x0A	; 10
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	a0 e0       	ldi	r26, 0x00	; 0
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	8e 1b       	sub	r24, r30
    22c4:	91 09       	sbc	r25, r1
    22c6:	a1 09       	sbc	r26, r1
    22c8:	b1 09       	sbc	r27, r1
    22ca:	8e 87       	std	Y+14, r24	; 0x0e
    22cc:	9f 87       	std	Y+15, r25	; 0x0f
    22ce:	a8 8b       	std	Y+16, r26	; 0x10
    22d0:	b9 8b       	std	Y+17, r27	; 0x11
    22d2:	80 91 6d 14 	lds	r24, 0x146D	; 0x80146d <uxTopReadyPriority>
    22d6:	8e 17       	cp	r24, r30
    22d8:	10 f4       	brcc	.+4      	; 0x22de <xTaskPriorityDisinherit+0x5a>
    22da:	e0 93 6d 14 	sts	0x146D, r30	; 0x80146d <uxTopReadyPriority>
    22de:	8b e0       	ldi	r24, 0x0B	; 11
    22e0:	8e 9f       	mul	r24, r30
    22e2:	f0 01       	movw	r30, r0
    22e4:	11 24       	eor	r1, r1
    22e6:	e1 55       	subi	r30, 0x51	; 81
    22e8:	fb 4e       	sbci	r31, 0xEB	; 235
    22ea:	01 80       	ldd	r0, Z+1	; 0x01
    22ec:	f2 81       	ldd	r31, Z+2	; 0x02
    22ee:	e0 2d       	mov	r30, r0
    22f0:	ff 83       	std	Y+7, r31	; 0x07
    22f2:	ee 83       	std	Y+6, r30	; 0x06
    22f4:	26 81       	ldd	r18, Z+6	; 0x06
    22f6:	37 81       	ldd	r19, Z+7	; 0x07
    22f8:	39 87       	std	Y+9, r19	; 0x09
    22fa:	28 87       	std	Y+8, r18	; 0x08
    22fc:	a6 81       	ldd	r26, Z+6	; 0x06
    22fe:	b7 81       	ldd	r27, Z+7	; 0x07
    2300:	15 96       	adiw	r26, 0x05	; 5
    2302:	1c 93       	st	X, r17
    2304:	0e 93       	st	-X, r16
    2306:	14 97       	sbiw	r26, 0x04	; 4
    2308:	17 83       	std	Z+7, r17	; 0x07
    230a:	06 83       	std	Z+6, r16	; 0x06
    230c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    230e:	8e 9f       	mul	r24, r30
    2310:	f0 01       	movw	r30, r0
    2312:	11 24       	eor	r1, r1
    2314:	e1 55       	subi	r30, 0x51	; 81
    2316:	fb 4e       	sbci	r31, 0xEB	; 235
    2318:	fd 87       	std	Y+13, r31	; 0x0d
    231a:	ec 87       	std	Y+12, r30	; 0x0c
    231c:	80 81       	ld	r24, Z
    231e:	8f 5f       	subi	r24, 0xFF	; 255
    2320:	80 83       	st	Z, r24
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	05 c0       	rjmp	.+10     	; 0x2330 <xTaskPriorityDisinherit+0xac>
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	03 c0       	rjmp	.+6      	; 0x2330 <xTaskPriorityDisinherit+0xac>
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	01 c0       	rjmp	.+2      	; 0x2330 <xTaskPriorityDisinherit+0xac>
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	df 91       	pop	r29
    2332:	cf 91       	pop	r28
    2334:	1f 91       	pop	r17
    2336:	0f 91       	pop	r16
    2338:	08 95       	ret

0000233a <xTaskGenericNotifyWait>:
    233a:	4f 92       	push	r4
    233c:	5f 92       	push	r5
    233e:	6f 92       	push	r6
    2340:	7f 92       	push	r7
    2342:	af 92       	push	r10
    2344:	bf 92       	push	r11
    2346:	cf 92       	push	r12
    2348:	df 92       	push	r13
    234a:	ef 92       	push	r14
    234c:	ff 92       	push	r15
    234e:	0f 93       	push	r16
    2350:	1f 93       	push	r17
    2352:	cf 93       	push	r28
    2354:	df 93       	push	r29
    2356:	28 01       	movw	r4, r16
    2358:	39 01       	movw	r6, r18
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	0f 92       	push	r0
    2360:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    2364:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    2368:	c8 2f       	mov	r28, r24
    236a:	d0 e0       	ldi	r29, 0x00	; 0
    236c:	ec 0f       	add	r30, r28
    236e:	fd 1f       	adc	r31, r29
    2370:	83 a9       	ldd	r24, Z+51	; 0x33
    2372:	82 30       	cpi	r24, 0x02	; 2
    2374:	71 f1       	breq	.+92     	; 0x23d2 <xTaskGenericNotifyWait+0x98>
    2376:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    237a:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    237e:	ce 01       	movw	r24, r28
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	88 0f       	add	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	e8 0f       	add	r30, r24
    238a:	f9 1f       	adc	r31, r25
    238c:	87 a5       	ldd	r24, Z+47	; 0x2f
    238e:	90 a9       	ldd	r25, Z+48	; 0x30
    2390:	a1 a9       	ldd	r26, Z+49	; 0x31
    2392:	b2 a9       	ldd	r27, Z+50	; 0x32
    2394:	40 95       	com	r20
    2396:	50 95       	com	r21
    2398:	60 95       	com	r22
    239a:	70 95       	com	r23
    239c:	48 23       	and	r20, r24
    239e:	59 23       	and	r21, r25
    23a0:	6a 23       	and	r22, r26
    23a2:	7b 23       	and	r23, r27
    23a4:	47 a7       	std	Z+47, r20	; 0x2f
    23a6:	50 ab       	std	Z+48, r21	; 0x30
    23a8:	61 ab       	std	Z+49, r22	; 0x31
    23aa:	72 ab       	std	Z+50, r23	; 0x32
    23ac:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    23b0:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    23b4:	ec 0f       	add	r30, r28
    23b6:	fd 1f       	adc	r31, r29
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	83 ab       	std	Z+51, r24	; 0x33
    23bc:	a1 14       	cp	r10, r1
    23be:	b1 04       	cpc	r11, r1
    23c0:	c1 04       	cpc	r12, r1
    23c2:	d1 04       	cpc	r13, r1
    23c4:	31 f0       	breq	.+12     	; 0x23d2 <xTaskGenericNotifyWait+0x98>
    23c6:	41 e0       	ldi	r20, 0x01	; 1
    23c8:	c6 01       	movw	r24, r12
    23ca:	b5 01       	movw	r22, r10
    23cc:	88 d9       	rcall	.-3312   	; 0x16de <prvAddCurrentTaskToDelayedList>
    23ce:	0e 94 30 03 	call	0x660	; 0x660 <vPortYield>
    23d2:	0f 90       	pop	r0
    23d4:	0f be       	out	0x3f, r0	; 63
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	f8 94       	cli
    23da:	0f 92       	push	r0
    23dc:	e1 14       	cp	r14, r1
    23de:	f1 04       	cpc	r15, r1
    23e0:	a1 f0       	breq	.+40     	; 0x240a <xTaskGenericNotifyWait+0xd0>
    23e2:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    23e6:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    23ea:	ce 01       	movw	r24, r28
    23ec:	88 0f       	add	r24, r24
    23ee:	99 1f       	adc	r25, r25
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	e8 0f       	add	r30, r24
    23f6:	f9 1f       	adc	r31, r25
    23f8:	87 a5       	ldd	r24, Z+47	; 0x2f
    23fa:	90 a9       	ldd	r25, Z+48	; 0x30
    23fc:	a1 a9       	ldd	r26, Z+49	; 0x31
    23fe:	b2 a9       	ldd	r27, Z+50	; 0x32
    2400:	f7 01       	movw	r30, r14
    2402:	80 83       	st	Z, r24
    2404:	91 83       	std	Z+1, r25	; 0x01
    2406:	a2 83       	std	Z+2, r26	; 0x02
    2408:	b3 83       	std	Z+3, r27	; 0x03
    240a:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    240e:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    2412:	ec 0f       	add	r30, r28
    2414:	fd 1f       	adc	r31, r29
    2416:	83 a9       	ldd	r24, Z+51	; 0x33
    2418:	82 30       	cpi	r24, 0x02	; 2
    241a:	e9 f4       	brne	.+58     	; 0x2456 <xTaskGenericNotifyWait+0x11c>
    241c:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    2420:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    2424:	ce 01       	movw	r24, r28
    2426:	88 0f       	add	r24, r24
    2428:	99 1f       	adc	r25, r25
    242a:	88 0f       	add	r24, r24
    242c:	99 1f       	adc	r25, r25
    242e:	e8 0f       	add	r30, r24
    2430:	f9 1f       	adc	r31, r25
    2432:	87 a5       	ldd	r24, Z+47	; 0x2f
    2434:	90 a9       	ldd	r25, Z+48	; 0x30
    2436:	a1 a9       	ldd	r26, Z+49	; 0x31
    2438:	b2 a9       	ldd	r27, Z+50	; 0x32
    243a:	40 94       	com	r4
    243c:	50 94       	com	r5
    243e:	60 94       	com	r6
    2440:	70 94       	com	r7
    2442:	48 22       	and	r4, r24
    2444:	59 22       	and	r5, r25
    2446:	6a 22       	and	r6, r26
    2448:	7b 22       	and	r7, r27
    244a:	47 a6       	std	Z+47, r4	; 0x2f
    244c:	50 aa       	std	Z+48, r5	; 0x30
    244e:	61 aa       	std	Z+49, r6	; 0x31
    2450:	72 aa       	std	Z+50, r7	; 0x32
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	01 c0       	rjmp	.+2      	; 0x2458 <xTaskGenericNotifyWait+0x11e>
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	20 91 1d 15 	lds	r18, 0x151D	; 0x80151d <pxCurrentTCB>
    245c:	30 91 1e 15 	lds	r19, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    2460:	c2 0f       	add	r28, r18
    2462:	d3 1f       	adc	r29, r19
    2464:	1b aa       	std	Y+51, r1	; 0x33
    2466:	0f 90       	pop	r0
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	df 91       	pop	r29
    246c:	cf 91       	pop	r28
    246e:	1f 91       	pop	r17
    2470:	0f 91       	pop	r16
    2472:	ff 90       	pop	r15
    2474:	ef 90       	pop	r14
    2476:	df 90       	pop	r13
    2478:	cf 90       	pop	r12
    247a:	bf 90       	pop	r11
    247c:	af 90       	pop	r10
    247e:	7f 90       	pop	r7
    2480:	6f 90       	pop	r6
    2482:	5f 90       	pop	r5
    2484:	4f 90       	pop	r4
    2486:	08 95       	ret

00002488 <xTaskGenericNotify>:
    2488:	8f 92       	push	r8
    248a:	9f 92       	push	r9
    248c:	af 92       	push	r10
    248e:	bf 92       	push	r11
    2490:	ef 92       	push	r14
    2492:	ff 92       	push	r15
    2494:	0f 93       	push	r16
    2496:	cf 93       	push	r28
    2498:	df 93       	push	r29
    249a:	dc 01       	movw	r26, r24
    249c:	0f b6       	in	r0, 0x3f	; 63
    249e:	f8 94       	cli
    24a0:	0f 92       	push	r0
    24a2:	e1 14       	cp	r14, r1
    24a4:	f1 04       	cpc	r15, r1
    24a6:	89 f0       	breq	.+34     	; 0x24ca <xTaskGenericNotify+0x42>
    24a8:	e6 2f       	mov	r30, r22
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	ee 0f       	add	r30, r30
    24ae:	ff 1f       	adc	r31, r31
    24b0:	ee 0f       	add	r30, r30
    24b2:	ff 1f       	adc	r31, r31
    24b4:	e8 0f       	add	r30, r24
    24b6:	f9 1f       	adc	r31, r25
    24b8:	87 a4       	ldd	r8, Z+47	; 0x2f
    24ba:	90 a8       	ldd	r9, Z+48	; 0x30
    24bc:	a1 a8       	ldd	r10, Z+49	; 0x31
    24be:	b2 a8       	ldd	r11, Z+50	; 0x32
    24c0:	f7 01       	movw	r30, r14
    24c2:	80 82       	st	Z, r8
    24c4:	91 82       	std	Z+1, r9	; 0x01
    24c6:	a2 82       	std	Z+2, r10	; 0x02
    24c8:	b3 82       	std	Z+3, r11	; 0x03
    24ca:	70 e0       	ldi	r23, 0x00	; 0
    24cc:	fd 01       	movw	r30, r26
    24ce:	e6 0f       	add	r30, r22
    24d0:	f7 1f       	adc	r31, r23
    24d2:	83 a9       	ldd	r24, Z+51	; 0x33
    24d4:	92 e0       	ldi	r25, 0x02	; 2
    24d6:	93 ab       	std	Z+51, r25	; 0x33
    24d8:	02 30       	cpi	r16, 0x02	; 2
    24da:	01 f1       	breq	.+64     	; 0x251c <xTaskGenericNotify+0x94>
    24dc:	18 f4       	brcc	.+6      	; 0x24e4 <xTaskGenericNotify+0x5c>
    24de:	01 30       	cpi	r16, 0x01	; 1
    24e0:	31 f0       	breq	.+12     	; 0x24ee <xTaskGenericNotify+0x66>
    24e2:	4d c0       	rjmp	.+154    	; 0x257e <xTaskGenericNotify+0xf6>
    24e4:	03 30       	cpi	r16, 0x03	; 3
    24e6:	79 f1       	breq	.+94     	; 0x2546 <xTaskGenericNotify+0xbe>
    24e8:	04 30       	cpi	r16, 0x04	; 4
    24ea:	d1 f1       	breq	.+116    	; 0x2560 <xTaskGenericNotify+0xd8>
    24ec:	48 c0       	rjmp	.+144    	; 0x257e <xTaskGenericNotify+0xf6>
    24ee:	66 0f       	add	r22, r22
    24f0:	77 1f       	adc	r23, r23
    24f2:	66 0f       	add	r22, r22
    24f4:	77 1f       	adc	r23, r23
    24f6:	fd 01       	movw	r30, r26
    24f8:	e6 0f       	add	r30, r22
    24fa:	f7 1f       	adc	r31, r23
    24fc:	87 a4       	ldd	r8, Z+47	; 0x2f
    24fe:	90 a8       	ldd	r9, Z+48	; 0x30
    2500:	a1 a8       	ldd	r10, Z+49	; 0x31
    2502:	b2 a8       	ldd	r11, Z+50	; 0x32
    2504:	ba 01       	movw	r22, r20
    2506:	a9 01       	movw	r20, r18
    2508:	48 29       	or	r20, r8
    250a:	59 29       	or	r21, r9
    250c:	6a 29       	or	r22, r10
    250e:	7b 29       	or	r23, r11
    2510:	47 a7       	std	Z+47, r20	; 0x2f
    2512:	50 ab       	std	Z+48, r21	; 0x30
    2514:	61 ab       	std	Z+49, r22	; 0x31
    2516:	72 ab       	std	Z+50, r23	; 0x32
    2518:	01 e0       	ldi	r16, 0x01	; 1
    251a:	34 c0       	rjmp	.+104    	; 0x2584 <xTaskGenericNotify+0xfc>
    251c:	66 0f       	add	r22, r22
    251e:	77 1f       	adc	r23, r23
    2520:	66 0f       	add	r22, r22
    2522:	77 1f       	adc	r23, r23
    2524:	fd 01       	movw	r30, r26
    2526:	e6 0f       	add	r30, r22
    2528:	f7 1f       	adc	r31, r23
    252a:	47 a5       	ldd	r20, Z+47	; 0x2f
    252c:	50 a9       	ldd	r21, Z+48	; 0x30
    252e:	61 a9       	ldd	r22, Z+49	; 0x31
    2530:	72 a9       	ldd	r23, Z+50	; 0x32
    2532:	4f 5f       	subi	r20, 0xFF	; 255
    2534:	5f 4f       	sbci	r21, 0xFF	; 255
    2536:	6f 4f       	sbci	r22, 0xFF	; 255
    2538:	7f 4f       	sbci	r23, 0xFF	; 255
    253a:	47 a7       	std	Z+47, r20	; 0x2f
    253c:	50 ab       	std	Z+48, r21	; 0x30
    253e:	61 ab       	std	Z+49, r22	; 0x31
    2540:	72 ab       	std	Z+50, r23	; 0x32
    2542:	01 e0       	ldi	r16, 0x01	; 1
    2544:	1f c0       	rjmp	.+62     	; 0x2584 <xTaskGenericNotify+0xfc>
    2546:	66 0f       	add	r22, r22
    2548:	77 1f       	adc	r23, r23
    254a:	66 0f       	add	r22, r22
    254c:	77 1f       	adc	r23, r23
    254e:	fd 01       	movw	r30, r26
    2550:	e6 0f       	add	r30, r22
    2552:	f7 1f       	adc	r31, r23
    2554:	27 a7       	std	Z+47, r18	; 0x2f
    2556:	30 ab       	std	Z+48, r19	; 0x30
    2558:	41 ab       	std	Z+49, r20	; 0x31
    255a:	52 ab       	std	Z+50, r21	; 0x32
    255c:	01 e0       	ldi	r16, 0x01	; 1
    255e:	12 c0       	rjmp	.+36     	; 0x2584 <xTaskGenericNotify+0xfc>
    2560:	82 30       	cpi	r24, 0x02	; 2
    2562:	79 f0       	breq	.+30     	; 0x2582 <xTaskGenericNotify+0xfa>
    2564:	66 0f       	add	r22, r22
    2566:	77 1f       	adc	r23, r23
    2568:	66 0f       	add	r22, r22
    256a:	77 1f       	adc	r23, r23
    256c:	fd 01       	movw	r30, r26
    256e:	e6 0f       	add	r30, r22
    2570:	f7 1f       	adc	r31, r23
    2572:	27 a7       	std	Z+47, r18	; 0x2f
    2574:	30 ab       	std	Z+48, r19	; 0x30
    2576:	41 ab       	std	Z+49, r20	; 0x31
    2578:	52 ab       	std	Z+50, r21	; 0x32
    257a:	01 e0       	ldi	r16, 0x01	; 1
    257c:	03 c0       	rjmp	.+6      	; 0x2584 <xTaskGenericNotify+0xfc>
    257e:	01 e0       	ldi	r16, 0x01	; 1
    2580:	01 c0       	rjmp	.+2      	; 0x2584 <xTaskGenericNotify+0xfc>
    2582:	00 e0       	ldi	r16, 0x00	; 0
    2584:	81 30       	cpi	r24, 0x01	; 1
    2586:	09 f0       	breq	.+2      	; 0x258a <xTaskGenericNotify+0x102>
    2588:	69 c0       	rjmp	.+210    	; 0x265c <xTaskGenericNotify+0x1d4>
    258a:	1c 96       	adiw	r26, 0x0c	; 12
    258c:	ed 91       	ld	r30, X+
    258e:	fc 91       	ld	r31, X
    2590:	1d 97       	sbiw	r26, 0x0d	; 13
    2592:	16 96       	adiw	r26, 0x06	; 6
    2594:	cd 91       	ld	r28, X+
    2596:	dc 91       	ld	r29, X
    2598:	17 97       	sbiw	r26, 0x07	; 7
    259a:	18 96       	adiw	r26, 0x08	; 8
    259c:	8d 91       	ld	r24, X+
    259e:	9c 91       	ld	r25, X
    25a0:	19 97       	sbiw	r26, 0x09	; 9
    25a2:	9f 83       	std	Y+7, r25	; 0x07
    25a4:	8e 83       	std	Y+6, r24	; 0x06
    25a6:	18 96       	adiw	r26, 0x08	; 8
    25a8:	cd 91       	ld	r28, X+
    25aa:	dc 91       	ld	r29, X
    25ac:	19 97       	sbiw	r26, 0x09	; 9
    25ae:	16 96       	adiw	r26, 0x06	; 6
    25b0:	8d 91       	ld	r24, X+
    25b2:	9c 91       	ld	r25, X
    25b4:	17 97       	sbiw	r26, 0x07	; 7
    25b6:	9d 83       	std	Y+5, r25	; 0x05
    25b8:	8c 83       	std	Y+4, r24	; 0x04
    25ba:	81 81       	ldd	r24, Z+1	; 0x01
    25bc:	92 81       	ldd	r25, Z+2	; 0x02
    25be:	9d 01       	movw	r18, r26
    25c0:	2e 5f       	subi	r18, 0xFE	; 254
    25c2:	3f 4f       	sbci	r19, 0xFF	; 255
    25c4:	82 17       	cp	r24, r18
    25c6:	93 07       	cpc	r25, r19
    25c8:	31 f4       	brne	.+12     	; 0x25d6 <xTaskGenericNotify+0x14e>
    25ca:	18 96       	adiw	r26, 0x08	; 8
    25cc:	8d 91       	ld	r24, X+
    25ce:	9c 91       	ld	r25, X
    25d0:	19 97       	sbiw	r26, 0x09	; 9
    25d2:	92 83       	std	Z+2, r25	; 0x02
    25d4:	81 83       	std	Z+1, r24	; 0x01
    25d6:	1d 96       	adiw	r26, 0x0d	; 13
    25d8:	1c 92       	st	X, r1
    25da:	1e 92       	st	-X, r1
    25dc:	1c 97       	sbiw	r26, 0x0c	; 12
    25de:	80 81       	ld	r24, Z
    25e0:	81 50       	subi	r24, 0x01	; 1
    25e2:	80 83       	st	Z, r24
    25e4:	5a 96       	adiw	r26, 0x1a	; 26
    25e6:	ec 91       	ld	r30, X
    25e8:	5a 97       	sbiw	r26, 0x1a	; 26
    25ea:	80 91 6d 14 	lds	r24, 0x146D	; 0x80146d <uxTopReadyPriority>
    25ee:	8e 17       	cp	r24, r30
    25f0:	10 f4       	brcc	.+4      	; 0x25f6 <xTaskGenericNotify+0x16e>
    25f2:	e0 93 6d 14 	sts	0x146D, r30	; 0x80146d <uxTopReadyPriority>
    25f6:	8b e0       	ldi	r24, 0x0B	; 11
    25f8:	8e 9f       	mul	r24, r30
    25fa:	f0 01       	movw	r30, r0
    25fc:	11 24       	eor	r1, r1
    25fe:	e1 55       	subi	r30, 0x51	; 81
    2600:	fb 4e       	sbci	r31, 0xEB	; 235
    2602:	01 80       	ldd	r0, Z+1	; 0x01
    2604:	f2 81       	ldd	r31, Z+2	; 0x02
    2606:	e0 2d       	mov	r30, r0
    2608:	17 96       	adiw	r26, 0x07	; 7
    260a:	fc 93       	st	X, r31
    260c:	ee 93       	st	-X, r30
    260e:	16 97       	sbiw	r26, 0x06	; 6
    2610:	46 81       	ldd	r20, Z+6	; 0x06
    2612:	57 81       	ldd	r21, Z+7	; 0x07
    2614:	19 96       	adiw	r26, 0x09	; 9
    2616:	5c 93       	st	X, r21
    2618:	4e 93       	st	-X, r20
    261a:	18 97       	sbiw	r26, 0x08	; 8
    261c:	c6 81       	ldd	r28, Z+6	; 0x06
    261e:	d7 81       	ldd	r29, Z+7	; 0x07
    2620:	3d 83       	std	Y+5, r19	; 0x05
    2622:	2c 83       	std	Y+4, r18	; 0x04
    2624:	37 83       	std	Z+7, r19	; 0x07
    2626:	26 83       	std	Z+6, r18	; 0x06
    2628:	5a 96       	adiw	r26, 0x1a	; 26
    262a:	ec 91       	ld	r30, X
    262c:	5a 97       	sbiw	r26, 0x1a	; 26
    262e:	8e 9f       	mul	r24, r30
    2630:	f0 01       	movw	r30, r0
    2632:	11 24       	eor	r1, r1
    2634:	e1 55       	subi	r30, 0x51	; 81
    2636:	fb 4e       	sbci	r31, 0xEB	; 235
    2638:	1d 96       	adiw	r26, 0x0d	; 13
    263a:	fc 93       	st	X, r31
    263c:	ee 93       	st	-X, r30
    263e:	1c 97       	sbiw	r26, 0x0c	; 12
    2640:	80 81       	ld	r24, Z
    2642:	8f 5f       	subi	r24, 0xFF	; 255
    2644:	80 83       	st	Z, r24
    2646:	5a 96       	adiw	r26, 0x1a	; 26
    2648:	9c 91       	ld	r25, X
    264a:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    264e:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    2652:	82 8d       	ldd	r24, Z+26	; 0x1a
    2654:	89 17       	cp	r24, r25
    2656:	10 f4       	brcc	.+4      	; 0x265c <xTaskGenericNotify+0x1d4>
    2658:	0e 94 30 03 	call	0x660	; 0x660 <vPortYield>
    265c:	0f 90       	pop	r0
    265e:	0f be       	out	0x3f, r0	; 63
    2660:	80 2f       	mov	r24, r16
    2662:	df 91       	pop	r29
    2664:	cf 91       	pop	r28
    2666:	0f 91       	pop	r16
    2668:	ff 90       	pop	r15
    266a:	ef 90       	pop	r14
    266c:	bf 90       	pop	r11
    266e:	af 90       	pop	r10
    2670:	9f 90       	pop	r9
    2672:	8f 90       	pop	r8
    2674:	08 95       	ret

00002676 <xTaskGenericNotifyFromISR>:
    2676:	8f 92       	push	r8
    2678:	9f 92       	push	r9
    267a:	af 92       	push	r10
    267c:	bf 92       	push	r11
    267e:	cf 92       	push	r12
    2680:	df 92       	push	r13
    2682:	ef 92       	push	r14
    2684:	ff 92       	push	r15
    2686:	0f 93       	push	r16
    2688:	cf 93       	push	r28
    268a:	df 93       	push	r29
    268c:	dc 01       	movw	r26, r24
    268e:	e1 14       	cp	r14, r1
    2690:	f1 04       	cpc	r15, r1
    2692:	89 f0       	breq	.+34     	; 0x26b6 <xTaskGenericNotifyFromISR+0x40>
    2694:	e6 2f       	mov	r30, r22
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	ee 0f       	add	r30, r30
    269a:	ff 1f       	adc	r31, r31
    269c:	ee 0f       	add	r30, r30
    269e:	ff 1f       	adc	r31, r31
    26a0:	e8 0f       	add	r30, r24
    26a2:	f9 1f       	adc	r31, r25
    26a4:	87 a4       	ldd	r8, Z+47	; 0x2f
    26a6:	90 a8       	ldd	r9, Z+48	; 0x30
    26a8:	a1 a8       	ldd	r10, Z+49	; 0x31
    26aa:	b2 a8       	ldd	r11, Z+50	; 0x32
    26ac:	f7 01       	movw	r30, r14
    26ae:	80 82       	st	Z, r8
    26b0:	91 82       	std	Z+1, r9	; 0x01
    26b2:	a2 82       	std	Z+2, r10	; 0x02
    26b4:	b3 82       	std	Z+3, r11	; 0x03
    26b6:	70 e0       	ldi	r23, 0x00	; 0
    26b8:	fd 01       	movw	r30, r26
    26ba:	e6 0f       	add	r30, r22
    26bc:	f7 1f       	adc	r31, r23
    26be:	93 a9       	ldd	r25, Z+51	; 0x33
    26c0:	82 e0       	ldi	r24, 0x02	; 2
    26c2:	83 ab       	std	Z+51, r24	; 0x33
    26c4:	02 30       	cpi	r16, 0x02	; 2
    26c6:	01 f1       	breq	.+64     	; 0x2708 <xTaskGenericNotifyFromISR+0x92>
    26c8:	18 f4       	brcc	.+6      	; 0x26d0 <xTaskGenericNotifyFromISR+0x5a>
    26ca:	01 30       	cpi	r16, 0x01	; 1
    26cc:	31 f0       	breq	.+12     	; 0x26da <xTaskGenericNotifyFromISR+0x64>
    26ce:	4d c0       	rjmp	.+154    	; 0x276a <xTaskGenericNotifyFromISR+0xf4>
    26d0:	03 30       	cpi	r16, 0x03	; 3
    26d2:	79 f1       	breq	.+94     	; 0x2732 <xTaskGenericNotifyFromISR+0xbc>
    26d4:	04 30       	cpi	r16, 0x04	; 4
    26d6:	d1 f1       	breq	.+116    	; 0x274c <xTaskGenericNotifyFromISR+0xd6>
    26d8:	48 c0       	rjmp	.+144    	; 0x276a <xTaskGenericNotifyFromISR+0xf4>
    26da:	66 0f       	add	r22, r22
    26dc:	77 1f       	adc	r23, r23
    26de:	66 0f       	add	r22, r22
    26e0:	77 1f       	adc	r23, r23
    26e2:	fd 01       	movw	r30, r26
    26e4:	e6 0f       	add	r30, r22
    26e6:	f7 1f       	adc	r31, r23
    26e8:	87 a4       	ldd	r8, Z+47	; 0x2f
    26ea:	90 a8       	ldd	r9, Z+48	; 0x30
    26ec:	a1 a8       	ldd	r10, Z+49	; 0x31
    26ee:	b2 a8       	ldd	r11, Z+50	; 0x32
    26f0:	ba 01       	movw	r22, r20
    26f2:	a9 01       	movw	r20, r18
    26f4:	48 29       	or	r20, r8
    26f6:	59 29       	or	r21, r9
    26f8:	6a 29       	or	r22, r10
    26fa:	7b 29       	or	r23, r11
    26fc:	47 a7       	std	Z+47, r20	; 0x2f
    26fe:	50 ab       	std	Z+48, r21	; 0x30
    2700:	61 ab       	std	Z+49, r22	; 0x31
    2702:	72 ab       	std	Z+50, r23	; 0x32
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	34 c0       	rjmp	.+104    	; 0x2770 <xTaskGenericNotifyFromISR+0xfa>
    2708:	66 0f       	add	r22, r22
    270a:	77 1f       	adc	r23, r23
    270c:	66 0f       	add	r22, r22
    270e:	77 1f       	adc	r23, r23
    2710:	fd 01       	movw	r30, r26
    2712:	e6 0f       	add	r30, r22
    2714:	f7 1f       	adc	r31, r23
    2716:	47 a5       	ldd	r20, Z+47	; 0x2f
    2718:	50 a9       	ldd	r21, Z+48	; 0x30
    271a:	61 a9       	ldd	r22, Z+49	; 0x31
    271c:	72 a9       	ldd	r23, Z+50	; 0x32
    271e:	4f 5f       	subi	r20, 0xFF	; 255
    2720:	5f 4f       	sbci	r21, 0xFF	; 255
    2722:	6f 4f       	sbci	r22, 0xFF	; 255
    2724:	7f 4f       	sbci	r23, 0xFF	; 255
    2726:	47 a7       	std	Z+47, r20	; 0x2f
    2728:	50 ab       	std	Z+48, r21	; 0x30
    272a:	61 ab       	std	Z+49, r22	; 0x31
    272c:	72 ab       	std	Z+50, r23	; 0x32
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	1f c0       	rjmp	.+62     	; 0x2770 <xTaskGenericNotifyFromISR+0xfa>
    2732:	66 0f       	add	r22, r22
    2734:	77 1f       	adc	r23, r23
    2736:	66 0f       	add	r22, r22
    2738:	77 1f       	adc	r23, r23
    273a:	fd 01       	movw	r30, r26
    273c:	e6 0f       	add	r30, r22
    273e:	f7 1f       	adc	r31, r23
    2740:	27 a7       	std	Z+47, r18	; 0x2f
    2742:	30 ab       	std	Z+48, r19	; 0x30
    2744:	41 ab       	std	Z+49, r20	; 0x31
    2746:	52 ab       	std	Z+50, r21	; 0x32
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	12 c0       	rjmp	.+36     	; 0x2770 <xTaskGenericNotifyFromISR+0xfa>
    274c:	92 30       	cpi	r25, 0x02	; 2
    274e:	79 f0       	breq	.+30     	; 0x276e <xTaskGenericNotifyFromISR+0xf8>
    2750:	66 0f       	add	r22, r22
    2752:	77 1f       	adc	r23, r23
    2754:	66 0f       	add	r22, r22
    2756:	77 1f       	adc	r23, r23
    2758:	fd 01       	movw	r30, r26
    275a:	e6 0f       	add	r30, r22
    275c:	f7 1f       	adc	r31, r23
    275e:	27 a7       	std	Z+47, r18	; 0x2f
    2760:	30 ab       	std	Z+48, r19	; 0x30
    2762:	41 ab       	std	Z+49, r20	; 0x31
    2764:	52 ab       	std	Z+50, r21	; 0x32
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	03 c0       	rjmp	.+6      	; 0x2770 <xTaskGenericNotifyFromISR+0xfa>
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	01 c0       	rjmp	.+2      	; 0x2770 <xTaskGenericNotifyFromISR+0xfa>
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	91 30       	cpi	r25, 0x01	; 1
    2772:	09 f0       	breq	.+2      	; 0x2776 <xTaskGenericNotifyFromISR+0x100>
    2774:	96 c0       	rjmp	.+300    	; 0x28a2 <xTaskGenericNotifyFromISR+0x22c>
    2776:	90 91 5e 14 	lds	r25, 0x145E	; 0x80145e <uxSchedulerSuspended>
    277a:	91 11       	cpse	r25, r1
    277c:	5f c0       	rjmp	.+190    	; 0x283c <xTaskGenericNotifyFromISR+0x1c6>
    277e:	1c 96       	adiw	r26, 0x0c	; 12
    2780:	ed 91       	ld	r30, X+
    2782:	fc 91       	ld	r31, X
    2784:	1d 97       	sbiw	r26, 0x0d	; 13
    2786:	16 96       	adiw	r26, 0x06	; 6
    2788:	cd 91       	ld	r28, X+
    278a:	dc 91       	ld	r29, X
    278c:	17 97       	sbiw	r26, 0x07	; 7
    278e:	18 96       	adiw	r26, 0x08	; 8
    2790:	2d 91       	ld	r18, X+
    2792:	3c 91       	ld	r19, X
    2794:	19 97       	sbiw	r26, 0x09	; 9
    2796:	3f 83       	std	Y+7, r19	; 0x07
    2798:	2e 83       	std	Y+6, r18	; 0x06
    279a:	18 96       	adiw	r26, 0x08	; 8
    279c:	cd 91       	ld	r28, X+
    279e:	dc 91       	ld	r29, X
    27a0:	19 97       	sbiw	r26, 0x09	; 9
    27a2:	16 96       	adiw	r26, 0x06	; 6
    27a4:	2d 91       	ld	r18, X+
    27a6:	3c 91       	ld	r19, X
    27a8:	17 97       	sbiw	r26, 0x07	; 7
    27aa:	3d 83       	std	Y+5, r19	; 0x05
    27ac:	2c 83       	std	Y+4, r18	; 0x04
    27ae:	41 81       	ldd	r20, Z+1	; 0x01
    27b0:	52 81       	ldd	r21, Z+2	; 0x02
    27b2:	9d 01       	movw	r18, r26
    27b4:	2e 5f       	subi	r18, 0xFE	; 254
    27b6:	3f 4f       	sbci	r19, 0xFF	; 255
    27b8:	42 17       	cp	r20, r18
    27ba:	53 07       	cpc	r21, r19
    27bc:	31 f4       	brne	.+12     	; 0x27ca <xTaskGenericNotifyFromISR+0x154>
    27be:	18 96       	adiw	r26, 0x08	; 8
    27c0:	4d 91       	ld	r20, X+
    27c2:	5c 91       	ld	r21, X
    27c4:	19 97       	sbiw	r26, 0x09	; 9
    27c6:	52 83       	std	Z+2, r21	; 0x02
    27c8:	41 83       	std	Z+1, r20	; 0x01
    27ca:	1d 96       	adiw	r26, 0x0d	; 13
    27cc:	1c 92       	st	X, r1
    27ce:	1e 92       	st	-X, r1
    27d0:	1c 97       	sbiw	r26, 0x0c	; 12
    27d2:	90 81       	ld	r25, Z
    27d4:	91 50       	subi	r25, 0x01	; 1
    27d6:	90 83       	st	Z, r25
    27d8:	5a 96       	adiw	r26, 0x1a	; 26
    27da:	ec 91       	ld	r30, X
    27dc:	5a 97       	sbiw	r26, 0x1a	; 26
    27de:	90 91 6d 14 	lds	r25, 0x146D	; 0x80146d <uxTopReadyPriority>
    27e2:	9e 17       	cp	r25, r30
    27e4:	10 f4       	brcc	.+4      	; 0x27ea <xTaskGenericNotifyFromISR+0x174>
    27e6:	e0 93 6d 14 	sts	0x146D, r30	; 0x80146d <uxTopReadyPriority>
    27ea:	9b e0       	ldi	r25, 0x0B	; 11
    27ec:	9e 9f       	mul	r25, r30
    27ee:	f0 01       	movw	r30, r0
    27f0:	11 24       	eor	r1, r1
    27f2:	e1 55       	subi	r30, 0x51	; 81
    27f4:	fb 4e       	sbci	r31, 0xEB	; 235
    27f6:	01 80       	ldd	r0, Z+1	; 0x01
    27f8:	f2 81       	ldd	r31, Z+2	; 0x02
    27fa:	e0 2d       	mov	r30, r0
    27fc:	17 96       	adiw	r26, 0x07	; 7
    27fe:	fc 93       	st	X, r31
    2800:	ee 93       	st	-X, r30
    2802:	16 97       	sbiw	r26, 0x06	; 6
    2804:	46 81       	ldd	r20, Z+6	; 0x06
    2806:	57 81       	ldd	r21, Z+7	; 0x07
    2808:	19 96       	adiw	r26, 0x09	; 9
    280a:	5c 93       	st	X, r21
    280c:	4e 93       	st	-X, r20
    280e:	18 97       	sbiw	r26, 0x08	; 8
    2810:	c6 81       	ldd	r28, Z+6	; 0x06
    2812:	d7 81       	ldd	r29, Z+7	; 0x07
    2814:	3d 83       	std	Y+5, r19	; 0x05
    2816:	2c 83       	std	Y+4, r18	; 0x04
    2818:	37 83       	std	Z+7, r19	; 0x07
    281a:	26 83       	std	Z+6, r18	; 0x06
    281c:	5a 96       	adiw	r26, 0x1a	; 26
    281e:	ec 91       	ld	r30, X
    2820:	5a 97       	sbiw	r26, 0x1a	; 26
    2822:	9e 9f       	mul	r25, r30
    2824:	f0 01       	movw	r30, r0
    2826:	11 24       	eor	r1, r1
    2828:	e1 55       	subi	r30, 0x51	; 81
    282a:	fb 4e       	sbci	r31, 0xEB	; 235
    282c:	1d 96       	adiw	r26, 0x0d	; 13
    282e:	fc 93       	st	X, r31
    2830:	ee 93       	st	-X, r30
    2832:	1c 97       	sbiw	r26, 0x0c	; 12
    2834:	90 81       	ld	r25, Z
    2836:	9f 5f       	subi	r25, 0xFF	; 255
    2838:	90 83       	st	Z, r25
    283a:	21 c0       	rjmp	.+66     	; 0x287e <xTaskGenericNotifyFromISR+0x208>
    283c:	6a e8       	ldi	r22, 0x8A	; 138
    283e:	74 e1       	ldi	r23, 0x14	; 20
    2840:	fb 01       	movw	r30, r22
    2842:	c1 81       	ldd	r28, Z+1	; 0x01
    2844:	d2 81       	ldd	r29, Z+2	; 0x02
    2846:	53 96       	adiw	r26, 0x13	; 19
    2848:	dc 93       	st	X, r29
    284a:	ce 93       	st	-X, r28
    284c:	52 97       	sbiw	r26, 0x12	; 18
    284e:	2e 81       	ldd	r18, Y+6	; 0x06
    2850:	3f 81       	ldd	r19, Y+7	; 0x07
    2852:	55 96       	adiw	r26, 0x15	; 21
    2854:	3c 93       	st	X, r19
    2856:	2e 93       	st	-X, r18
    2858:	54 97       	sbiw	r26, 0x14	; 20
    285a:	4e 81       	ldd	r20, Y+6	; 0x06
    285c:	5f 81       	ldd	r21, Y+7	; 0x07
    285e:	9d 01       	movw	r18, r26
    2860:	22 5f       	subi	r18, 0xF2	; 242
    2862:	3f 4f       	sbci	r19, 0xFF	; 255
    2864:	fa 01       	movw	r30, r20
    2866:	35 83       	std	Z+5, r19	; 0x05
    2868:	24 83       	std	Z+4, r18	; 0x04
    286a:	3f 83       	std	Y+7, r19	; 0x07
    286c:	2e 83       	std	Y+6, r18	; 0x06
    286e:	59 96       	adiw	r26, 0x19	; 25
    2870:	7c 93       	st	X, r23
    2872:	6e 93       	st	-X, r22
    2874:	58 97       	sbiw	r26, 0x18	; 24
    2876:	fb 01       	movw	r30, r22
    2878:	90 81       	ld	r25, Z
    287a:	9f 5f       	subi	r25, 0xFF	; 255
    287c:	90 83       	st	Z, r25
    287e:	5a 96       	adiw	r26, 0x1a	; 26
    2880:	2c 91       	ld	r18, X
    2882:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    2886:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    288a:	92 8d       	ldd	r25, Z+26	; 0x1a
    288c:	92 17       	cp	r25, r18
    288e:	48 f4       	brcc	.+18     	; 0x28a2 <xTaskGenericNotifyFromISR+0x22c>
    2890:	c1 14       	cp	r12, r1
    2892:	d1 04       	cpc	r13, r1
    2894:	19 f0       	breq	.+6      	; 0x289c <xTaskGenericNotifyFromISR+0x226>
    2896:	91 e0       	ldi	r25, 0x01	; 1
    2898:	f6 01       	movw	r30, r12
    289a:	90 83       	st	Z, r25
    289c:	91 e0       	ldi	r25, 0x01	; 1
    289e:	90 93 67 14 	sts	0x1467, r25	; 0x801467 <xYieldPending>
    28a2:	df 91       	pop	r29
    28a4:	cf 91       	pop	r28
    28a6:	0f 91       	pop	r16
    28a8:	ff 90       	pop	r15
    28aa:	ef 90       	pop	r14
    28ac:	df 90       	pop	r13
    28ae:	cf 90       	pop	r12
    28b0:	bf 90       	pop	r11
    28b2:	af 90       	pop	r10
    28b4:	9f 90       	pop	r9
    28b6:	8f 90       	pop	r8
    28b8:	08 95       	ret

000028ba <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    28ba:	00 97       	sbiw	r24, 0x00	; 0
    28bc:	21 f4       	brne	.+8      	; 0x28c6 <xTaskGenericNotifyStateClear+0xc>
    28be:	80 91 1d 15 	lds	r24, 0x151D	; 0x80151d <pxCurrentTCB>
    28c2:	90 91 1e 15 	lds	r25, 0x151E	; 0x80151e <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    28c6:	0f b6       	in	r0, 0x3f	; 63
    28c8:	f8 94       	cli
    28ca:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    28cc:	70 e0       	ldi	r23, 0x00	; 0
    28ce:	fc 01       	movw	r30, r24
    28d0:	e6 0f       	add	r30, r22
    28d2:	f7 1f       	adc	r31, r23
    28d4:	23 a9       	ldd	r18, Z+51	; 0x33
    28d6:	22 30       	cpi	r18, 0x02	; 2
    28d8:	31 f4       	brne	.+12     	; 0x28e6 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    28da:	fc 01       	movw	r30, r24
    28dc:	e6 0f       	add	r30, r22
    28de:	f7 1f       	adc	r31, r23
    28e0:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	01 c0       	rjmp	.+2      	; 0x28e8 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    28e6:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    28e8:	0f 90       	pop	r0
    28ea:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    28ec:	08 95       	ret

000028ee <prvGetNextExpireTime>:
    28ee:	dc 01       	movw	r26, r24
    28f0:	e0 91 29 15 	lds	r30, 0x1529	; 0x801529 <pxCurrentTimerList>
    28f4:	f0 91 2a 15 	lds	r31, 0x152A	; 0x80152a <pxCurrentTimerList+0x1>
    28f8:	80 81       	ld	r24, Z
    28fa:	91 e0       	ldi	r25, 0x01	; 1
    28fc:	81 11       	cpse	r24, r1
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	9c 93       	st	X, r25
    2902:	91 11       	cpse	r25, r1
    2904:	08 c0       	rjmp	.+16     	; 0x2916 <prvGetNextExpireTime+0x28>
    2906:	07 80       	ldd	r0, Z+7	; 0x07
    2908:	f0 85       	ldd	r31, Z+8	; 0x08
    290a:	e0 2d       	mov	r30, r0
    290c:	60 81       	ld	r22, Z
    290e:	71 81       	ldd	r23, Z+1	; 0x01
    2910:	82 81       	ldd	r24, Z+2	; 0x02
    2912:	93 81       	ldd	r25, Z+3	; 0x03
    2914:	08 95       	ret
    2916:	60 e0       	ldi	r22, 0x00	; 0
    2918:	70 e0       	ldi	r23, 0x00	; 0
    291a:	cb 01       	movw	r24, r22
    291c:	08 95       	ret

0000291e <prvInsertTimerInActiveList>:
    291e:	cf 92       	push	r12
    2920:	df 92       	push	r13
    2922:	ef 92       	push	r14
    2924:	ff 92       	push	r15
    2926:	0f 93       	push	r16
    2928:	1f 93       	push	r17
    292a:	fc 01       	movw	r30, r24
    292c:	42 83       	std	Z+2, r20	; 0x02
    292e:	53 83       	std	Z+3, r21	; 0x03
    2930:	64 83       	std	Z+4, r22	; 0x04
    2932:	75 83       	std	Z+5, r23	; 0x05
    2934:	93 87       	std	Z+11, r25	; 0x0b
    2936:	82 87       	std	Z+10, r24	; 0x0a
    2938:	04 17       	cp	r16, r20
    293a:	15 07       	cpc	r17, r21
    293c:	26 07       	cpc	r18, r22
    293e:	37 07       	cpc	r19, r23
    2940:	c0 f0       	brcs	.+48     	; 0x2972 <prvInsertTimerInActiveList+0x54>
    2942:	0c 19       	sub	r16, r12
    2944:	1d 09       	sbc	r17, r13
    2946:	2e 09       	sbc	r18, r14
    2948:	3f 09       	sbc	r19, r15
    294a:	86 85       	ldd	r24, Z+14	; 0x0e
    294c:	97 85       	ldd	r25, Z+15	; 0x0f
    294e:	a0 89       	ldd	r26, Z+16	; 0x10
    2950:	b1 89       	ldd	r27, Z+17	; 0x11
    2952:	08 17       	cp	r16, r24
    2954:	19 07       	cpc	r17, r25
    2956:	2a 07       	cpc	r18, r26
    2958:	3b 07       	cpc	r19, r27
    295a:	00 f5       	brcc	.+64     	; 0x299c <prvInsertTimerInActiveList+0x7e>
    295c:	bf 01       	movw	r22, r30
    295e:	6e 5f       	subi	r22, 0xFE	; 254
    2960:	7f 4f       	sbci	r23, 0xFF	; 255
    2962:	80 91 27 15 	lds	r24, 0x1527	; 0x801527 <pxOverflowTimerList>
    2966:	90 91 28 15 	lds	r25, 0x1528	; 0x801528 <pxOverflowTimerList+0x1>
    296a:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInsert>
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	18 c0       	rjmp	.+48     	; 0x29a2 <prvInsertTimerInActiveList+0x84>
    2972:	0c 15       	cp	r16, r12
    2974:	1d 05       	cpc	r17, r13
    2976:	2e 05       	cpc	r18, r14
    2978:	3f 05       	cpc	r19, r15
    297a:	28 f4       	brcc	.+10     	; 0x2986 <prvInsertTimerInActiveList+0x68>
    297c:	4c 15       	cp	r20, r12
    297e:	5d 05       	cpc	r21, r13
    2980:	6e 05       	cpc	r22, r14
    2982:	7f 05       	cpc	r23, r15
    2984:	68 f4       	brcc	.+26     	; 0x29a0 <prvInsertTimerInActiveList+0x82>
    2986:	bf 01       	movw	r22, r30
    2988:	6e 5f       	subi	r22, 0xFE	; 254
    298a:	7f 4f       	sbci	r23, 0xFF	; 255
    298c:	80 91 29 15 	lds	r24, 0x1529	; 0x801529 <pxCurrentTimerList>
    2990:	90 91 2a 15 	lds	r25, 0x152A	; 0x80152a <pxCurrentTimerList+0x1>
    2994:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInsert>
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	03 c0       	rjmp	.+6      	; 0x29a2 <prvInsertTimerInActiveList+0x84>
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	01 c0       	rjmp	.+2      	; 0x29a2 <prvInsertTimerInActiveList+0x84>
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	1f 91       	pop	r17
    29a4:	0f 91       	pop	r16
    29a6:	ff 90       	pop	r15
    29a8:	ef 90       	pop	r14
    29aa:	df 90       	pop	r13
    29ac:	cf 90       	pop	r12
    29ae:	08 95       	ret

000029b0 <prvCheckForValidListAndQueue>:
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	f8 94       	cli
    29b4:	0f 92       	push	r0
    29b6:	80 91 25 15 	lds	r24, 0x1525	; 0x801525 <xTimerQueue>
    29ba:	90 91 26 15 	lds	r25, 0x1526	; 0x801526 <xTimerQueue+0x1>
    29be:	89 2b       	or	r24, r25
    29c0:	e9 f4       	brne	.+58     	; 0x29fc <prvCheckForValidListAndQueue+0x4c>
    29c2:	86 e3       	ldi	r24, 0x36	; 54
    29c4:	95 e1       	ldi	r25, 0x15	; 21
    29c6:	0e 94 62 02 	call	0x4c4	; 0x4c4 <vListInitialise>
    29ca:	8b e2       	ldi	r24, 0x2B	; 43
    29cc:	95 e1       	ldi	r25, 0x15	; 21
    29ce:	0e 94 62 02 	call	0x4c4	; 0x4c4 <vListInitialise>
    29d2:	86 e3       	ldi	r24, 0x36	; 54
    29d4:	95 e1       	ldi	r25, 0x15	; 21
    29d6:	90 93 2a 15 	sts	0x152A, r25	; 0x80152a <pxCurrentTimerList+0x1>
    29da:	80 93 29 15 	sts	0x1529, r24	; 0x801529 <pxCurrentTimerList>
    29de:	8b e2       	ldi	r24, 0x2B	; 43
    29e0:	95 e1       	ldi	r25, 0x15	; 21
    29e2:	90 93 28 15 	sts	0x1528, r25	; 0x801528 <pxOverflowTimerList+0x1>
    29e6:	80 93 27 15 	sts	0x1527, r24	; 0x801527 <pxOverflowTimerList>
    29ea:	40 e0       	ldi	r20, 0x00	; 0
    29ec:	67 e0       	ldi	r22, 0x07	; 7
    29ee:	8a e0       	ldi	r24, 0x0A	; 10
    29f0:	0e 94 15 05 	call	0xa2a	; 0xa2a <xQueueGenericCreate>
    29f4:	90 93 26 15 	sts	0x1526, r25	; 0x801526 <xTimerQueue+0x1>
    29f8:	80 93 25 15 	sts	0x1525, r24	; 0x801525 <xTimerQueue>
    29fc:	0f 90       	pop	r0
    29fe:	0f be       	out	0x3f, r0	; 63
    2a00:	08 95       	ret

00002a02 <xTimerCreateTimerTask>:
    2a02:	ef 92       	push	r14
    2a04:	ff 92       	push	r15
    2a06:	0f 93       	push	r16
    2a08:	d3 df       	rcall	.-90     	; 0x29b0 <prvCheckForValidListAndQueue>
    2a0a:	80 91 25 15 	lds	r24, 0x1525	; 0x801525 <xTimerQueue>
    2a0e:	90 91 26 15 	lds	r25, 0x1526	; 0x801526 <xTimerQueue+0x1>
    2a12:	89 2b       	or	r24, r25
    2a14:	91 f0       	breq	.+36     	; 0x2a3a <xTimerCreateTimerTask+0x38>
    2a16:	0f 2e       	mov	r0, r31
    2a18:	f3 e2       	ldi	r31, 0x23	; 35
    2a1a:	ef 2e       	mov	r14, r31
    2a1c:	f5 e1       	ldi	r31, 0x15	; 21
    2a1e:	ff 2e       	mov	r15, r31
    2a20:	f0 2d       	mov	r31, r0
    2a22:	03 e0       	ldi	r16, 0x03	; 3
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	40 ec       	ldi	r20, 0xC0	; 192
    2a2a:	50 e0       	ldi	r21, 0x00	; 0
    2a2c:	63 e4       	ldi	r22, 0x43	; 67
    2a2e:	72 e0       	ldi	r23, 0x02	; 2
    2a30:	87 ed       	ldi	r24, 0xD7	; 215
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	0e 94 11 0c 	call	0x1822	; 0x1822 <xTaskCreate>
    2a38:	01 c0       	rjmp	.+2      	; 0x2a3c <xTimerCreateTimerTask+0x3a>
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	0f 91       	pop	r16
    2a3e:	ff 90       	pop	r15
    2a40:	ef 90       	pop	r14
    2a42:	08 95       	ret

00002a44 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2a44:	8f 92       	push	r8
    2a46:	9f 92       	push	r9
    2a48:	af 92       	push	r10
    2a4a:	bf 92       	push	r11
    2a4c:	cf 92       	push	r12
    2a4e:	df 92       	push	r13
    2a50:	ef 92       	push	r14
    2a52:	ff 92       	push	r15
    2a54:	0f 93       	push	r16
    2a56:	1f 93       	push	r17
    2a58:	cf 93       	push	r28
    2a5a:	df 93       	push	r29
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
    2a60:	27 97       	sbiw	r28, 0x07	; 7
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	f8 94       	cli
    2a66:	de bf       	out	0x3e, r29	; 62
    2a68:	0f be       	out	0x3f, r0	; 63
    2a6a:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2a6c:	e0 91 25 15 	lds	r30, 0x1525	; 0x801525 <xTimerQueue>
    2a70:	f0 91 26 15 	lds	r31, 0x1526	; 0x801526 <xTimerQueue+0x1>
    2a74:	30 97       	sbiw	r30, 0x00	; 0
    2a76:	81 f1       	breq	.+96     	; 0x2ad8 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2a78:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2a7a:	2a 83       	std	Y+2, r18	; 0x02
    2a7c:	3b 83       	std	Y+3, r19	; 0x03
    2a7e:	4c 83       	std	Y+4, r20	; 0x04
    2a80:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2a82:	9f 83       	std	Y+7, r25	; 0x07
    2a84:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2a86:	66 30       	cpi	r22, 0x06	; 6
    2a88:	f4 f4       	brge	.+60     	; 0x2ac6 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2a8a:	ee db       	rcall	.-2084   	; 0x2268 <xTaskGetSchedulerState>
    2a8c:	82 30       	cpi	r24, 0x02	; 2
    2a8e:	69 f4       	brne	.+26     	; 0x2aaa <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2a90:	00 e0       	ldi	r16, 0x00	; 0
    2a92:	a7 01       	movw	r20, r14
    2a94:	96 01       	movw	r18, r12
    2a96:	be 01       	movw	r22, r28
    2a98:	6f 5f       	subi	r22, 0xFF	; 255
    2a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a9c:	80 91 25 15 	lds	r24, 0x1525	; 0x801525 <xTimerQueue>
    2aa0:	90 91 26 15 	lds	r25, 0x1526	; 0x801526 <xTimerQueue+0x1>
    2aa4:	0e 94 38 05 	call	0xa70	; 0xa70 <xQueueGenericSend>
    2aa8:	18 c0       	rjmp	.+48     	; 0x2ada <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2aaa:	00 e0       	ldi	r16, 0x00	; 0
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	a9 01       	movw	r20, r18
    2ab2:	be 01       	movw	r22, r28
    2ab4:	6f 5f       	subi	r22, 0xFF	; 255
    2ab6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab8:	80 91 25 15 	lds	r24, 0x1525	; 0x801525 <xTimerQueue>
    2abc:	90 91 26 15 	lds	r25, 0x1526	; 0x801526 <xTimerQueue+0x1>
    2ac0:	0e 94 38 05 	call	0xa70	; 0xa70 <xQueueGenericSend>
    2ac4:	0a c0       	rjmp	.+20     	; 0x2ada <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	a8 01       	movw	r20, r16
    2aca:	be 01       	movw	r22, r28
    2acc:	6f 5f       	subi	r22, 0xFF	; 255
    2ace:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad0:	cf 01       	movw	r24, r30
    2ad2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <xQueueGenericSendFromISR>
    2ad6:	01 c0       	rjmp	.+2      	; 0x2ada <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2ada:	27 96       	adiw	r28, 0x07	; 7
    2adc:	0f b6       	in	r0, 0x3f	; 63
    2ade:	f8 94       	cli
    2ae0:	de bf       	out	0x3e, r29	; 62
    2ae2:	0f be       	out	0x3f, r0	; 63
    2ae4:	cd bf       	out	0x3d, r28	; 61
    2ae6:	df 91       	pop	r29
    2ae8:	cf 91       	pop	r28
    2aea:	1f 91       	pop	r17
    2aec:	0f 91       	pop	r16
    2aee:	ff 90       	pop	r15
    2af0:	ef 90       	pop	r14
    2af2:	df 90       	pop	r13
    2af4:	cf 90       	pop	r12
    2af6:	bf 90       	pop	r11
    2af8:	af 90       	pop	r10
    2afa:	9f 90       	pop	r9
    2afc:	8f 90       	pop	r8
    2afe:	08 95       	ret

00002b00 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2b00:	8f 92       	push	r8
    2b02:	9f 92       	push	r9
    2b04:	af 92       	push	r10
    2b06:	bf 92       	push	r11
    2b08:	cf 92       	push	r12
    2b0a:	df 92       	push	r13
    2b0c:	ef 92       	push	r14
    2b0e:	ff 92       	push	r15
    2b10:	0f 93       	push	r16
    2b12:	1f 93       	push	r17
    2b14:	cf 93       	push	r28
    2b16:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2b18:	3b c0       	rjmp	.+118    	; 0x2b90 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2b1a:	07 80       	ldd	r0, Z+7	; 0x07
    2b1c:	f0 85       	ldd	r31, Z+8	; 0x08
    2b1e:	e0 2d       	mov	r30, r0
    2b20:	80 80       	ld	r8, Z
    2b22:	91 80       	ldd	r9, Z+1	; 0x01
    2b24:	a2 80       	ldd	r10, Z+2	; 0x02
    2b26:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2b28:	c0 85       	ldd	r28, Z+8	; 0x08
    2b2a:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2b2c:	8e 01       	movw	r16, r28
    2b2e:	0e 5f       	subi	r16, 0xFE	; 254
    2b30:	1f 4f       	sbci	r17, 0xFF	; 255
    2b32:	c8 01       	movw	r24, r16
    2b34:	0e 94 b4 02 	call	0x568	; 0x568 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2b38:	ec 89       	ldd	r30, Y+20	; 0x14
    2b3a:	fd 89       	ldd	r31, Y+21	; 0x15
    2b3c:	ce 01       	movw	r24, r28
    2b3e:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2b40:	8e 89       	ldd	r24, Y+22	; 0x16
    2b42:	82 ff       	sbrs	r24, 2
    2b44:	25 c0       	rjmp	.+74     	; 0x2b90 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2b46:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b48:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b4a:	a8 89       	ldd	r26, Y+16	; 0x10
    2b4c:	b9 89       	ldd	r27, Y+17	; 0x11
    2b4e:	88 0d       	add	r24, r8
    2b50:	99 1d       	adc	r25, r9
    2b52:	aa 1d       	adc	r26, r10
    2b54:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2b56:	88 16       	cp	r8, r24
    2b58:	99 06       	cpc	r9, r25
    2b5a:	aa 06       	cpc	r10, r26
    2b5c:	bb 06       	cpc	r11, r27
    2b5e:	70 f4       	brcc	.+28     	; 0x2b7c <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2b60:	8a 83       	std	Y+2, r24	; 0x02
    2b62:	9b 83       	std	Y+3, r25	; 0x03
    2b64:	ac 83       	std	Y+4, r26	; 0x04
    2b66:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2b68:	db 87       	std	Y+11, r29	; 0x0b
    2b6a:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2b6c:	b8 01       	movw	r22, r16
    2b6e:	80 91 29 15 	lds	r24, 0x1529	; 0x801529 <pxCurrentTimerList>
    2b72:	90 91 2a 15 	lds	r25, 0x152A	; 0x80152a <pxCurrentTimerList+0x1>
    2b76:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInsert>
    2b7a:	0a c0       	rjmp	.+20     	; 0x2b90 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2b7c:	c1 2c       	mov	r12, r1
    2b7e:	d1 2c       	mov	r13, r1
    2b80:	76 01       	movw	r14, r12
    2b82:	00 e0       	ldi	r16, 0x00	; 0
    2b84:	10 e0       	ldi	r17, 0x00	; 0
    2b86:	a5 01       	movw	r20, r10
    2b88:	94 01       	movw	r18, r8
    2b8a:	60 e0       	ldi	r22, 0x00	; 0
    2b8c:	ce 01       	movw	r24, r28
    2b8e:	5a df       	rcall	.-332    	; 0x2a44 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2b90:	e0 91 29 15 	lds	r30, 0x1529	; 0x801529 <pxCurrentTimerList>
    2b94:	f0 91 2a 15 	lds	r31, 0x152A	; 0x80152a <pxCurrentTimerList+0x1>
    2b98:	80 81       	ld	r24, Z
    2b9a:	81 11       	cpse	r24, r1
    2b9c:	be cf       	rjmp	.-132    	; 0x2b1a <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2b9e:	80 91 27 15 	lds	r24, 0x1527	; 0x801527 <pxOverflowTimerList>
    2ba2:	90 91 28 15 	lds	r25, 0x1528	; 0x801528 <pxOverflowTimerList+0x1>
    2ba6:	90 93 2a 15 	sts	0x152A, r25	; 0x80152a <pxCurrentTimerList+0x1>
    2baa:	80 93 29 15 	sts	0x1529, r24	; 0x801529 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2bae:	f0 93 28 15 	sts	0x1528, r31	; 0x801528 <pxOverflowTimerList+0x1>
    2bb2:	e0 93 27 15 	sts	0x1527, r30	; 0x801527 <pxOverflowTimerList>
    }
    2bb6:	df 91       	pop	r29
    2bb8:	cf 91       	pop	r28
    2bba:	1f 91       	pop	r17
    2bbc:	0f 91       	pop	r16
    2bbe:	ff 90       	pop	r15
    2bc0:	ef 90       	pop	r14
    2bc2:	df 90       	pop	r13
    2bc4:	cf 90       	pop	r12
    2bc6:	bf 90       	pop	r11
    2bc8:	af 90       	pop	r10
    2bca:	9f 90       	pop	r9
    2bcc:	8f 90       	pop	r8
    2bce:	08 95       	ret

00002bd0 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2bd0:	cf 92       	push	r12
    2bd2:	df 92       	push	r13
    2bd4:	ef 92       	push	r14
    2bd6:	ff 92       	push	r15
    2bd8:	cf 93       	push	r28
    2bda:	df 93       	push	r29
    2bdc:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2bde:	0e 94 9b 0c 	call	0x1936	; 0x1936 <xTaskGetTickCount>
    2be2:	6b 01       	movw	r12, r22
    2be4:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2be6:	80 91 1f 15 	lds	r24, 0x151F	; 0x80151f <xLastTime.2436>
    2bea:	90 91 20 15 	lds	r25, 0x1520	; 0x801520 <xLastTime.2436+0x1>
    2bee:	a0 91 21 15 	lds	r26, 0x1521	; 0x801521 <xLastTime.2436+0x2>
    2bf2:	b0 91 22 15 	lds	r27, 0x1522	; 0x801522 <xLastTime.2436+0x3>
    2bf6:	c8 16       	cp	r12, r24
    2bf8:	d9 06       	cpc	r13, r25
    2bfa:	ea 06       	cpc	r14, r26
    2bfc:	fb 06       	cpc	r15, r27
    2bfe:	20 f4       	brcc	.+8      	; 0x2c08 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2c00:	7f df       	rcall	.-258    	; 0x2b00 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	88 83       	st	Y, r24
    2c06:	01 c0       	rjmp	.+2      	; 0x2c0a <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2c08:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2c0a:	c0 92 1f 15 	sts	0x151F, r12	; 0x80151f <xLastTime.2436>
    2c0e:	d0 92 20 15 	sts	0x1520, r13	; 0x801520 <xLastTime.2436+0x1>
    2c12:	e0 92 21 15 	sts	0x1521, r14	; 0x801521 <xLastTime.2436+0x2>
    2c16:	f0 92 22 15 	sts	0x1522, r15	; 0x801522 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2c1a:	c7 01       	movw	r24, r14
    2c1c:	b6 01       	movw	r22, r12
    2c1e:	df 91       	pop	r29
    2c20:	cf 91       	pop	r28
    2c22:	ff 90       	pop	r15
    2c24:	ef 90       	pop	r14
    2c26:	df 90       	pop	r13
    2c28:	cf 90       	pop	r12
    2c2a:	08 95       	ret

00002c2c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2c2c:	4f 92       	push	r4
    2c2e:	5f 92       	push	r5
    2c30:	6f 92       	push	r6
    2c32:	7f 92       	push	r7
    2c34:	8f 92       	push	r8
    2c36:	9f 92       	push	r9
    2c38:	af 92       	push	r10
    2c3a:	bf 92       	push	r11
    2c3c:	cf 92       	push	r12
    2c3e:	df 92       	push	r13
    2c40:	ef 92       	push	r14
    2c42:	ff 92       	push	r15
    2c44:	0f 93       	push	r16
    2c46:	1f 93       	push	r17
    2c48:	cf 93       	push	r28
    2c4a:	df 93       	push	r29
    2c4c:	4b 01       	movw	r8, r22
    2c4e:	5c 01       	movw	r10, r24
    2c50:	29 01       	movw	r4, r18
    2c52:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2c54:	e0 91 29 15 	lds	r30, 0x1529	; 0x801529 <pxCurrentTimerList>
    2c58:	f0 91 2a 15 	lds	r31, 0x152A	; 0x80152a <pxCurrentTimerList+0x1>
    2c5c:	07 80       	ldd	r0, Z+7	; 0x07
    2c5e:	f0 85       	ldd	r31, Z+8	; 0x08
    2c60:	e0 2d       	mov	r30, r0
    2c62:	c0 85       	ldd	r28, Z+8	; 0x08
    2c64:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2c66:	ce 01       	movw	r24, r28
    2c68:	02 96       	adiw	r24, 0x02	; 2
    2c6a:	0e 94 b4 02 	call	0x568	; 0x568 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2c6e:	8e 89       	ldd	r24, Y+22	; 0x16
    2c70:	82 ff       	sbrs	r24, 2
    2c72:	1b c0       	rjmp	.+54     	; 0x2caa <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2c74:	4e 85       	ldd	r20, Y+14	; 0x0e
    2c76:	5f 85       	ldd	r21, Y+15	; 0x0f
    2c78:	68 89       	ldd	r22, Y+16	; 0x10
    2c7a:	79 89       	ldd	r23, Y+17	; 0x11
    2c7c:	48 0d       	add	r20, r8
    2c7e:	59 1d       	adc	r21, r9
    2c80:	6a 1d       	adc	r22, r10
    2c82:	7b 1d       	adc	r23, r11
    2c84:	75 01       	movw	r14, r10
    2c86:	64 01       	movw	r12, r8
    2c88:	93 01       	movw	r18, r6
    2c8a:	82 01       	movw	r16, r4
    2c8c:	ce 01       	movw	r24, r28
    2c8e:	47 de       	rcall	.-882    	; 0x291e <prvInsertTimerInActiveList>
    2c90:	88 23       	and	r24, r24
    2c92:	69 f0       	breq	.+26     	; 0x2cae <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2c94:	c1 2c       	mov	r12, r1
    2c96:	d1 2c       	mov	r13, r1
    2c98:	76 01       	movw	r14, r12
    2c9a:	00 e0       	ldi	r16, 0x00	; 0
    2c9c:	10 e0       	ldi	r17, 0x00	; 0
    2c9e:	a5 01       	movw	r20, r10
    2ca0:	94 01       	movw	r18, r8
    2ca2:	60 e0       	ldi	r22, 0x00	; 0
    2ca4:	ce 01       	movw	r24, r28
    2ca6:	ce de       	rcall	.-612    	; 0x2a44 <xTimerGenericCommand>
    2ca8:	02 c0       	rjmp	.+4      	; 0x2cae <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2caa:	8e 7f       	andi	r24, 0xFE	; 254
    2cac:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2cae:	ec 89       	ldd	r30, Y+20	; 0x14
    2cb0:	fd 89       	ldd	r31, Y+21	; 0x15
    2cb2:	ce 01       	movw	r24, r28
    2cb4:	19 95       	eicall
    }
    2cb6:	df 91       	pop	r29
    2cb8:	cf 91       	pop	r28
    2cba:	1f 91       	pop	r17
    2cbc:	0f 91       	pop	r16
    2cbe:	ff 90       	pop	r15
    2cc0:	ef 90       	pop	r14
    2cc2:	df 90       	pop	r13
    2cc4:	cf 90       	pop	r12
    2cc6:	bf 90       	pop	r11
    2cc8:	af 90       	pop	r10
    2cca:	9f 90       	pop	r9
    2ccc:	8f 90       	pop	r8
    2cce:	7f 90       	pop	r7
    2cd0:	6f 90       	pop	r6
    2cd2:	5f 90       	pop	r5
    2cd4:	4f 90       	pop	r4
    2cd6:	08 95       	ret

00002cd8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2cd8:	8f 92       	push	r8
    2cda:	9f 92       	push	r9
    2cdc:	af 92       	push	r10
    2cde:	bf 92       	push	r11
    2ce0:	cf 92       	push	r12
    2ce2:	df 92       	push	r13
    2ce4:	ef 92       	push	r14
    2ce6:	ff 92       	push	r15
    2ce8:	1f 93       	push	r17
    2cea:	cf 93       	push	r28
    2cec:	df 93       	push	r29
    2cee:	1f 92       	push	r1
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	6b 01       	movw	r12, r22
    2cf6:	7c 01       	movw	r14, r24
    2cf8:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2cfa:	0e 94 95 0c 	call	0x192a	; 0x192a <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2cfe:	ce 01       	movw	r24, r28
    2d00:	01 96       	adiw	r24, 0x01	; 1
    2d02:	66 df       	rcall	.-308    	; 0x2bd0 <prvSampleTimeNow>
    2d04:	4b 01       	movw	r8, r22
    2d06:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	81 11       	cpse	r24, r1
    2d0c:	2d c0       	rjmp	.+90     	; 0x2d68 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2d0e:	11 11       	cpse	r17, r1
    2d10:	0d c0       	rjmp	.+26     	; 0x2d2c <prvProcessTimerOrBlockTask+0x54>
    2d12:	8c 14       	cp	r8, r12
    2d14:	9d 04       	cpc	r9, r13
    2d16:	ae 04       	cpc	r10, r14
    2d18:	bf 04       	cpc	r11, r15
    2d1a:	40 f0       	brcs	.+16     	; 0x2d2c <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    2d1c:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2d20:	a5 01       	movw	r20, r10
    2d22:	94 01       	movw	r18, r8
    2d24:	c7 01       	movw	r24, r14
    2d26:	b6 01       	movw	r22, r12
    2d28:	81 df       	rcall	.-254    	; 0x2c2c <prvProcessExpiredTimer>
    2d2a:	20 c0       	rjmp	.+64     	; 0x2d6c <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2d2c:	11 23       	and	r17, r17
    2d2e:	41 f0       	breq	.+16     	; 0x2d40 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2d30:	e0 91 27 15 	lds	r30, 0x1527	; 0x801527 <pxOverflowTimerList>
    2d34:	f0 91 28 15 	lds	r31, 0x1528	; 0x801528 <pxOverflowTimerList+0x1>
    2d38:	80 81       	ld	r24, Z
    2d3a:	11 e0       	ldi	r17, 0x01	; 1
    2d3c:	81 11       	cpse	r24, r1
    2d3e:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2d40:	b7 01       	movw	r22, r14
    2d42:	a6 01       	movw	r20, r12
    2d44:	48 19       	sub	r20, r8
    2d46:	59 09       	sbc	r21, r9
    2d48:	6a 09       	sbc	r22, r10
    2d4a:	7b 09       	sbc	r23, r11
    2d4c:	21 2f       	mov	r18, r17
    2d4e:	80 91 25 15 	lds	r24, 0x1525	; 0x801525 <xTimerQueue>
    2d52:	90 91 26 15 	lds	r25, 0x1526	; 0x801526 <xTimerQueue+0x1>
    2d56:	0e 94 b2 06 	call	0xd64	; 0xd64 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2d5a:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <xTaskResumeAll>
    2d5e:	81 11       	cpse	r24, r1
    2d60:	05 c0       	rjmp	.+10     	; 0x2d6c <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2d62:	0e 94 30 03 	call	0x660	; 0x660 <vPortYield>
    2d66:	02 c0       	rjmp	.+4      	; 0x2d6c <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2d68:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <xTaskResumeAll>
            }
        }
    }
    2d6c:	0f 90       	pop	r0
    2d6e:	df 91       	pop	r29
    2d70:	cf 91       	pop	r28
    2d72:	1f 91       	pop	r17
    2d74:	ff 90       	pop	r15
    2d76:	ef 90       	pop	r14
    2d78:	df 90       	pop	r13
    2d7a:	cf 90       	pop	r12
    2d7c:	bf 90       	pop	r11
    2d7e:	af 90       	pop	r10
    2d80:	9f 90       	pop	r9
    2d82:	8f 90       	pop	r8
    2d84:	08 95       	ret

00002d86 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2d86:	af 92       	push	r10
    2d88:	bf 92       	push	r11
    2d8a:	cf 92       	push	r12
    2d8c:	df 92       	push	r13
    2d8e:	ef 92       	push	r14
    2d90:	ff 92       	push	r15
    2d92:	0f 93       	push	r16
    2d94:	1f 93       	push	r17
    2d96:	cf 93       	push	r28
    2d98:	df 93       	push	r29
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62
    2d9e:	28 97       	sbiw	r28, 0x08	; 8
    2da0:	0f b6       	in	r0, 0x3f	; 63
    2da2:	f8 94       	cli
    2da4:	de bf       	out	0x3e, r29	; 62
    2da6:	0f be       	out	0x3f, r0	; 63
    2da8:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2daa:	82 c0       	rjmp	.+260    	; 0x2eb0 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	88 23       	and	r24, r24
    2db0:	0c f4       	brge	.+2      	; 0x2db4 <prvProcessReceivedCommands+0x2e>
    2db2:	7e c0       	rjmp	.+252    	; 0x2eb0 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2db4:	ae 80       	ldd	r10, Y+6	; 0x06
    2db6:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2db8:	d5 01       	movw	r26, r10
    2dba:	1c 96       	adiw	r26, 0x0c	; 12
    2dbc:	8d 91       	ld	r24, X+
    2dbe:	9c 91       	ld	r25, X
    2dc0:	1d 97       	sbiw	r26, 0x0d	; 13
    2dc2:	89 2b       	or	r24, r25
    2dc4:	21 f0       	breq	.+8      	; 0x2dce <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2dc6:	c5 01       	movw	r24, r10
    2dc8:	02 96       	adiw	r24, 0x02	; 2
    2dca:	0e 94 b4 02 	call	0x568	; 0x568 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2dce:	ce 01       	movw	r24, r28
    2dd0:	08 96       	adiw	r24, 0x08	; 8
    2dd2:	fe de       	rcall	.-516    	; 0x2bd0 <prvSampleTimeNow>
    2dd4:	8b 01       	movw	r16, r22
    2dd6:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    2dd8:	e9 81       	ldd	r30, Y+1	; 0x01
    2dda:	0e 2e       	mov	r0, r30
    2ddc:	00 0c       	add	r0, r0
    2dde:	ff 0b       	sbc	r31, r31
    2de0:	ea 30       	cpi	r30, 0x0A	; 10
    2de2:	f1 05       	cpc	r31, r1
    2de4:	08 f0       	brcs	.+2      	; 0x2de8 <prvProcessReceivedCommands+0x62>
    2de6:	64 c0       	rjmp	.+200    	; 0x2eb0 <prvProcessReceivedCommands+0x12a>
    2de8:	88 27       	eor	r24, r24
    2dea:	ee 58       	subi	r30, 0x8E	; 142
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	8f 4f       	sbci	r24, 0xFF	; 255
    2df0:	0c 94 77 25 	jmp	0x4aee	; 0x4aee <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2df4:	f5 01       	movw	r30, r10
    2df6:	86 89       	ldd	r24, Z+22	; 0x16
    2df8:	81 60       	ori	r24, 0x01	; 1
    2dfa:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2dfc:	ca 80       	ldd	r12, Y+2	; 0x02
    2dfe:	db 80       	ldd	r13, Y+3	; 0x03
    2e00:	ec 80       	ldd	r14, Y+4	; 0x04
    2e02:	fd 80       	ldd	r15, Y+5	; 0x05
    2e04:	46 85       	ldd	r20, Z+14	; 0x0e
    2e06:	57 85       	ldd	r21, Z+15	; 0x0f
    2e08:	60 89       	ldd	r22, Z+16	; 0x10
    2e0a:	71 89       	ldd	r23, Z+17	; 0x11
    2e0c:	4c 0d       	add	r20, r12
    2e0e:	5d 1d       	adc	r21, r13
    2e10:	6e 1d       	adc	r22, r14
    2e12:	7f 1d       	adc	r23, r15
    2e14:	c5 01       	movw	r24, r10
    2e16:	83 dd       	rcall	.-1274   	; 0x291e <prvInsertTimerInActiveList>
    2e18:	88 23       	and	r24, r24
    2e1a:	09 f4       	brne	.+2      	; 0x2e1e <prvProcessReceivedCommands+0x98>
    2e1c:	49 c0       	rjmp	.+146    	; 0x2eb0 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2e1e:	d5 01       	movw	r26, r10
    2e20:	54 96       	adiw	r26, 0x14	; 20
    2e22:	ed 91       	ld	r30, X+
    2e24:	fc 91       	ld	r31, X
    2e26:	55 97       	sbiw	r26, 0x15	; 21
    2e28:	c5 01       	movw	r24, r10
    2e2a:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2e2c:	f5 01       	movw	r30, r10
    2e2e:	86 89       	ldd	r24, Z+22	; 0x16
    2e30:	82 ff       	sbrs	r24, 2
    2e32:	3e c0       	rjmp	.+124    	; 0x2eb0 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2e34:	4a 81       	ldd	r20, Y+2	; 0x02
    2e36:	5b 81       	ldd	r21, Y+3	; 0x03
    2e38:	6c 81       	ldd	r22, Y+4	; 0x04
    2e3a:	7d 81       	ldd	r23, Y+5	; 0x05
    2e3c:	86 85       	ldd	r24, Z+14	; 0x0e
    2e3e:	97 85       	ldd	r25, Z+15	; 0x0f
    2e40:	a0 89       	ldd	r26, Z+16	; 0x10
    2e42:	b1 89       	ldd	r27, Z+17	; 0x11
    2e44:	9a 01       	movw	r18, r20
    2e46:	ab 01       	movw	r20, r22
    2e48:	28 0f       	add	r18, r24
    2e4a:	39 1f       	adc	r19, r25
    2e4c:	4a 1f       	adc	r20, r26
    2e4e:	5b 1f       	adc	r21, r27
    2e50:	c1 2c       	mov	r12, r1
    2e52:	d1 2c       	mov	r13, r1
    2e54:	76 01       	movw	r14, r12
    2e56:	00 e0       	ldi	r16, 0x00	; 0
    2e58:	10 e0       	ldi	r17, 0x00	; 0
    2e5a:	60 e0       	ldi	r22, 0x00	; 0
    2e5c:	c5 01       	movw	r24, r10
    2e5e:	f2 dd       	rcall	.-1052   	; 0x2a44 <xTimerGenericCommand>
    2e60:	27 c0       	rjmp	.+78     	; 0x2eb0 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2e62:	d5 01       	movw	r26, r10
    2e64:	56 96       	adiw	r26, 0x16	; 22
    2e66:	8c 91       	ld	r24, X
    2e68:	56 97       	sbiw	r26, 0x16	; 22
    2e6a:	8e 7f       	andi	r24, 0xFE	; 254
    2e6c:	56 96       	adiw	r26, 0x16	; 22
    2e6e:	8c 93       	st	X, r24
                        break;
    2e70:	1f c0       	rjmp	.+62     	; 0x2eb0 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2e72:	f5 01       	movw	r30, r10
    2e74:	86 89       	ldd	r24, Z+22	; 0x16
    2e76:	81 60       	ori	r24, 0x01	; 1
    2e78:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2e7a:	4a 81       	ldd	r20, Y+2	; 0x02
    2e7c:	5b 81       	ldd	r21, Y+3	; 0x03
    2e7e:	6c 81       	ldd	r22, Y+4	; 0x04
    2e80:	7d 81       	ldd	r23, Y+5	; 0x05
    2e82:	46 87       	std	Z+14, r20	; 0x0e
    2e84:	57 87       	std	Z+15, r21	; 0x0f
    2e86:	60 8b       	std	Z+16, r22	; 0x10
    2e88:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2e8a:	40 0f       	add	r20, r16
    2e8c:	51 1f       	adc	r21, r17
    2e8e:	62 1f       	adc	r22, r18
    2e90:	73 1f       	adc	r23, r19
    2e92:	68 01       	movw	r12, r16
    2e94:	79 01       	movw	r14, r18
    2e96:	c5 01       	movw	r24, r10
    2e98:	42 dd       	rcall	.-1404   	; 0x291e <prvInsertTimerInActiveList>
                        break;
    2e9a:	0a c0       	rjmp	.+20     	; 0x2eb0 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2e9c:	f5 01       	movw	r30, r10
    2e9e:	86 89       	ldd	r24, Z+22	; 0x16
    2ea0:	81 fd       	sbrc	r24, 1
    2ea2:	04 c0       	rjmp	.+8      	; 0x2eac <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    2ea4:	c5 01       	movw	r24, r10
    2ea6:	0e 94 25 02 	call	0x44a	; 0x44a <vPortFree>
    2eaa:	02 c0       	rjmp	.+4      	; 0x2eb0 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2eac:	8e 7f       	andi	r24, 0xFE	; 254
    2eae:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	a9 01       	movw	r20, r18
    2eb6:	be 01       	movw	r22, r28
    2eb8:	6f 5f       	subi	r22, 0xFF	; 255
    2eba:	7f 4f       	sbci	r23, 0xFF	; 255
    2ebc:	80 91 25 15 	lds	r24, 0x1525	; 0x801525 <xTimerQueue>
    2ec0:	90 91 26 15 	lds	r25, 0x1526	; 0x801526 <xTimerQueue+0x1>
    2ec4:	0e 94 23 06 	call	0xc46	; 0xc46 <xQueueReceive>
    2ec8:	81 11       	cpse	r24, r1
    2eca:	70 cf       	rjmp	.-288    	; 0x2dac <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2ecc:	28 96       	adiw	r28, 0x08	; 8
    2ece:	0f b6       	in	r0, 0x3f	; 63
    2ed0:	f8 94       	cli
    2ed2:	de bf       	out	0x3e, r29	; 62
    2ed4:	0f be       	out	0x3f, r0	; 63
    2ed6:	cd bf       	out	0x3d, r28	; 61
    2ed8:	df 91       	pop	r29
    2eda:	cf 91       	pop	r28
    2edc:	1f 91       	pop	r17
    2ede:	0f 91       	pop	r16
    2ee0:	ff 90       	pop	r15
    2ee2:	ef 90       	pop	r14
    2ee4:	df 90       	pop	r13
    2ee6:	cf 90       	pop	r12
    2ee8:	bf 90       	pop	r11
    2eea:	af 90       	pop	r10
    2eec:	08 95       	ret

00002eee <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2eee:	08 95       	ret

00002ef0 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2ef0:	84 b1       	in	r24, 0x04	; 4
    2ef2:	80 68       	ori	r24, 0x80	; 128
    2ef4:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2ef6:	85 b1       	in	r24, 0x05	; 5
    2ef8:	80 68       	ori	r24, 0x80	; 128
    2efa:	85 b9       	out	0x05, r24	; 5
    2efc:	08 95       	ret

00002efe <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2efe:	83 b1       	in	r24, 0x03	; 3
    2f00:	80 68       	ori	r24, 0x80	; 128
    2f02:	83 b9       	out	0x03, r24	; 3
    2f04:	08 95       	ret

00002f06 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2f06:	f4 df       	rcall	.-24     	; 0x2ef0 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2f08:	2f ef       	ldi	r18, 0xFF	; 255
    2f0a:	80 e7       	ldi	r24, 0x70	; 112
    2f0c:	92 e0       	ldi	r25, 0x02	; 2
    2f0e:	21 50       	subi	r18, 0x01	; 1
    2f10:	80 40       	sbci	r24, 0x00	; 0
    2f12:	90 40       	sbci	r25, 0x00	; 0
    2f14:	e1 f7       	brne	.-8      	; 0x2f0e <vApplicationMallocFailedHook+0x8>
    2f16:	00 c0       	rjmp	.+0      	; 0x2f18 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2f18:	00 00       	nop
    2f1a:	f1 df       	rcall	.-30     	; 0x2efe <prvBlinkMainLed>
    2f1c:	f5 cf       	rjmp	.-22     	; 0x2f08 <vApplicationMallocFailedHook+0x2>

00002f1e <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2f1e:	e8 df       	rcall	.-48     	; 0x2ef0 <prvSetMainLedOn>
    2f20:	2f ef       	ldi	r18, 0xFF	; 255
    2f22:	87 ea       	ldi	r24, 0xA7	; 167
    2f24:	91 e6       	ldi	r25, 0x61	; 97
    2f26:	21 50       	subi	r18, 0x01	; 1
    2f28:	80 40       	sbci	r24, 0x00	; 0
    2f2a:	90 40       	sbci	r25, 0x00	; 0
    2f2c:	e1 f7       	brne	.-8      	; 0x2f26 <vApplicationStackOverflowHook+0x8>
    2f2e:	00 c0       	rjmp	.+0      	; 0x2f30 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2f30:	00 00       	nop
    2f32:	e5 df       	rcall	.-54     	; 0x2efe <prvBlinkMainLed>
    2f34:	f5 cf       	rjmp	.-22     	; 0x2f20 <vApplicationStackOverflowHook+0x2>

00002f36 <task1>:
	,  NULL );
}

/*-----------------------------------------------------------*/
void task1( void *pvParameters )
{
    2f36:	cf 93       	push	r28
    2f38:	df 93       	push	r29
    2f3a:	00 d0       	rcall	.+0      	; 0x2f3c <task1+0x6>
    2f3c:	1f 92       	push	r1
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 500/portTICK_PERIOD_MS; // 500 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    2f42:	0e 94 9b 0c 	call	0x1936	; 0x1936 <xTaskGetTickCount>
    2f46:	69 83       	std	Y+1, r22	; 0x01
    2f48:	7a 83       	std	Y+2, r23	; 0x02
    2f4a:	8b 83       	std	Y+3, r24	; 0x03
    2f4c:	9c 83       	std	Y+4, r25	; 0x04

	for(;;)
	{
		
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    2f4e:	4f e1       	ldi	r20, 0x1F	; 31
    2f50:	50 e0       	ldi	r21, 0x00	; 0
    2f52:	60 e0       	ldi	r22, 0x00	; 0
    2f54:	70 e0       	ldi	r23, 0x00	; 0
    2f56:	ce 01       	movw	r24, r28
    2f58:	01 96       	adiw	r24, 0x01	; 1
    2f5a:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <xTaskDelayUntil>
		puts("Task1"); // stdio functions are not reentrant - Should normally be protected by MUTEX
    2f5e:	8b e4       	ldi	r24, 0x4B	; 75
    2f60:	92 e0       	ldi	r25, 0x02	; 2
    2f62:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <puts>
		PORTA ^= _BV(PA0);
    2f66:	92 b1       	in	r25, 0x02	; 2
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	89 27       	eor	r24, r25
    2f6c:	82 b9       	out	0x02, r24	; 2
    2f6e:	ef cf       	rjmp	.-34     	; 0x2f4e <task1+0x18>

00002f70 <task2>:
	}
}

/*-----------------------------------------------------------*/
void task2( void *pvParameters )
{
    2f70:	cf 93       	push	r28
    2f72:	df 93       	push	r29
    2f74:	00 d0       	rcall	.+0      	; 0x2f76 <task2+0x6>
    2f76:	1f 92       	push	r1
    2f78:	cd b7       	in	r28, 0x3d	; 61
    2f7a:	de b7       	in	r29, 0x3e	; 62

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000/portTICK_PERIOD_MS; // 1000 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    2f7c:	0e 94 9b 0c 	call	0x1936	; 0x1936 <xTaskGetTickCount>
    2f80:	69 83       	std	Y+1, r22	; 0x01
    2f82:	7a 83       	std	Y+2, r23	; 0x02
    2f84:	8b 83       	std	Y+3, r24	; 0x03
    2f86:	9c 83       	std	Y+4, r25	; 0x04

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    2f88:	4e e3       	ldi	r20, 0x3E	; 62
    2f8a:	50 e0       	ldi	r21, 0x00	; 0
    2f8c:	60 e0       	ldi	r22, 0x00	; 0
    2f8e:	70 e0       	ldi	r23, 0x00	; 0
    2f90:	ce 01       	movw	r24, r28
    2f92:	01 96       	adiw	r24, 0x01	; 1
    2f94:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <xTaskDelayUntil>
		puts("Task2"); // stdio functions are not reentrant - Should normally be protected by MUTEX
    2f98:	81 e5       	ldi	r24, 0x51	; 81
    2f9a:	92 e0       	ldi	r25, 0x02	; 2
    2f9c:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <puts>
		PORTA ^= _BV(PA7);
    2fa0:	82 b1       	in	r24, 0x02	; 2
    2fa2:	80 58       	subi	r24, 0x80	; 128
    2fa4:	82 b9       	out	0x02, r24	; 2
    2fa6:	f0 cf       	rjmp	.-32     	; 0x2f88 <task2+0x18>

00002fa8 <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_create(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    2fa8:	ef 92       	push	r14
    2faa:	ff 92       	push	r15
    2fac:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    2fae:	80 91 db 16 	lds	r24, 0x16DB	; 0x8016db <xTestSemaphore>
    2fb2:	90 91 dc 16 	lds	r25, 0x16DC	; 0x8016dc <xTestSemaphore+0x1>
    2fb6:	89 2b       	or	r24, r25
    2fb8:	89 f4       	brne	.+34     	; 0x2fdc <create_tasks_and_semaphores+0x34>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    2fba:	81 e0       	ldi	r24, 0x01	; 1
    2fbc:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <xQueueCreateMutex>
    2fc0:	90 93 dc 16 	sts	0x16DC, r25	; 0x8016dc <xTestSemaphore+0x1>
    2fc4:	80 93 db 16 	sts	0x16DB, r24	; 0x8016db <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    2fc8:	00 97       	sbiw	r24, 0x00	; 0
    2fca:	41 f0       	breq	.+16     	; 0x2fdc <create_tasks_and_semaphores+0x34>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    2fcc:	00 e0       	ldi	r16, 0x00	; 0
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	a9 01       	movw	r20, r18
    2fd4:	60 e0       	ldi	r22, 0x00	; 0
    2fd6:	70 e0       	ldi	r23, 0x00	; 0
    2fd8:	0e 94 38 05 	call	0xa70	; 0xa70 <xQueueGenericSend>

//     const portCHAR* = "Task1";
// 	 const portCHAR2* = "Task2";
// 	

	xTaskCreate(
    2fdc:	e1 2c       	mov	r14, r1
    2fde:	f1 2c       	mov	r15, r1
    2fe0:	02 e0       	ldi	r16, 0x02	; 2
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	40 ec       	ldi	r20, 0xC0	; 192
    2fe8:	50 e0       	ldi	r21, 0x00	; 0
    2fea:	6b e4       	ldi	r22, 0x4B	; 75
    2fec:	72 e0       	ldi	r23, 0x02	; 2
    2fee:	8b e9       	ldi	r24, 0x9B	; 155
    2ff0:	97 e1       	ldi	r25, 0x17	; 23
    2ff2:	0e 94 11 0c 	call	0x1822	; 0x1822 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    2ff6:	01 e0       	ldi	r16, 0x01	; 1
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	40 ec       	ldi	r20, 0xC0	; 192
    2ffe:	50 e0       	ldi	r21, 0x00	; 0
    3000:	61 e5       	ldi	r22, 0x51	; 81
    3002:	72 e0       	ldi	r23, 0x02	; 2
    3004:	88 eb       	ldi	r24, 0xB8	; 184
    3006:	97 e1       	ldi	r25, 0x17	; 23
    3008:	0e 94 11 0c 	call	0x1822	; 0x1822 <xTaskCreate>
	, "Task2"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    300c:	0f 91       	pop	r16
    300e:	ff 90       	pop	r15
    3010:	ef 90       	pop	r14
    3012:	08 95       	ret

00003014 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3014:	81 b1       	in	r24, 0x01	; 1
    3016:	81 68       	ori	r24, 0x81	; 129
    3018:	81 b9       	out	0x01, r24	; 1
	// Initialise the trace-driver to be used together with the R2R-Network
	trace_init();
    301a:	0e 94 08 01 	call	0x210	; 0x210 <trace_init>
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	
	stdio_initialise(ser_USART0);
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	0e 94 b9 21 	call	0x4372	; 0x4372 <stdio_initialise>
	// Let's create some tasks
	create_tasks_and_semaphores();
    3024:	c1 df       	rcall	.-126    	; 0x2fa8 <create_tasks_and_semaphores>
	// Initialise the HAL layer and use 5 for LED driver priority
	
	//halCreate(5);

	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1,NULL);
    3026:	60 e0       	ldi	r22, 0x00	; 0
    3028:	70 e0       	ldi	r23, 0x00	; 0
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	a4 d2       	rcall	.+1352   	; 0x3576 <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_create(3);
    302e:	83 e0       	ldi	r24, 0x03	; 3
    3030:	1a c1       	rjmp	.+564    	; 0x3266 <lora_handler_create>
    3032:	08 95       	ret

00003034 <main>:
    3034:	ef df       	rcall	.-34     	; 0x3014 <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    3036:	87 e5       	ldi	r24, 0x57	; 87
    3038:	92 e0       	ldi	r25, 0x02	; 2
    303a:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    303e:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <vTaskStartScheduler>
    3042:	ff cf       	rjmp	.-2      	; 0x3042 <main+0xe>

00003044 <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    3044:	cf 93       	push	r28
    3046:	df 93       	push	r29
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    304e:	e1 d2       	rcall	.+1474   	; 0x3612 <lora_driver_rn2483FactoryReset>
    3050:	5d d5       	rcall	.+2746   	; 0x3b0c <lora_driver_mapReturnCodeToText>
    3052:	9f 93       	push	r25
    3054:	8f 93       	push	r24
    3056:	89 e6       	ldi	r24, 0x69	; 105
    3058:	92 e0       	ldi	r25, 0x02	; 2
    305a:	9f 93       	push	r25
    305c:	8f 93       	push	r24
    305e:	0e 94 03 27 	call	0x4e06	; 0x4e06 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3062:	55 d4       	rcall	.+2218   	; 0x390e <lora_driver_configureToEu868>
    3064:	53 d5       	rcall	.+2726   	; 0x3b0c <lora_driver_mapReturnCodeToText>
    3066:	9f 93       	push	r25
    3068:	8f 93       	push	r24
    306a:	8c e7       	ldi	r24, 0x7C	; 124
    306c:	92 e0       	ldi	r25, 0x02	; 2
    306e:	9f 93       	push	r25
    3070:	8f 93       	push	r24
    3072:	0e 94 03 27 	call	0x4e06	; 0x4e06 <printf>
    3076:	87 e5       	ldi	r24, 0x57	; 87

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3078:	95 e1       	ldi	r25, 0x15	; 21
    307a:	dd d2       	rcall	.+1466   	; 0x3636 <lora_driver_getRn2483Hweui>
    307c:	47 d5       	rcall	.+2702   	; 0x3b0c <lora_driver_mapReturnCodeToText>
    307e:	c7 e5       	ldi	r28, 0x57	; 87
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3080:	d5 e1       	ldi	r29, 0x15	; 21
    3082:	df 93       	push	r29
    3084:	cf 93       	push	r28
    3086:	9f 93       	push	r25
    3088:	8f 93       	push	r24
    308a:	85 e9       	ldi	r24, 0x95	; 149
    308c:	92 e0       	ldi	r25, 0x02	; 2
    308e:	9f 93       	push	r25
    3090:	8f 93       	push	r24
    3092:	0e 94 03 27 	call	0x4e06	; 0x4e06 <printf>
    3096:	ce 01       	movw	r24, r28

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3098:	ea d2       	rcall	.+1492   	; 0x366e <lora_driver_setDeviceIdentifier>
    309a:	38 d5       	rcall	.+2672   	; 0x3b0c <lora_driver_mapReturnCodeToText>
    309c:	9f 93       	push	r25
    309e:	8f 93       	push	r24
    30a0:	df 93       	push	r29
    30a2:	cf 93       	push	r28
    30a4:	89 ea       	ldi	r24, 0xA9	; 169
    30a6:	92 e0       	ldi	r25, 0x02	; 2
    30a8:	9f 93       	push	r25
    30aa:	8f 93       	push	r24
    30ac:	0e 94 03 27 	call	0x4e06	; 0x4e06 <printf>
    30b0:	ae 01       	movw	r20, r28

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    30b2:	6e eb       	ldi	r22, 0xBE	; 190
    30b4:	72 e0       	ldi	r23, 0x02	; 2
    30b6:	8f ed       	ldi	r24, 0xDF	; 223
    30b8:	92 e0       	ldi	r25, 0x02	; 2
    30ba:	07 d5       	rcall	.+2574   	; 0x3aca <lora_driver_setOtaaIdentity>
    30bc:	27 d5       	rcall	.+2638   	; 0x3b0c <lora_driver_mapReturnCodeToText>
    30be:	9f 93       	push	r25
    30c0:	8f 93       	push	r24
    30c2:	df 93       	push	r29
    30c4:	cf 93       	push	r28
    30c6:	8e eb       	ldi	r24, 0xBE	; 190
    30c8:	92 e0       	ldi	r25, 0x02	; 2
    30ca:	9f 93       	push	r25
    30cc:	8f 93       	push	r24
    30ce:	8f ed       	ldi	r24, 0xDF	; 223
    30d0:	92 e0       	ldi	r25, 0x02	; 2
    30d2:	9f 93       	push	r25
    30d4:	8f 93       	push	r24
    30d6:	80 ef       	ldi	r24, 0xF0	; 240
    30d8:	92 e0       	ldi	r25, 0x02	; 2
    30da:	9f 93       	push	r25
    30dc:	8f 93       	push	r24
    30de:	0e 94 03 27 	call	0x4e06	; 0x4e06 <printf>
    30e2:	f8 d2       	rcall	.+1520   	; 0x36d4 <lora_driver_saveMac>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    30e4:	13 d5       	rcall	.+2598   	; 0x3b0c <lora_driver_mapReturnCodeToText>
    30e6:	9f 93       	push	r25
    30e8:	8f 93       	push	r24
    30ea:	86 e2       	ldi	r24, 0x26	; 38
    30ec:	93 e0       	ldi	r25, 0x03	; 3
    30ee:	9f 93       	push	r25
    30f0:	8f 93       	push	r24
    30f2:	0e 94 03 27 	call	0x4e06	; 0x4e06 <printf>
    30f6:	8d b7       	in	r24, 0x3d	; 61

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    30f8:	9e b7       	in	r25, 0x3e	; 62
    30fa:	82 96       	adiw	r24, 0x22	; 34
    30fc:	0f b6       	in	r0, 0x3f	; 63
    30fe:	f8 94       	cli
    3100:	9e bf       	out	0x3e, r25	; 62
    3102:	0f be       	out	0x3f, r0	; 63
    3104:	8d bf       	out	0x3d, r24	; 61
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	df d3       	rcall	.+1982   	; 0x38c8 <lora_driver_setAdaptiveDataRate>
    310a:	00 d5       	rcall	.+2560   	; 0x3b0c <lora_driver_mapReturnCodeToText>
    310c:	9f 93       	push	r25
    310e:	8f 93       	push	r24
    3110:	85 e3       	ldi	r24, 0x35	; 53
    3112:	93 e0       	ldi	r25, 0x03	; 3
    3114:	9f 93       	push	r25
    3116:	8f 93       	push	r24
    3118:	0e 94 03 27 	call	0x4e06	; 0x4e06 <printf>
    311c:	84 ef       	ldi	r24, 0xF4	; 244

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    311e:	91 e0       	ldi	r25, 0x01	; 1
    3120:	de d3       	rcall	.+1980   	; 0x38de <lora_driver_setReceiveDelay>
    3122:	f4 d4       	rcall	.+2536   	; 0x3b0c <lora_driver_mapReturnCodeToText>
    3124:	9f 93       	push	r25
    3126:	8f 93       	push	r24
    3128:	81 e0       	ldi	r24, 0x01	; 1
    312a:	8f 93       	push	r24
    312c:	84 ef       	ldi	r24, 0xF4	; 244
    312e:	8f 93       	push	r24
    3130:	86 e5       	ldi	r24, 0x56	; 86
    3132:	93 e0       	ldi	r25, 0x03	; 3
    3134:	9f 93       	push	r25
    3136:	8f 93       	push	r24
    3138:	0e 94 03 27 	call	0x4e06	; 0x4e06 <printf>
    313c:	8d b7       	in	r24, 0x3d	; 61
    313e:	9e b7       	in	r25, 0x3e	; 62
    3140:	0a 96       	adiw	r24, 0x0a	; 10
    3142:	0f b6       	in	r0, 0x3f	; 63
    3144:	f8 94       	cli
    3146:	9e bf       	out	0x3e, r25	; 62
    3148:	0f be       	out	0x3f, r0	; 63
    314a:	8d bf       	out	0x3d, r24	; 61
    314c:	ca e0       	ldi	r28, 0x0A	; 10

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    314e:	80 e0       	ldi	r24, 0x00	; 0
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3150:	c7 d2       	rcall	.+1422   	; 0x36e0 <lora_driver_join>
    3152:	d8 2f       	mov	r29, r24
    3154:	db d4       	rcall	.+2486   	; 0x3b0c <lora_driver_mapReturnCodeToText>
    3156:	9f 93       	push	r25
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3158:	8f 93       	push	r24
    315a:	1f 92       	push	r1
    315c:	cf 93       	push	r28
    315e:	86 e7       	ldi	r24, 0x76	; 118
    3160:	93 e0       	ldi	r25, 0x03	; 3
    3162:	9f 93       	push	r25
    3164:	8f 93       	push	r24
    3166:	0e 94 03 27 	call	0x4e06	; 0x4e06 <printf>
    316a:	0f 90       	pop	r0
    316c:	0f 90       	pop	r0
    316e:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3170:	0f 90       	pop	r0
    3172:	0f 90       	pop	r0
    3174:	0f 90       	pop	r0
    3176:	d8 30       	cpi	r29, 0x08	; 8
    3178:	59 f0       	breq	.+22     	; 0x3190 <_lora_setup+0x14c>
    317a:	80 e0       	ldi	r24, 0x00	; 0
    317c:	0e 94 de 22 	call	0x45bc	; 0x45bc <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3180:	66 e3       	ldi	r22, 0x36	; 54
    3182:	71 e0       	ldi	r23, 0x01	; 1
    3184:	80 e0       	ldi	r24, 0x00	; 0
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <vTaskDelay>
    318c:	c1 50       	subi	r28, 0x01	; 1
    318e:	f9 f6       	brne	.-66     	; 0x314e <_lora_setup+0x10a>
    3190:	d8 30       	cpi	r29, 0x08	; 8
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3192:	21 f4       	brne	.+8      	; 0x319c <_lora_setup+0x158>
    3194:	81 e0       	ldi	r24, 0x01	; 1

	if (rc == LORA_ACCEPTED)
    3196:	0e 94 c0 22 	call	0x4580	; 0x4580 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    319a:	09 c0       	rjmp	.+18     	; 0x31ae <_lora_setup+0x16a>
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	0e 94 cf 22 	call	0x459e	; 0x459e <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    31a2:	80 e0       	ldi	r24, 0x00	; 0
    31a4:	0e 94 9d 22 	call	0x453a	; 0x453a <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    31a8:	0e 94 30 03 	call	0x660	; 0x660 <vPortYield>
    31ac:	fd cf       	rjmp	.-6      	; 0x31a8 <_lora_setup+0x164>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    31ae:	df 91       	pop	r29
    31b0:	cf 91       	pop	r28
    31b2:	08 95       	ret

000031b4 <lora_handler_task>:
		}
	}
}
    31b4:	cf 93       	push	r28
    31b6:	df 93       	push	r29
    31b8:	00 d0       	rcall	.+0      	; 0x31ba <lora_handler_task+0x6>

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    31ba:	1f 92       	push	r1
    31bc:	cd b7       	in	r28, 0x3d	; 61
    31be:	de b7       	in	r29, 0x3e	; 62
	printf("kommer vi her i lora handler task?");
    31c0:	86 e9       	ldi	r24, 0x96	; 150
    31c2:	93 e0       	ldi	r25, 0x03	; 3
    31c4:	9f 93       	push	r25
    31c6:	8f 93       	push	r24
    31c8:	0e 94 03 27 	call	0x4e06	; 0x4e06 <printf>
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	13 d2       	rcall	.+1062   	; 0x35f6 <lora_driver_resetRn2483>
	xTaskDelayUntil(2,1);
    31d0:	41 e0       	ldi	r20, 0x01	; 1
    31d2:	50 e0       	ldi	r21, 0x00	; 0
    31d4:	60 e0       	ldi	r22, 0x00	; 0
    31d6:	70 e0       	ldi	r23, 0x00	; 0
    31d8:	82 e0       	ldi	r24, 0x02	; 2
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <xTaskDelayUntil>
	lora_driver_resetRn2483(0);
    31e0:	80 e0       	ldi	r24, 0x00	; 0
    31e2:	09 d2       	rcall	.+1042   	; 0x35f6 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    31e4:	66 e9       	ldi	r22, 0x96	; 150
    31e6:	70 e0       	ldi	r23, 0x00	; 0
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    31f0:	bb d1       	rcall	.+886    	; 0x3568 <lora_driver_flushBuffers>

	_lora_setup();
    31f2:	28 df       	rcall	.-432    	; 0x3044 <_lora_setup>
    31f4:	e1 e4       	ldi	r30, 0x41	; 65

	_uplink_payload.len = 6;
    31f6:	f5 e1       	ldi	r31, 0x15	; 21
    31f8:	86 e0       	ldi	r24, 0x06	; 6
    31fa:	81 83       	std	Z+1, r24	; 0x01
    31fc:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    31fe:	80 83       	st	Z, r24
    3200:	0e 94 9b 0c 	call	0x1936	; 0x1936 <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    3204:	69 83       	std	Y+1, r22	; 0x01
    3206:	7a 83       	std	Y+2, r23	; 0x02
    3208:	8b 83       	std	Y+3, r24	; 0x03
    320a:	9c 83       	std	Y+4, r25	; 0x04
    320c:	0f 90       	pop	r0
    320e:	0f 90       	pop	r0
    3210:	e1 e4       	ldi	r30, 0x41	; 65
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
    3212:	f5 e1       	ldi	r31, 0x15	; 21
    3214:	80 e3       	ldi	r24, 0x30	; 48
    3216:	82 83       	std	Z+2, r24	; 0x02
    3218:	89 e3       	ldi	r24, 0x39	; 57
		_uplink_payload.bytes[1] = hum & 0xFF;
    321a:	83 83       	std	Z+3, r24	; 0x03
    321c:	82 e0       	ldi	r24, 0x02	; 2
		_uplink_payload.bytes[2] = temp >> 8;
    321e:	84 83       	std	Z+4, r24	; 0x04
    3220:	83 ea       	ldi	r24, 0xA3	; 163
		_uplink_payload.bytes[3] = temp & 0xFF;
    3222:	85 83       	std	Z+5, r24	; 0x05
    3224:	84 e0       	ldi	r24, 0x04	; 4
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    3226:	86 83       	std	Z+6, r24	; 0x06
    3228:	8a e1       	ldi	r24, 0x1A	; 26
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    322a:	87 83       	std	Z+7, r24	; 0x07
    322c:	83 e0       	ldi	r24, 0x03	; 3

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    322e:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3232:	61 e4       	ldi	r22, 0x41	; 65
    3234:	75 e1       	ldi	r23, 0x15	; 21
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	7c d2       	rcall	.+1272   	; 0x3732 <lora_driver_sendUploadMessage>
    323a:	68 d4       	rcall	.+2256   	; 0x3b0c <lora_driver_mapReturnCodeToText>
    323c:	9f 93       	push	r25
    323e:	8f 93       	push	r24
    3240:	89 eb       	ldi	r24, 0xB9	; 185
    3242:	93 e0       	ldi	r25, 0x03	; 3
    3244:	9f 93       	push	r25
    3246:	8f 93       	push	r24
    3248:	0e 94 03 27 	call	0x4e06	; 0x4e06 <printf>
    324c:	48 ea       	ldi	r20, 0xA8	; 168
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    324e:	58 e4       	ldi	r21, 0x48	; 72
    3250:	60 e0       	ldi	r22, 0x00	; 0
    3252:	70 e0       	ldi	r23, 0x00	; 0
    3254:	ce 01       	movw	r24, r28
    3256:	01 96       	adiw	r24, 0x01	; 1
    3258:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <xTaskDelayUntil>
    325c:	0f 90       	pop	r0
    325e:	0f 90       	pop	r0
    3260:	0f 90       	pop	r0
    3262:	0f 90       	pop	r0
    3264:	d5 cf       	rjmp	.-86     	; 0x3210 <lora_handler_task+0x5c>

00003266 <lora_handler_create>:
    3266:	ef 92       	push	r14
void lora_handler_task( void *pvParameters );

static lora_driver_payload_t _uplink_payload;
//(const  portCHAR *
void lora_handler_create(UBaseType_t lora_handler_task_priority)
{
    3268:	ff 92       	push	r15
    326a:	0f 93       	push	r16
	xTaskCreate(
    326c:	e1 2c       	mov	r14, r1
    326e:	f1 2c       	mov	r15, r1
    3270:	08 2f       	mov	r16, r24
    3272:	20 e0       	ldi	r18, 0x00	; 0
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	48 e8       	ldi	r20, 0x88	; 136
    3278:	51 e0       	ldi	r21, 0x01	; 1
    327a:	6e ec       	ldi	r22, 0xCE	; 206
    327c:	73 e0       	ldi	r23, 0x03	; 3
    327e:	8a ed       	ldi	r24, 0xDA	; 218
    3280:	98 e1       	ldi	r25, 0x18	; 24
    3282:	0e 94 11 0c 	call	0x1822	; 0x1822 <xTaskCreate>
	, "LRHand" // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3286:	0f 91       	pop	r16
    3288:	ff 90       	pop	r15
    328a:	ef 90       	pop	r14
    328c:	08 95       	ret

0000328e <__fixunssfsi>:
    328e:	33 d0       	rcall	.+102    	; 0x32f6 <__fp_splitA>
    3290:	88 f0       	brcs	.+34     	; 0x32b4 <__fixunssfsi+0x26>
    3292:	9f 57       	subi	r25, 0x7F	; 127
    3294:	90 f0       	brcs	.+36     	; 0x32ba <__fixunssfsi+0x2c>
    3296:	b9 2f       	mov	r27, r25
    3298:	99 27       	eor	r25, r25
    329a:	b7 51       	subi	r27, 0x17	; 23
    329c:	a0 f0       	brcs	.+40     	; 0x32c6 <__fixunssfsi+0x38>
    329e:	d1 f0       	breq	.+52     	; 0x32d4 <__fixunssfsi+0x46>
    32a0:	66 0f       	add	r22, r22
    32a2:	77 1f       	adc	r23, r23
    32a4:	88 1f       	adc	r24, r24
    32a6:	99 1f       	adc	r25, r25
    32a8:	1a f0       	brmi	.+6      	; 0x32b0 <__fixunssfsi+0x22>
    32aa:	ba 95       	dec	r27
    32ac:	c9 f7       	brne	.-14     	; 0x32a0 <__fixunssfsi+0x12>
    32ae:	12 c0       	rjmp	.+36     	; 0x32d4 <__fixunssfsi+0x46>
    32b0:	b1 30       	cpi	r27, 0x01	; 1
    32b2:	81 f0       	breq	.+32     	; 0x32d4 <__fixunssfsi+0x46>
    32b4:	3a d0       	rcall	.+116    	; 0x332a <__fp_zero>
    32b6:	b1 e0       	ldi	r27, 0x01	; 1
    32b8:	08 95       	ret
    32ba:	37 c0       	rjmp	.+110    	; 0x332a <__fp_zero>
    32bc:	67 2f       	mov	r22, r23
    32be:	78 2f       	mov	r23, r24
    32c0:	88 27       	eor	r24, r24
    32c2:	b8 5f       	subi	r27, 0xF8	; 248
    32c4:	39 f0       	breq	.+14     	; 0x32d4 <__fixunssfsi+0x46>
    32c6:	b9 3f       	cpi	r27, 0xF9	; 249
    32c8:	cc f3       	brlt	.-14     	; 0x32bc <__fixunssfsi+0x2e>
    32ca:	86 95       	lsr	r24
    32cc:	77 95       	ror	r23
    32ce:	67 95       	ror	r22
    32d0:	b3 95       	inc	r27
    32d2:	d9 f7       	brne	.-10     	; 0x32ca <__fixunssfsi+0x3c>
    32d4:	3e f4       	brtc	.+14     	; 0x32e4 <__fixunssfsi+0x56>
    32d6:	90 95       	com	r25
    32d8:	80 95       	com	r24
    32da:	70 95       	com	r23
    32dc:	61 95       	neg	r22
    32de:	7f 4f       	sbci	r23, 0xFF	; 255
    32e0:	8f 4f       	sbci	r24, 0xFF	; 255
    32e2:	9f 4f       	sbci	r25, 0xFF	; 255
    32e4:	08 95       	ret

000032e6 <__fp_split3>:
    32e6:	57 fd       	sbrc	r21, 7
    32e8:	90 58       	subi	r25, 0x80	; 128
    32ea:	44 0f       	add	r20, r20
    32ec:	55 1f       	adc	r21, r21
    32ee:	59 f0       	breq	.+22     	; 0x3306 <__fp_splitA+0x10>
    32f0:	5f 3f       	cpi	r21, 0xFF	; 255
    32f2:	71 f0       	breq	.+28     	; 0x3310 <__fp_splitA+0x1a>
    32f4:	47 95       	ror	r20

000032f6 <__fp_splitA>:
    32f6:	88 0f       	add	r24, r24
    32f8:	97 fb       	bst	r25, 7
    32fa:	99 1f       	adc	r25, r25
    32fc:	61 f0       	breq	.+24     	; 0x3316 <__fp_splitA+0x20>
    32fe:	9f 3f       	cpi	r25, 0xFF	; 255
    3300:	79 f0       	breq	.+30     	; 0x3320 <__fp_splitA+0x2a>
    3302:	87 95       	ror	r24
    3304:	08 95       	ret
    3306:	12 16       	cp	r1, r18
    3308:	13 06       	cpc	r1, r19
    330a:	14 06       	cpc	r1, r20
    330c:	55 1f       	adc	r21, r21
    330e:	f2 cf       	rjmp	.-28     	; 0x32f4 <__fp_split3+0xe>
    3310:	46 95       	lsr	r20
    3312:	f1 df       	rcall	.-30     	; 0x32f6 <__fp_splitA>
    3314:	08 c0       	rjmp	.+16     	; 0x3326 <__fp_splitA+0x30>
    3316:	16 16       	cp	r1, r22
    3318:	17 06       	cpc	r1, r23
    331a:	18 06       	cpc	r1, r24
    331c:	99 1f       	adc	r25, r25
    331e:	f1 cf       	rjmp	.-30     	; 0x3302 <__fp_splitA+0xc>
    3320:	86 95       	lsr	r24
    3322:	71 05       	cpc	r23, r1
    3324:	61 05       	cpc	r22, r1
    3326:	08 94       	sec
    3328:	08 95       	ret

0000332a <__fp_zero>:
    332a:	e8 94       	clt

0000332c <__fp_szero>:
    332c:	bb 27       	eor	r27, r27
    332e:	66 27       	eor	r22, r22
    3330:	77 27       	eor	r23, r23
    3332:	cb 01       	movw	r24, r22
    3334:	97 f9       	bld	r25, 7
    3336:	08 95       	ret

00003338 <_serialCallBack>:
    3338:	0f 93       	push	r16
    333a:	1f 93       	push	r17
    333c:	cf 93       	push	r28
    333e:	df 93       	push	r29
    3340:	1f 92       	push	r1
    3342:	1f 92       	push	r1
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
    3348:	8c 01       	movw	r16, r24
    334a:	19 82       	std	Y+1, r1	; 0x01
    334c:	2d c0       	rjmp	.+90     	; 0x33a8 <_serialCallBack+0x70>
    334e:	e0 91 f2 15 	lds	r30, 0x15F2	; 0x8015f2 <rec_buf_inp.2878>
    3352:	ec 32       	cpi	r30, 0x2C	; 44
    3354:	50 f4       	brcc	.+20     	; 0x336a <_serialCallBack+0x32>
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	8e 0f       	add	r24, r30
    335a:	80 93 f2 15 	sts	0x15F2, r24	; 0x8015f2 <rec_buf_inp.2878>
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	ec 5d       	subi	r30, 0xDC	; 220
    3362:	f9 4e       	sbci	r31, 0xE9	; 233
    3364:	8a 81       	ldd	r24, Y+2	; 0x02
    3366:	80 83       	st	Z, r24
    3368:	02 c0       	rjmp	.+4      	; 0x336e <_serialCallBack+0x36>
    336a:	10 92 f2 15 	sts	0x15F2, r1	; 0x8015f2 <rec_buf_inp.2878>
    336e:	8a 81       	ldd	r24, Y+2	; 0x02
    3370:	8a 30       	cpi	r24, 0x0A	; 10
    3372:	d1 f4       	brne	.+52     	; 0x33a8 <_serialCallBack+0x70>
    3374:	40 91 f2 15 	lds	r20, 0x15F2	; 0x8015f2 <rec_buf_inp.2878>
    3378:	50 e0       	ldi	r21, 0x00	; 0
    337a:	fa 01       	movw	r30, r20
    337c:	ee 5d       	subi	r30, 0xDE	; 222
    337e:	f9 4e       	sbci	r31, 0xE9	; 233
    3380:	10 82       	st	Z, r1
    3382:	41 50       	subi	r20, 0x01	; 1
    3384:	51 09       	sbc	r21, r1
    3386:	9e 01       	movw	r18, r28
    3388:	2f 5f       	subi	r18, 0xFF	; 255
    338a:	3f 4f       	sbci	r19, 0xFF	; 255
    338c:	64 e2       	ldi	r22, 0x24	; 36
    338e:	76 e1       	ldi	r23, 0x16	; 22
    3390:	80 91 f5 15 	lds	r24, 0x15F5	; 0x8015f5 <_serialReplyBufferHandle>
    3394:	90 91 f6 15 	lds	r25, 0x15F6	; 0x8015f6 <_serialReplyBufferHandle+0x1>
    3398:	0e 94 36 09 	call	0x126c	; 0x126c <xStreamBufferSendFromISR>
    339c:	89 81       	ldd	r24, Y+1	; 0x01
    339e:	81 11       	cpse	r24, r1
    33a0:	0e 94 30 03 	call	0x660	; 0x660 <vPortYield>
    33a4:	10 92 f2 15 	sts	0x15F2, r1	; 0x8015f2 <rec_buf_inp.2878>
    33a8:	be 01       	movw	r22, r28
    33aa:	6e 5f       	subi	r22, 0xFE	; 254
    33ac:	7f 4f       	sbci	r23, 0xFF	; 255
    33ae:	c8 01       	movw	r24, r16
    33b0:	4a d5       	rcall	.+2708   	; 0x3e46 <serial_getByte>
    33b2:	88 23       	and	r24, r24
    33b4:	61 f2       	breq	.-104    	; 0x334e <_serialCallBack+0x16>
    33b6:	0f 90       	pop	r0
    33b8:	0f 90       	pop	r0
    33ba:	df 91       	pop	r29
    33bc:	cf 91       	pop	r28
    33be:	1f 91       	pop	r17
    33c0:	0f 91       	pop	r16
    33c2:	08 95       	ret

000033c4 <_uploadMessage>:
    33c4:	0f 93       	push	r16
    33c6:	1f 93       	push	r17
    33c8:	cf 93       	push	r28
    33ca:	df 93       	push	r29
    33cc:	8c 01       	movw	r16, r24
    33ce:	eb 01       	movw	r28, r22
    33d0:	80 91 f5 15 	lds	r24, 0x15F5	; 0x8015f5 <_serialReplyBufferHandle>
    33d4:	90 91 f6 15 	lds	r25, 0x15F6	; 0x8015f6 <_serialReplyBufferHandle+0x1>
    33d8:	0e 94 43 08 	call	0x1086	; 0x1086 <xStreamBufferReset>
    33dc:	b8 01       	movw	r22, r16
    33de:	8b eb       	ldi	r24, 0xBB	; 187
    33e0:	95 e1       	ldi	r25, 0x15	; 21
    33e2:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <strcpy>
    33e6:	20 97       	sbiw	r28, 0x00	; 0
    33e8:	79 f0       	breq	.+30     	; 0x3408 <_uploadMessage+0x44>
    33ea:	eb eb       	ldi	r30, 0xBB	; 187
    33ec:	f5 e1       	ldi	r31, 0x15	; 21
    33ee:	01 90       	ld	r0, Z+
    33f0:	00 20       	and	r0, r0
    33f2:	e9 f7       	brne	.-6      	; 0x33ee <_uploadMessage+0x2a>
    33f4:	31 97       	sbiw	r30, 0x01	; 1
    33f6:	80 e2       	ldi	r24, 0x20	; 32
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	91 83       	std	Z+1, r25	; 0x01
    33fc:	80 83       	st	Z, r24
    33fe:	be 01       	movw	r22, r28
    3400:	8b eb       	ldi	r24, 0xBB	; 187
    3402:	95 e1       	ldi	r25, 0x15	; 21
    3404:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <strcat>
    3408:	eb eb       	ldi	r30, 0xBB	; 187
    340a:	f5 e1       	ldi	r31, 0x15	; 21
    340c:	df 01       	movw	r26, r30
    340e:	0d 90       	ld	r0, X+
    3410:	00 20       	and	r0, r0
    3412:	e9 f7       	brne	.-6      	; 0x340e <_uploadMessage+0x4a>
    3414:	11 97       	sbiw	r26, 0x01	; 1
    3416:	8d e0       	ldi	r24, 0x0D	; 13
    3418:	9a e0       	ldi	r25, 0x0A	; 10
    341a:	11 96       	adiw	r26, 0x01	; 1
    341c:	9c 93       	st	X, r25
    341e:	8e 93       	st	-X, r24
    3420:	12 96       	adiw	r26, 0x02	; 2
    3422:	1c 92       	st	X, r1
    3424:	01 90       	ld	r0, Z+
    3426:	00 20       	and	r0, r0
    3428:	e9 f7       	brne	.-6      	; 0x3424 <_uploadMessage+0x60>
    342a:	31 97       	sbiw	r30, 0x01	; 1
    342c:	eb 5b       	subi	r30, 0xBB	; 187
    342e:	f5 41       	sbci	r31, 0x15	; 21
    3430:	ae 2f       	mov	r26, r30
    3432:	8b eb       	ldi	r24, 0xBB	; 187
    3434:	95 e1       	ldi	r25, 0x15	; 21
    3436:	ac 01       	movw	r20, r24
    3438:	6a 2f       	mov	r22, r26
    343a:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <_rn2483_serial>
    343e:	90 91 f8 15 	lds	r25, 0x15F8	; 0x8015f8 <_rn2483_serial+0x1>
    3442:	ac d4       	rcall	.+2392   	; 0x3d9c <serial_sendBytes>
    3444:	81 11       	cpse	r24, r1
    3446:	11 c0       	rjmp	.+34     	; 0x346a <_uploadMessage+0xa6>
    3448:	08 e2       	ldi	r16, 0x28	; 40
    344a:	15 e0       	ldi	r17, 0x05	; 5
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	4d e2       	ldi	r20, 0x2D	; 45
    3452:	50 e0       	ldi	r21, 0x00	; 0
    3454:	6e e7       	ldi	r22, 0x7E	; 126
    3456:	76 e1       	ldi	r23, 0x16	; 22
    3458:	80 91 f5 15 	lds	r24, 0x15F5	; 0x8015f5 <_serialReplyBufferHandle>
    345c:	90 91 f6 15 	lds	r25, 0x15F6	; 0x8015f6 <_serialReplyBufferHandle+0x1>
    3460:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <xStreamBufferReceive>
    3464:	8e e7       	ldi	r24, 0x7E	; 126
    3466:	96 e1       	ldi	r25, 0x16	; 22
    3468:	02 c0       	rjmp	.+4      	; 0x346e <_uploadMessage+0xaa>
    346a:	80 e0       	ldi	r24, 0x00	; 0
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	df 91       	pop	r29
    3470:	cf 91       	pop	r28
    3472:	1f 91       	pop	r17
    3474:	0f 91       	pop	r16
    3476:	08 95       	ret

00003478 <_reply2ReturnCode>:
    3478:	2f 92       	push	r2
    347a:	3f 92       	push	r3
    347c:	4f 92       	push	r4
    347e:	5f 92       	push	r5
    3480:	6f 92       	push	r6
    3482:	7f 92       	push	r7
    3484:	8f 92       	push	r8
    3486:	9f 92       	push	r9
    3488:	af 92       	push	r10
    348a:	bf 92       	push	r11
    348c:	cf 92       	push	r12
    348e:	df 92       	push	r13
    3490:	ef 92       	push	r14
    3492:	ff 92       	push	r15
    3494:	0f 93       	push	r16
    3496:	1f 93       	push	r17
    3498:	cf 93       	push	r28
    349a:	df 93       	push	r29
    349c:	5c 01       	movw	r10, r24
    349e:	fc 01       	movw	r30, r24
    34a0:	01 90       	ld	r0, Z+
    34a2:	00 20       	and	r0, r0
    34a4:	e9 f7       	brne	.-6      	; 0x34a0 <_reply2ReturnCode+0x28>
    34a6:	31 97       	sbiw	r30, 0x01	; 1
    34a8:	6f 01       	movw	r12, r30
    34aa:	c8 1a       	sub	r12, r24
    34ac:	d9 0a       	sbc	r13, r25
    34ae:	5c 2c       	mov	r5, r12
    34b0:	0f 2e       	mov	r0, r31
    34b2:	fe e6       	ldi	r31, 0x6E	; 110
    34b4:	8f 2e       	mov	r8, r31
    34b6:	f6 e0       	ldi	r31, 0x06	; 6
    34b8:	9f 2e       	mov	r9, r31
    34ba:	f0 2d       	mov	r31, r0
    34bc:	e1 2c       	mov	r14, r1
    34be:	f1 2c       	mov	r15, r1
    34c0:	4c 2c       	mov	r4, r12
    34c2:	37 01       	movw	r6, r14
    34c4:	f4 01       	movw	r30, r8
    34c6:	01 81       	ldd	r16, Z+1	; 0x01
    34c8:	12 81       	ldd	r17, Z+2	; 0x02
    34ca:	e8 01       	movw	r28, r16
    34cc:	09 90       	ld	r0, Y+
    34ce:	00 20       	and	r0, r0
    34d0:	e9 f7       	brne	.-6      	; 0x34cc <_reply2ReturnCode+0x54>
    34d2:	21 97       	sbiw	r28, 0x01	; 1
    34d4:	c0 1b       	sub	r28, r16
    34d6:	d1 0b       	sbc	r29, r17
    34d8:	3c 2e       	mov	r3, r28
    34da:	f9 e0       	ldi	r31, 0x09	; 9
    34dc:	cf 16       	cp	r12, r31
    34de:	d1 04       	cpc	r13, r1
    34e0:	58 f0       	brcs	.+22     	; 0x34f8 <_reply2ReturnCode+0x80>
    34e2:	f4 01       	movw	r30, r8
    34e4:	20 80       	ld	r2, Z
    34e6:	fe e0       	ldi	r31, 0x0E	; 14
    34e8:	2f 12       	cpse	r2, r31
    34ea:	06 c0       	rjmp	.+12     	; 0x34f8 <_reply2ReturnCode+0x80>
    34ec:	b8 01       	movw	r22, r16
    34ee:	c5 01       	movw	r24, r10
    34f0:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <strcasestr>
    34f4:	89 2b       	or	r24, r25
    34f6:	09 f5       	brne	.+66     	; 0x353a <_reply2ReturnCode+0xc2>
    34f8:	44 2d       	mov	r20, r4
    34fa:	35 14       	cp	r3, r5
    34fc:	08 f4       	brcc	.+2      	; 0x3500 <_reply2ReturnCode+0x88>
    34fe:	4c 2f       	mov	r20, r28
    3500:	50 e0       	ldi	r21, 0x00	; 0
    3502:	b8 01       	movw	r22, r16
    3504:	c5 01       	movw	r24, r10
    3506:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <strncasecmp>
    350a:	89 2b       	or	r24, r25
    350c:	49 f4       	brne	.+18     	; 0x3520 <_reply2ReturnCode+0xa8>
    350e:	f3 01       	movw	r30, r6
    3510:	ee 0f       	add	r30, r30
    3512:	ff 1f       	adc	r31, r31
    3514:	e6 0d       	add	r30, r6
    3516:	f7 1d       	adc	r31, r7
    3518:	e2 59       	subi	r30, 0x92	; 146
    351a:	f9 4f       	sbci	r31, 0xF9	; 249
    351c:	20 80       	ld	r2, Z
    351e:	0d c0       	rjmp	.+26     	; 0x353a <_reply2ReturnCode+0xc2>
    3520:	8f ef       	ldi	r24, 0xFF	; 255
    3522:	e8 1a       	sub	r14, r24
    3524:	f8 0a       	sbc	r15, r24
    3526:	e3 e0       	ldi	r30, 0x03	; 3
    3528:	8e 0e       	add	r8, r30
    352a:	91 1c       	adc	r9, r1
    352c:	f1 e1       	ldi	r31, 0x11	; 17
    352e:	ef 16       	cp	r14, r31
    3530:	f1 04       	cpc	r15, r1
    3532:	39 f6       	brne	.-114    	; 0x34c2 <_reply2ReturnCode+0x4a>
    3534:	68 94       	set
    3536:	22 24       	eor	r2, r2
    3538:	24 f8       	bld	r2, 4
    353a:	82 2d       	mov	r24, r2
    353c:	df 91       	pop	r29
    353e:	cf 91       	pop	r28
    3540:	1f 91       	pop	r17
    3542:	0f 91       	pop	r16
    3544:	ff 90       	pop	r15
    3546:	ef 90       	pop	r14
    3548:	df 90       	pop	r13
    354a:	cf 90       	pop	r12
    354c:	bf 90       	pop	r11
    354e:	af 90       	pop	r10
    3550:	9f 90       	pop	r9
    3552:	8f 90       	pop	r8
    3554:	7f 90       	pop	r7
    3556:	6f 90       	pop	r6
    3558:	5f 90       	pop	r5
    355a:	4f 90       	pop	r4
    355c:	3f 90       	pop	r3
    355e:	2f 90       	pop	r2
    3560:	08 95       	ret

00003562 <_uploadMessageRc>:
    3562:	30 df       	rcall	.-416    	; 0x33c4 <_uploadMessage>
    3564:	89 cf       	rjmp	.-238    	; 0x3478 <_reply2ReturnCode>
    3566:	08 95       	ret

00003568 <lora_driver_flushBuffers>:
    3568:	80 91 f5 15 	lds	r24, 0x15F5	; 0x8015f5 <_serialReplyBufferHandle>
    356c:	90 91 f6 15 	lds	r25, 0x15F6	; 0x8015f6 <_serialReplyBufferHandle+0x1>
    3570:	0c 94 43 08 	jmp	0x1086	; 0x1086 <xStreamBufferReset>
    3574:	08 95       	ret

00003576 <lora_driver_initialise>:
    3576:	8f 92       	push	r8
    3578:	9f 92       	push	r9
    357a:	af 92       	push	r10
    357c:	cf 92       	push	r12
    357e:	ef 92       	push	r14
    3580:	0f 93       	push	r16
    3582:	1f 93       	push	r17
    3584:	cf 93       	push	r28
    3586:	c8 2f       	mov	r28, r24
    3588:	8b 01       	movw	r16, r22
    358a:	41 e0       	ldi	r20, 0x01	; 1
    358c:	60 e0       	ldi	r22, 0x00	; 0
    358e:	70 e0       	ldi	r23, 0x00	; 0
    3590:	88 ec       	ldi	r24, 0xC8	; 200
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	0e 94 11 08 	call	0x1022	; 0x1022 <xStreamBufferGenericCreate>
    3598:	90 93 f6 15 	sts	0x15F6, r25	; 0x8015f6 <_serialReplyBufferHandle+0x1>
    359c:	80 93 f5 15 	sts	0x15F5, r24	; 0x8015f5 <_serialReplyBufferHandle>
    35a0:	10 93 f4 15 	sts	0x15F4, r17	; 0x8015f4 <_downlinkMessageBuffer+0x1>
    35a4:	00 93 f3 15 	sts	0x15F3, r16	; 0x8015f3 <_downlinkMessageBuffer>
    35a8:	0f 2e       	mov	r0, r31
    35aa:	fc e9       	ldi	r31, 0x9C	; 156
    35ac:	8f 2e       	mov	r8, r31
    35ae:	f9 e1       	ldi	r31, 0x19	; 25
    35b0:	9f 2e       	mov	r9, r31
    35b2:	f0 2d       	mov	r31, r0
    35b4:	68 94       	set
    35b6:	aa 24       	eor	r10, r10
    35b8:	a6 f8       	bld	r10, 6
    35ba:	68 94       	set
    35bc:	cc 24       	eor	r12, r12
    35be:	c6 f8       	bld	r12, 6
    35c0:	e1 2c       	mov	r14, r1
    35c2:	00 e0       	ldi	r16, 0x00	; 0
    35c4:	23 e0       	ldi	r18, 0x03	; 3
    35c6:	40 e0       	ldi	r20, 0x00	; 0
    35c8:	51 ee       	ldi	r21, 0xE1	; 225
    35ca:	60 e0       	ldi	r22, 0x00	; 0
    35cc:	70 e0       	ldi	r23, 0x00	; 0
    35ce:	8c 2f       	mov	r24, r28
    35d0:	1e d3       	rcall	.+1596   	; 0x3c0e <serial_create>
    35d2:	90 93 f8 15 	sts	0x15F8, r25	; 0x8015f8 <_rn2483_serial+0x1>
    35d6:	80 93 f7 15 	sts	0x15F7, r24	; 0x8015f7 <_rn2483_serial>
    35da:	e7 e0       	ldi	r30, 0x07	; 7
    35dc:	f1 e0       	ldi	r31, 0x01	; 1
    35de:	80 81       	ld	r24, Z
    35e0:	80 61       	ori	r24, 0x10	; 16
    35e2:	80 83       	st	Z, r24
    35e4:	cf 91       	pop	r28
    35e6:	1f 91       	pop	r17
    35e8:	0f 91       	pop	r16
    35ea:	ef 90       	pop	r14
    35ec:	cf 90       	pop	r12
    35ee:	af 90       	pop	r10
    35f0:	9f 90       	pop	r9
    35f2:	8f 90       	pop	r8
    35f4:	08 95       	ret

000035f6 <lora_driver_resetRn2483>:
    35f6:	88 23       	and	r24, r24
    35f8:	31 f0       	breq	.+12     	; 0x3606 <lora_driver_resetRn2483+0x10>
    35fa:	e8 e0       	ldi	r30, 0x08	; 8
    35fc:	f1 e0       	ldi	r31, 0x01	; 1
    35fe:	80 81       	ld	r24, Z
    3600:	8f 7e       	andi	r24, 0xEF	; 239
    3602:	80 83       	st	Z, r24
    3604:	08 95       	ret
    3606:	e8 e0       	ldi	r30, 0x08	; 8
    3608:	f1 e0       	ldi	r31, 0x01	; 1
    360a:	80 81       	ld	r24, Z
    360c:	80 61       	ori	r24, 0x10	; 16
    360e:	80 83       	st	Z, r24
    3610:	08 95       	ret

00003612 <lora_driver_rn2483FactoryReset>:
    3612:	60 e0       	ldi	r22, 0x00	; 0
    3614:	70 e0       	ldi	r23, 0x00	; 0
    3616:	84 ef       	ldi	r24, 0xF4	; 244
    3618:	93 e0       	ldi	r25, 0x03	; 3
    361a:	d4 de       	rcall	.-600    	; 0x33c4 <_uploadMessage>
    361c:	ee e7       	ldi	r30, 0x7E	; 126
    361e:	f6 e1       	ldi	r31, 0x16	; 22
    3620:	01 90       	ld	r0, Z+
    3622:	00 20       	and	r0, r0
    3624:	e9 f7       	brne	.-6      	; 0x3620 <lora_driver_rn2483FactoryReset+0xe>
    3626:	31 97       	sbiw	r30, 0x01	; 1
    3628:	ee 57       	subi	r30, 0x7E	; 126
    362a:	f6 41       	sbci	r31, 0x16	; 22
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	75 97       	sbiw	r30, 0x15	; 21
    3630:	08 f0       	brcs	.+2      	; 0x3634 <lora_driver_rn2483FactoryReset+0x22>
    3632:	80 e0       	ldi	r24, 0x00	; 0
    3634:	08 95       	ret

00003636 <lora_driver_getRn2483Hweui>:
    3636:	cf 93       	push	r28
    3638:	df 93       	push	r29
    363a:	ec 01       	movw	r28, r24
    363c:	60 e0       	ldi	r22, 0x00	; 0
    363e:	70 e0       	ldi	r23, 0x00	; 0
    3640:	85 e0       	ldi	r24, 0x05	; 5
    3642:	94 e0       	ldi	r25, 0x04	; 4
    3644:	bf de       	rcall	.-642    	; 0x33c4 <_uploadMessage>
    3646:	ee e7       	ldi	r30, 0x7E	; 126
    3648:	f6 e1       	ldi	r31, 0x16	; 22
    364a:	01 90       	ld	r0, Z+
    364c:	00 20       	and	r0, r0
    364e:	e9 f7       	brne	.-6      	; 0x364a <lora_driver_getRn2483Hweui+0x14>
    3650:	ef 58       	subi	r30, 0x8F	; 143
    3652:	f6 41       	sbci	r31, 0x16	; 22
    3654:	39 f4       	brne	.+14     	; 0x3664 <lora_driver_getRn2483Hweui+0x2e>
    3656:	6e e7       	ldi	r22, 0x7E	; 126
    3658:	76 e1       	ldi	r23, 0x16	; 22
    365a:	ce 01       	movw	r24, r28
    365c:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <strcpy>
    3660:	80 e0       	ldi	r24, 0x00	; 0
    3662:	02 c0       	rjmp	.+4      	; 0x3668 <lora_driver_getRn2483Hweui+0x32>
    3664:	18 82       	st	Y, r1
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	df 91       	pop	r29
    366a:	cf 91       	pop	r28
    366c:	08 95       	ret

0000366e <lora_driver_setDeviceIdentifier>:
    366e:	fc 01       	movw	r30, r24
    3670:	01 90       	ld	r0, Z+
    3672:	00 20       	and	r0, r0
    3674:	e9 f7       	brne	.-6      	; 0x3670 <lora_driver_setDeviceIdentifier+0x2>
    3676:	9f 01       	movw	r18, r30
    3678:	21 51       	subi	r18, 0x11	; 17
    367a:	31 09       	sbc	r19, r1
    367c:	28 17       	cp	r18, r24
    367e:	39 07       	cpc	r19, r25
    3680:	29 f4       	brne	.+10     	; 0x368c <lora_driver_setDeviceIdentifier+0x1e>
    3682:	bc 01       	movw	r22, r24
    3684:	83 e3       	ldi	r24, 0x33	; 51
    3686:	94 e0       	ldi	r25, 0x04	; 4
    3688:	6c cf       	rjmp	.-296    	; 0x3562 <_uploadMessageRc>
    368a:	08 95       	ret
    368c:	89 e0       	ldi	r24, 0x09	; 9
    368e:	08 95       	ret

00003690 <lora_driver_setApplicationIdentifier>:
    3690:	fc 01       	movw	r30, r24
    3692:	01 90       	ld	r0, Z+
    3694:	00 20       	and	r0, r0
    3696:	e9 f7       	brne	.-6      	; 0x3692 <lora_driver_setApplicationIdentifier+0x2>
    3698:	9f 01       	movw	r18, r30
    369a:	21 51       	subi	r18, 0x11	; 17
    369c:	31 09       	sbc	r19, r1
    369e:	28 17       	cp	r18, r24
    36a0:	39 07       	cpc	r19, r25
    36a2:	29 f4       	brne	.+10     	; 0x36ae <lora_driver_setApplicationIdentifier+0x1e>
    36a4:	bc 01       	movw	r22, r24
    36a6:	82 e4       	ldi	r24, 0x42	; 66
    36a8:	94 e0       	ldi	r25, 0x04	; 4
    36aa:	5b cf       	rjmp	.-330    	; 0x3562 <_uploadMessageRc>
    36ac:	08 95       	ret
    36ae:	89 e0       	ldi	r24, 0x09	; 9
    36b0:	08 95       	ret

000036b2 <lora_driver_setApplicationKey>:
    36b2:	fc 01       	movw	r30, r24
    36b4:	01 90       	ld	r0, Z+
    36b6:	00 20       	and	r0, r0
    36b8:	e9 f7       	brne	.-6      	; 0x36b4 <lora_driver_setApplicationKey+0x2>
    36ba:	9f 01       	movw	r18, r30
    36bc:	21 52       	subi	r18, 0x21	; 33
    36be:	31 09       	sbc	r19, r1
    36c0:	28 17       	cp	r18, r24
    36c2:	39 07       	cpc	r19, r25
    36c4:	29 f4       	brne	.+10     	; 0x36d0 <lora_driver_setApplicationKey+0x1e>
    36c6:	bc 01       	movw	r22, r24
    36c8:	81 e5       	ldi	r24, 0x51	; 81
    36ca:	94 e0       	ldi	r25, 0x04	; 4
    36cc:	4a cf       	rjmp	.-364    	; 0x3562 <_uploadMessageRc>
    36ce:	08 95       	ret
    36d0:	89 e0       	ldi	r24, 0x09	; 9
    36d2:	08 95       	ret

000036d4 <lora_driver_saveMac>:
    36d4:	60 e0       	ldi	r22, 0x00	; 0
    36d6:	70 e0       	ldi	r23, 0x00	; 0
    36d8:	80 e9       	ldi	r24, 0x90	; 144
    36da:	94 e0       	ldi	r25, 0x04	; 4
    36dc:	42 cf       	rjmp	.-380    	; 0x3562 <_uploadMessageRc>
    36de:	08 95       	ret

000036e0 <lora_driver_join>:
    36e0:	0f 93       	push	r16
    36e2:	1f 93       	push	r17
    36e4:	e8 2f       	mov	r30, r24
    36e6:	f0 e0       	ldi	r31, 0x00	; 0
    36e8:	ee 0f       	add	r30, r30
    36ea:	ff 1f       	adc	r31, r31
    36ec:	e6 59       	subi	r30, 0x96	; 150
    36ee:	f9 4f       	sbci	r31, 0xF9	; 249
    36f0:	60 81       	ld	r22, Z
    36f2:	71 81       	ldd	r23, Z+1	; 0x01
    36f4:	89 e9       	ldi	r24, 0x99	; 153
    36f6:	94 e0       	ldi	r25, 0x04	; 4
    36f8:	34 df       	rcall	.-408    	; 0x3562 <_uploadMessageRc>
    36fa:	81 11       	cpse	r24, r1
    36fc:	14 c0       	rjmp	.+40     	; 0x3726 <lora_driver_join+0x46>
    36fe:	08 e2       	ldi	r16, 0x28	; 40
    3700:	15 e0       	ldi	r17, 0x05	; 5
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	4d e2       	ldi	r20, 0x2D	; 45
    3708:	50 e0       	ldi	r21, 0x00	; 0
    370a:	6e e7       	ldi	r22, 0x7E	; 126
    370c:	76 e1       	ldi	r23, 0x16	; 22
    370e:	80 91 f5 15 	lds	r24, 0x15F5	; 0x8015f5 <_serialReplyBufferHandle>
    3712:	90 91 f6 15 	lds	r25, 0x15F6	; 0x8015f6 <_serialReplyBufferHandle+0x1>
    3716:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <xStreamBufferReceive>
    371a:	88 23       	and	r24, r24
    371c:	21 f0       	breq	.+8      	; 0x3726 <lora_driver_join+0x46>
    371e:	8e e7       	ldi	r24, 0x7E	; 126
    3720:	96 e1       	ldi	r25, 0x16	; 22
    3722:	aa de       	rcall	.-684    	; 0x3478 <_reply2ReturnCode>
    3724:	03 c0       	rjmp	.+6      	; 0x372c <lora_driver_join+0x4c>
    3726:	8e e7       	ldi	r24, 0x7E	; 126
    3728:	96 e1       	ldi	r25, 0x16	; 22
    372a:	a6 de       	rcall	.-692    	; 0x3478 <_reply2ReturnCode>
    372c:	1f 91       	pop	r17
    372e:	0f 91       	pop	r16
    3730:	08 95       	ret

00003732 <lora_driver_sendUploadMessage>:
    3732:	0f 93       	push	r16
    3734:	1f 93       	push	r17
    3736:	cf 93       	push	r28
    3738:	df 93       	push	r29
    373a:	1f 92       	push	r1
    373c:	cd b7       	in	r28, 0x3d	; 61
    373e:	de b7       	in	r29, 0x3e	; 62
    3740:	db 01       	movw	r26, r22
    3742:	11 96       	adiw	r26, 0x01	; 1
    3744:	9c 91       	ld	r25, X
    3746:	11 97       	sbiw	r26, 0x01	; 1
    3748:	95 31       	cpi	r25, 0x15	; 21
    374a:	08 f0       	brcs	.+2      	; 0x374e <lora_driver_sendUploadMessage+0x1c>
    374c:	b4 c0       	rjmp	.+360    	; 0x38b6 <lora_driver_sendUploadMessage+0x184>
    374e:	99 23       	and	r25, r25
    3750:	81 f1       	breq	.+96     	; 0x37b2 <lora_driver_sendUploadMessage+0x80>
    3752:	60 e0       	ldi	r22, 0x00	; 0
    3754:	70 e0       	ldi	r23, 0x00	; 0
    3756:	27 2f       	mov	r18, r23
    3758:	30 e0       	ldi	r19, 0x00	; 0
    375a:	46 2f       	mov	r20, r22
    375c:	50 e0       	ldi	r21, 0x00	; 0
    375e:	fd 01       	movw	r30, r26
    3760:	e4 0f       	add	r30, r20
    3762:	f5 1f       	adc	r31, r21
    3764:	92 81       	ldd	r25, Z+2	; 0x02
    3766:	92 95       	swap	r25
    3768:	9f 70       	andi	r25, 0x0F	; 15
    376a:	9a 30       	cpi	r25, 0x0A	; 10
    376c:	10 f0       	brcs	.+4      	; 0x3772 <lora_driver_sendUploadMessage+0x40>
    376e:	99 5c       	subi	r25, 0xC9	; 201
    3770:	01 c0       	rjmp	.+2      	; 0x3774 <lora_driver_sendUploadMessage+0x42>
    3772:	90 5d       	subi	r25, 0xD0	; 208
    3774:	f9 01       	movw	r30, r18
    3776:	e1 5f       	subi	r30, 0xF1	; 241
    3778:	f9 4e       	sbci	r31, 0xE9	; 233
    377a:	90 83       	st	Z, r25
    377c:	2f 5f       	subi	r18, 0xFF	; 255
    377e:	3f 4f       	sbci	r19, 0xFF	; 255
    3780:	fd 01       	movw	r30, r26
    3782:	e4 0f       	add	r30, r20
    3784:	f5 1f       	adc	r31, r21
    3786:	92 81       	ldd	r25, Z+2	; 0x02
    3788:	9f 70       	andi	r25, 0x0F	; 15
    378a:	49 2f       	mov	r20, r25
    378c:	50 e0       	ldi	r21, 0x00	; 0
    378e:	4a 30       	cpi	r20, 0x0A	; 10
    3790:	51 05       	cpc	r21, r1
    3792:	14 f0       	brlt	.+4      	; 0x3798 <lora_driver_sendUploadMessage+0x66>
    3794:	99 5c       	subi	r25, 0xC9	; 201
    3796:	01 c0       	rjmp	.+2      	; 0x379a <lora_driver_sendUploadMessage+0x68>
    3798:	90 5d       	subi	r25, 0xD0	; 208
    379a:	f9 01       	movw	r30, r18
    379c:	e1 5f       	subi	r30, 0xF1	; 241
    379e:	f9 4e       	sbci	r31, 0xE9	; 233
    37a0:	90 83       	st	Z, r25
    37a2:	7e 5f       	subi	r23, 0xFE	; 254
    37a4:	6f 5f       	subi	r22, 0xFF	; 255
    37a6:	11 96       	adiw	r26, 0x01	; 1
    37a8:	9c 91       	ld	r25, X
    37aa:	11 97       	sbiw	r26, 0x01	; 1
    37ac:	69 17       	cp	r22, r25
    37ae:	98 f2       	brcs	.-90     	; 0x3756 <lora_driver_sendUploadMessage+0x24>
    37b0:	01 c0       	rjmp	.+2      	; 0x37b4 <lora_driver_sendUploadMessage+0x82>
    37b2:	70 e0       	ldi	r23, 0x00	; 0
    37b4:	e7 2f       	mov	r30, r23
    37b6:	f0 e0       	ldi	r31, 0x00	; 0
    37b8:	e1 5f       	subi	r30, 0xF1	; 241
    37ba:	f9 4e       	sbci	r31, 0xE9	; 233
    37bc:	10 82       	st	Z, r1
    37be:	4c 91       	ld	r20, X
    37c0:	81 11       	cpse	r24, r1
    37c2:	03 c0       	rjmp	.+6      	; 0x37ca <lora_driver_sendUploadMessage+0x98>
    37c4:	82 ea       	ldi	r24, 0xA2	; 162
    37c6:	94 e0       	ldi	r25, 0x04	; 4
    37c8:	02 c0       	rjmp	.+4      	; 0x37ce <lora_driver_sendUploadMessage+0x9c>
    37ca:	84 ea       	ldi	r24, 0xA4	; 164
    37cc:	94 e0       	ldi	r25, 0x04	; 4
    37ce:	2f e0       	ldi	r18, 0x0F	; 15
    37d0:	36 e1       	ldi	r19, 0x16	; 22
    37d2:	3f 93       	push	r19
    37d4:	2f 93       	push	r18
    37d6:	1f 92       	push	r1
    37d8:	4f 93       	push	r20
    37da:	9f 93       	push	r25
    37dc:	8f 93       	push	r24
    37de:	88 ea       	ldi	r24, 0xA8	; 168
    37e0:	94 e0       	ldi	r25, 0x04	; 4
    37e2:	9f 93       	push	r25
    37e4:	8f 93       	push	r24
    37e6:	81 e5       	ldi	r24, 0x51	; 81
    37e8:	96 e1       	ldi	r25, 0x16	; 22
    37ea:	9f 93       	push	r25
    37ec:	8f 93       	push	r24
    37ee:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <sprintf>
    37f2:	60 e0       	ldi	r22, 0x00	; 0
    37f4:	70 e0       	ldi	r23, 0x00	; 0
    37f6:	81 e5       	ldi	r24, 0x51	; 81
    37f8:	96 e1       	ldi	r25, 0x16	; 22
    37fa:	b3 de       	rcall	.-666    	; 0x3562 <_uploadMessageRc>
    37fc:	0f b6       	in	r0, 0x3f	; 63
    37fe:	f8 94       	cli
    3800:	de bf       	out	0x3e, r29	; 62
    3802:	0f be       	out	0x3f, r0	; 63
    3804:	cd bf       	out	0x3d, r28	; 61
    3806:	81 11       	cpse	r24, r1
    3808:	59 c0       	rjmp	.+178    	; 0x38bc <lora_driver_sendUploadMessage+0x18a>
    380a:	08 e2       	ldi	r16, 0x28	; 40
    380c:	15 e0       	ldi	r17, 0x05	; 5
    380e:	20 e0       	ldi	r18, 0x00	; 0
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	4d e2       	ldi	r20, 0x2D	; 45
    3814:	50 e0       	ldi	r21, 0x00	; 0
    3816:	6e e7       	ldi	r22, 0x7E	; 126
    3818:	76 e1       	ldi	r23, 0x16	; 22
    381a:	80 91 f5 15 	lds	r24, 0x15F5	; 0x8015f5 <_serialReplyBufferHandle>
    381e:	90 91 f6 15 	lds	r25, 0x15F6	; 0x8015f6 <_serialReplyBufferHandle+0x1>
    3822:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <xStreamBufferReceive>
    3826:	88 23       	and	r24, r24
    3828:	09 f4       	brne	.+2      	; 0x382c <lora_driver_sendUploadMessage+0xfa>
    382a:	47 c0       	rjmp	.+142    	; 0x38ba <lora_driver_sendUploadMessage+0x188>
    382c:	8e e7       	ldi	r24, 0x7E	; 126
    382e:	96 e1       	ldi	r25, 0x16	; 22
    3830:	23 de       	rcall	.-954    	; 0x3478 <_reply2ReturnCode>
    3832:	8e 30       	cpi	r24, 0x0E	; 14
    3834:	09 f0       	breq	.+2      	; 0x3838 <lora_driver_sendUploadMessage+0x106>
    3836:	42 c0       	rjmp	.+132    	; 0x38bc <lora_driver_sendUploadMessage+0x18a>
    3838:	87 e0       	ldi	r24, 0x07	; 7
    383a:	89 83       	std	Y+1, r24	; 0x01
    383c:	80 91 f3 15 	lds	r24, 0x15F3	; 0x8015f3 <_downlinkMessageBuffer>
    3840:	90 91 f4 15 	lds	r25, 0x15F4	; 0x8015f4 <_downlinkMessageBuffer+0x1>
    3844:	89 2b       	or	r24, r25
    3846:	a9 f1       	breq	.+106    	; 0x38b2 <lora_driver_sendUploadMessage+0x180>
    3848:	be 01       	movw	r22, r28
    384a:	6f 5f       	subi	r22, 0xFF	; 255
    384c:	7f 4f       	sbci	r23, 0xFF	; 255
    384e:	8e e7       	ldi	r24, 0x7E	; 126
    3850:	96 e1       	ldi	r25, 0x16	; 22
    3852:	68 d1       	rcall	.+720    	; 0x3b24 <decode_port_no>
    3854:	80 93 f9 15 	sts	0x15F9, r24	; 0x8015f9 <_downlinkPayload>
    3858:	e9 81       	ldd	r30, Y+1	; 0x01
    385a:	f0 e0       	ldi	r31, 0x00	; 0
    385c:	e2 58       	subi	r30, 0x82	; 130
    385e:	f9 4e       	sbci	r31, 0xE9	; 233
    3860:	df 01       	movw	r26, r30
    3862:	0d 90       	ld	r0, X+
    3864:	00 20       	and	r0, r0
    3866:	e9 f7       	brne	.-6      	; 0x3862 <lora_driver_sendUploadMessage+0x130>
    3868:	11 97       	sbiw	r26, 0x01	; 1
    386a:	ae 1b       	sub	r26, r30
    386c:	bf 0b       	sbc	r27, r31
    386e:	aa 23       	and	r26, r26
    3870:	91 f0       	breq	.+36     	; 0x3896 <lora_driver_sendUploadMessage+0x164>
    3872:	bb 27       	eor	r27, r27
    3874:	cd 01       	movw	r24, r26
    3876:	01 97       	sbiw	r24, 0x01	; 1
    3878:	9c 01       	movw	r18, r24
    387a:	12 f4       	brpl	.+4      	; 0x3880 <lora_driver_sendUploadMessage+0x14e>
    387c:	2f 5f       	subi	r18, 0xFF	; 255
    387e:	3f 4f       	sbci	r19, 0xFF	; 255
    3880:	35 95       	asr	r19
    3882:	27 95       	ror	r18
    3884:	20 93 fa 15 	sts	0x15FA, r18	; 0x8015fa <_downlinkPayload+0x1>
    3888:	af 01       	movw	r20, r30
    388a:	4f 5f       	subi	r20, 0xFF	; 255
    388c:	5f 4f       	sbci	r21, 0xFF	; 255
    388e:	64 e1       	ldi	r22, 0x14	; 20
    3890:	8b ef       	ldi	r24, 0xFB	; 251
    3892:	95 e1       	ldi	r25, 0x15	; 21
    3894:	73 d1       	rcall	.+742    	; 0x3b7c <decode_hexadecimal_string_bytes>
    3896:	01 e0       	ldi	r16, 0x01	; 1
    3898:	10 e0       	ldi	r17, 0x00	; 0
    389a:	20 e0       	ldi	r18, 0x00	; 0
    389c:	30 e0       	ldi	r19, 0x00	; 0
    389e:	46 e1       	ldi	r20, 0x16	; 22
    38a0:	50 e0       	ldi	r21, 0x00	; 0
    38a2:	69 ef       	ldi	r22, 0xF9	; 249
    38a4:	75 e1       	ldi	r23, 0x15	; 21
    38a6:	80 91 f3 15 	lds	r24, 0x15F3	; 0x8015f3 <_downlinkMessageBuffer>
    38aa:	90 91 f4 15 	lds	r25, 0x15F4	; 0x8015f4 <_downlinkMessageBuffer+0x1>
    38ae:	0e 94 73 08 	call	0x10e6	; 0x10e6 <xStreamBufferSend>
    38b2:	8e e0       	ldi	r24, 0x0E	; 14
    38b4:	03 c0       	rjmp	.+6      	; 0x38bc <lora_driver_sendUploadMessage+0x18a>
    38b6:	84 e1       	ldi	r24, 0x14	; 20
    38b8:	01 c0       	rjmp	.+2      	; 0x38bc <lora_driver_sendUploadMessage+0x18a>
    38ba:	80 e0       	ldi	r24, 0x00	; 0
    38bc:	0f 90       	pop	r0
    38be:	df 91       	pop	r29
    38c0:	cf 91       	pop	r28
    38c2:	1f 91       	pop	r17
    38c4:	0f 91       	pop	r16
    38c6:	08 95       	ret

000038c8 <lora_driver_setAdaptiveDataRate>:
    38c8:	81 30       	cpi	r24, 0x01	; 1
    38ca:	19 f0       	breq	.+6      	; 0x38d2 <lora_driver_setAdaptiveDataRate+0xa>
    38cc:	68 eb       	ldi	r22, 0xB8	; 184
    38ce:	74 e0       	ldi	r23, 0x04	; 4
    38d0:	02 c0       	rjmp	.+4      	; 0x38d6 <lora_driver_setAdaptiveDataRate+0xe>
    38d2:	61 e9       	ldi	r22, 0x91	; 145
    38d4:	75 e0       	ldi	r23, 0x05	; 5
    38d6:	8c eb       	ldi	r24, 0xBC	; 188
    38d8:	94 e0       	ldi	r25, 0x04	; 4
    38da:	43 ce       	rjmp	.-890    	; 0x3562 <_uploadMessageRc>
    38dc:	08 95       	ret

000038de <lora_driver_setReceiveDelay>:
    38de:	9f 93       	push	r25
    38e0:	8f 93       	push	r24
    38e2:	8d ee       	ldi	r24, 0xED	; 237
    38e4:	94 e0       	ldi	r25, 0x04	; 4
    38e6:	9f 93       	push	r25
    38e8:	8f 93       	push	r24
    38ea:	81 e5       	ldi	r24, 0x51	; 81
    38ec:	96 e1       	ldi	r25, 0x16	; 22
    38ee:	9f 93       	push	r25
    38f0:	8f 93       	push	r24
    38f2:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <sprintf>
    38f6:	60 e0       	ldi	r22, 0x00	; 0
    38f8:	70 e0       	ldi	r23, 0x00	; 0
    38fa:	81 e5       	ldi	r24, 0x51	; 81
    38fc:	96 e1       	ldi	r25, 0x16	; 22
    38fe:	31 de       	rcall	.-926    	; 0x3562 <_uploadMessageRc>
    3900:	0f 90       	pop	r0
    3902:	0f 90       	pop	r0
    3904:	0f 90       	pop	r0
    3906:	0f 90       	pop	r0
    3908:	0f 90       	pop	r0
    390a:	0f 90       	pop	r0
    390c:	08 95       	ret

0000390e <lora_driver_configureToEu868>:
    390e:	2f 92       	push	r2
    3910:	3f 92       	push	r3
    3912:	4f 92       	push	r4
    3914:	5f 92       	push	r5
    3916:	6f 92       	push	r6
    3918:	7f 92       	push	r7
    391a:	8f 92       	push	r8
    391c:	9f 92       	push	r9
    391e:	af 92       	push	r10
    3920:	bf 92       	push	r11
    3922:	cf 92       	push	r12
    3924:	df 92       	push	r13
    3926:	ef 92       	push	r14
    3928:	ff 92       	push	r15
    392a:	0f 93       	push	r16
    392c:	1f 93       	push	r17
    392e:	cf 93       	push	r28
    3930:	df 93       	push	r29
    3932:	cd b7       	in	r28, 0x3d	; 61
    3934:	de b7       	in	r29, 0x3e	; 62
    3936:	a0 97       	sbiw	r28, 0x20	; 32
    3938:	0f b6       	in	r0, 0x3f	; 63
    393a:	f8 94       	cli
    393c:	de bf       	out	0x3e, r29	; 62
    393e:	0f be       	out	0x3f, r0	; 63
    3940:	cd bf       	out	0x3d, r28	; 61
    3942:	6a e1       	ldi	r22, 0x1A	; 26
    3944:	75 e0       	ldi	r23, 0x05	; 5
    3946:	86 e2       	ldi	r24, 0x26	; 38
    3948:	95 e0       	ldi	r25, 0x05	; 5
    394a:	3c dd       	rcall	.-1416   	; 0x33c4 <_uploadMessage>
    394c:	95 dd       	rcall	.-1238   	; 0x3478 <_reply2ReturnCode>
    394e:	81 11       	cpse	r24, r1
    3950:	a3 c0       	rjmp	.+326    	; 0x3a98 <lora_driver_configureToEu868+0x18a>
    3952:	80 e2       	ldi	r24, 0x20	; 32
    3954:	ee e1       	ldi	r30, 0x1E	; 30
    3956:	f2 e0       	ldi	r31, 0x02	; 2
    3958:	de 01       	movw	r26, r28
    395a:	11 96       	adiw	r26, 0x01	; 1
    395c:	01 90       	ld	r0, Z+
    395e:	0d 92       	st	X+, r0
    3960:	8a 95       	dec	r24
    3962:	e1 f7       	brne	.-8      	; 0x395c <lora_driver_configureToEu868+0x4e>
    3964:	9e 01       	movw	r18, r28
    3966:	2f 5f       	subi	r18, 0xFF	; 255
    3968:	3f 4f       	sbci	r19, 0xFF	; 255
    396a:	69 01       	movw	r12, r18
    396c:	e1 2c       	mov	r14, r1
    396e:	f1 2c       	mov	r15, r1
    3970:	0f 2e       	mov	r0, r31
    3972:	f2 e3       	ldi	r31, 0x32	; 50
    3974:	af 2e       	mov	r10, r31
    3976:	f5 e0       	ldi	r31, 0x05	; 5
    3978:	bf 2e       	mov	r11, r31
    397a:	f0 2d       	mov	r31, r0
    397c:	01 e5       	ldi	r16, 0x51	; 81
    397e:	16 e1       	ldi	r17, 0x16	; 22
    3980:	0f 2e       	mov	r0, r31
    3982:	fb e4       	ldi	r31, 0x4B	; 75
    3984:	4f 2e       	mov	r4, r31
    3986:	f5 e0       	ldi	r31, 0x05	; 5
    3988:	5f 2e       	mov	r5, r31
    398a:	f0 2d       	mov	r31, r0
    398c:	0f 2e       	mov	r0, r31
    398e:	f2 e6       	ldi	r31, 0x62	; 98
    3990:	8f 2e       	mov	r8, r31
    3992:	f5 e0       	ldi	r31, 0x05	; 5
    3994:	9f 2e       	mov	r9, r31
    3996:	f0 2d       	mov	r31, r0
    3998:	0f 2e       	mov	r0, r31
    399a:	fc e7       	ldi	r31, 0x7C	; 124
    399c:	6f 2e       	mov	r6, r31
    399e:	f5 e0       	ldi	r31, 0x05	; 5
    39a0:	7f 2e       	mov	r7, r31
    39a2:	f0 2d       	mov	r31, r0
    39a4:	3e 2c       	mov	r3, r14
    39a6:	2f 2c       	mov	r2, r15
    39a8:	ff 92       	push	r15
    39aa:	ef 92       	push	r14
    39ac:	bf 92       	push	r11
    39ae:	af 92       	push	r10
    39b0:	1f 93       	push	r17
    39b2:	0f 93       	push	r16
    39b4:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <sprintf>
    39b8:	60 e0       	ldi	r22, 0x00	; 0
    39ba:	70 e0       	ldi	r23, 0x00	; 0
    39bc:	c8 01       	movw	r24, r16
    39be:	02 dd       	rcall	.-1532   	; 0x33c4 <_uploadMessage>
    39c0:	5b dd       	rcall	.-1354   	; 0x3478 <_reply2ReturnCode>
    39c2:	0f 90       	pop	r0
    39c4:	0f 90       	pop	r0
    39c6:	0f 90       	pop	r0
    39c8:	0f 90       	pop	r0
    39ca:	0f 90       	pop	r0
    39cc:	0f 90       	pop	r0
    39ce:	81 11       	cpse	r24, r1
    39d0:	63 c0       	rjmp	.+198    	; 0x3a98 <lora_driver_configureToEu868+0x18a>
    39d2:	32 e0       	ldi	r19, 0x02	; 2
    39d4:	3e 15       	cp	r19, r14
    39d6:	e8 f4       	brcc	.+58     	; 0x3a12 <lora_driver_configureToEu868+0x104>
    39d8:	f6 01       	movw	r30, r12
    39da:	83 81       	ldd	r24, Z+3	; 0x03
    39dc:	8f 93       	push	r24
    39de:	82 81       	ldd	r24, Z+2	; 0x02
    39e0:	8f 93       	push	r24
    39e2:	81 81       	ldd	r24, Z+1	; 0x01
    39e4:	8f 93       	push	r24
    39e6:	80 81       	ld	r24, Z
    39e8:	8f 93       	push	r24
    39ea:	ff 92       	push	r15
    39ec:	ef 92       	push	r14
    39ee:	5f 92       	push	r5
    39f0:	4f 92       	push	r4
    39f2:	1f 93       	push	r17
    39f4:	0f 93       	push	r16
    39f6:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <sprintf>
    39fa:	60 e0       	ldi	r22, 0x00	; 0
    39fc:	70 e0       	ldi	r23, 0x00	; 0
    39fe:	c8 01       	movw	r24, r16
    3a00:	e1 dc       	rcall	.-1598   	; 0x33c4 <_uploadMessage>
    3a02:	3a dd       	rcall	.-1420   	; 0x3478 <_reply2ReturnCode>
    3a04:	0f b6       	in	r0, 0x3f	; 63
    3a06:	f8 94       	cli
    3a08:	de bf       	out	0x3e, r29	; 62
    3a0a:	0f be       	out	0x3f, r0	; 63
    3a0c:	cd bf       	out	0x3d, r28	; 61
    3a0e:	81 11       	cpse	r24, r1
    3a10:	43 c0       	rjmp	.+134    	; 0x3a98 <lora_driver_configureToEu868+0x18a>
    3a12:	2f 92       	push	r2
    3a14:	3f 92       	push	r3
    3a16:	9f 92       	push	r9
    3a18:	8f 92       	push	r8
    3a1a:	1f 93       	push	r17
    3a1c:	0f 93       	push	r16
    3a1e:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <sprintf>
    3a22:	60 e0       	ldi	r22, 0x00	; 0
    3a24:	70 e0       	ldi	r23, 0x00	; 0
    3a26:	c8 01       	movw	r24, r16
    3a28:	cd dc       	rcall	.-1638   	; 0x33c4 <_uploadMessage>
    3a2a:	26 dd       	rcall	.-1460   	; 0x3478 <_reply2ReturnCode>
    3a2c:	0f 90       	pop	r0
    3a2e:	0f 90       	pop	r0
    3a30:	0f 90       	pop	r0
    3a32:	0f 90       	pop	r0
    3a34:	0f 90       	pop	r0
    3a36:	0f 90       	pop	r0
    3a38:	81 11       	cpse	r24, r1
    3a3a:	2e c0       	rjmp	.+92     	; 0x3a98 <lora_driver_configureToEu868+0x18a>
    3a3c:	2f 92       	push	r2
    3a3e:	3f 92       	push	r3
    3a40:	7f 92       	push	r7
    3a42:	6f 92       	push	r6
    3a44:	1f 93       	push	r17
    3a46:	0f 93       	push	r16
    3a48:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <sprintf>
    3a4c:	60 e0       	ldi	r22, 0x00	; 0
    3a4e:	70 e0       	ldi	r23, 0x00	; 0
    3a50:	c8 01       	movw	r24, r16
    3a52:	b8 dc       	rcall	.-1680   	; 0x33c4 <_uploadMessage>
    3a54:	11 dd       	rcall	.-1502   	; 0x3478 <_reply2ReturnCode>
    3a56:	0f 90       	pop	r0
    3a58:	0f 90       	pop	r0
    3a5a:	0f 90       	pop	r0
    3a5c:	0f 90       	pop	r0
    3a5e:	0f 90       	pop	r0
    3a60:	0f 90       	pop	r0
    3a62:	81 11       	cpse	r24, r1
    3a64:	19 c0       	rjmp	.+50     	; 0x3a98 <lora_driver_configureToEu868+0x18a>
    3a66:	3f ef       	ldi	r19, 0xFF	; 255
    3a68:	e3 1a       	sub	r14, r19
    3a6a:	f3 0a       	sbc	r15, r19
    3a6c:	84 e0       	ldi	r24, 0x04	; 4
    3a6e:	c8 0e       	add	r12, r24
    3a70:	d1 1c       	adc	r13, r1
    3a72:	98 e0       	ldi	r25, 0x08	; 8
    3a74:	e9 16       	cp	r14, r25
    3a76:	f1 04       	cpc	r15, r1
    3a78:	09 f0       	breq	.+2      	; 0x3a7c <lora_driver_configureToEu868+0x16e>
    3a7a:	94 cf       	rjmp	.-216    	; 0x39a4 <lora_driver_configureToEu868+0x96>
    3a7c:	60 e0       	ldi	r22, 0x00	; 0
    3a7e:	70 e0       	ldi	r23, 0x00	; 0
    3a80:	84 e9       	ldi	r24, 0x94	; 148
    3a82:	95 e0       	ldi	r25, 0x05	; 5
    3a84:	9f dc       	rcall	.-1730   	; 0x33c4 <_uploadMessage>
    3a86:	f8 dc       	rcall	.-1552   	; 0x3478 <_reply2ReturnCode>
    3a88:	81 11       	cpse	r24, r1
    3a8a:	06 c0       	rjmp	.+12     	; 0x3a98 <lora_driver_configureToEu868+0x18a>
    3a8c:	60 e0       	ldi	r22, 0x00	; 0
    3a8e:	70 e0       	ldi	r23, 0x00	; 0
    3a90:	85 ea       	ldi	r24, 0xA5	; 165
    3a92:	95 e0       	ldi	r25, 0x05	; 5
    3a94:	97 dc       	rcall	.-1746   	; 0x33c4 <_uploadMessage>
    3a96:	f0 dc       	rcall	.-1568   	; 0x3478 <_reply2ReturnCode>
    3a98:	a0 96       	adiw	r28, 0x20	; 32
    3a9a:	0f b6       	in	r0, 0x3f	; 63
    3a9c:	f8 94       	cli
    3a9e:	de bf       	out	0x3e, r29	; 62
    3aa0:	0f be       	out	0x3f, r0	; 63
    3aa2:	cd bf       	out	0x3d, r28	; 61
    3aa4:	df 91       	pop	r29
    3aa6:	cf 91       	pop	r28
    3aa8:	1f 91       	pop	r17
    3aaa:	0f 91       	pop	r16
    3aac:	ff 90       	pop	r15
    3aae:	ef 90       	pop	r14
    3ab0:	df 90       	pop	r13
    3ab2:	cf 90       	pop	r12
    3ab4:	bf 90       	pop	r11
    3ab6:	af 90       	pop	r10
    3ab8:	9f 90       	pop	r9
    3aba:	8f 90       	pop	r8
    3abc:	7f 90       	pop	r7
    3abe:	6f 90       	pop	r6
    3ac0:	5f 90       	pop	r5
    3ac2:	4f 90       	pop	r4
    3ac4:	3f 90       	pop	r3
    3ac6:	2f 90       	pop	r2
    3ac8:	08 95       	ret

00003aca <lora_driver_setOtaaIdentity>:
    3aca:	ef 92       	push	r14
    3acc:	ff 92       	push	r15
    3ace:	0f 93       	push	r16
    3ad0:	1f 93       	push	r17
    3ad2:	cf 93       	push	r28
    3ad4:	df 93       	push	r29
    3ad6:	ec 01       	movw	r28, r24
    3ad8:	8b 01       	movw	r16, r22
    3ada:	7a 01       	movw	r14, r20
    3adc:	81 e0       	ldi	r24, 0x01	; 1
    3ade:	f4 de       	rcall	.-536    	; 0x38c8 <lora_driver_setAdaptiveDataRate>
    3ae0:	81 11       	cpse	r24, r1
    3ae2:	0d c0       	rjmp	.+26     	; 0x3afe <lora_driver_setOtaaIdentity+0x34>
    3ae4:	ce 01       	movw	r24, r28
    3ae6:	d4 dd       	rcall	.-1112   	; 0x3690 <lora_driver_setApplicationIdentifier>
    3ae8:	81 11       	cpse	r24, r1
    3aea:	09 c0       	rjmp	.+18     	; 0x3afe <lora_driver_setOtaaIdentity+0x34>
    3aec:	c8 01       	movw	r24, r16
    3aee:	e1 dd       	rcall	.-1086   	; 0x36b2 <lora_driver_setApplicationKey>
    3af0:	81 11       	cpse	r24, r1
    3af2:	05 c0       	rjmp	.+10     	; 0x3afe <lora_driver_setOtaaIdentity+0x34>
    3af4:	c7 01       	movw	r24, r14
    3af6:	bb dd       	rcall	.-1162   	; 0x366e <lora_driver_setDeviceIdentifier>
    3af8:	81 11       	cpse	r24, r1
    3afa:	01 c0       	rjmp	.+2      	; 0x3afe <lora_driver_setOtaaIdentity+0x34>
    3afc:	eb dd       	rcall	.-1066   	; 0x36d4 <lora_driver_saveMac>
    3afe:	df 91       	pop	r29
    3b00:	cf 91       	pop	r28
    3b02:	1f 91       	pop	r17
    3b04:	0f 91       	pop	r16
    3b06:	ff 90       	pop	r15
    3b08:	ef 90       	pop	r14
    3b0a:	08 95       	ret

00003b0c <lora_driver_mapReturnCodeToText>:
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	fc 01       	movw	r30, r24
    3b10:	ee 0f       	add	r30, r30
    3b12:	ff 1f       	adc	r31, r31
    3b14:	8e 0f       	add	r24, r30
    3b16:	9f 1f       	adc	r25, r31
    3b18:	fc 01       	movw	r30, r24
    3b1a:	e2 59       	subi	r30, 0x92	; 146
    3b1c:	f9 4f       	sbci	r31, 0xF9	; 249
    3b1e:	81 81       	ldd	r24, Z+1	; 0x01
    3b20:	92 81       	ldd	r25, Z+2	; 0x02
    3b22:	08 95       	ret

00003b24 <decode_port_no>:
    3b24:	dc 01       	movw	r26, r24
    3b26:	00 97       	sbiw	r24, 0x00	; 0
    3b28:	29 f1       	breq	.+74     	; 0x3b74 <decode_port_no+0x50>
    3b2a:	fb 01       	movw	r30, r22
    3b2c:	20 81       	ld	r18, Z
    3b2e:	fc 01       	movw	r30, r24
    3b30:	01 90       	ld	r0, Z+
    3b32:	00 20       	and	r0, r0
    3b34:	e9 f7       	brne	.-6      	; 0x3b30 <decode_port_no+0xc>
    3b36:	31 97       	sbiw	r30, 0x01	; 1
    3b38:	e8 1b       	sub	r30, r24
    3b3a:	f9 0b       	sbc	r31, r25
    3b3c:	82 2f       	mov	r24, r18
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	e8 17       	cp	r30, r24
    3b42:	f9 07       	cpc	r31, r25
    3b44:	c8 f0       	brcs	.+50     	; 0x3b78 <decode_port_no+0x54>
    3b46:	80 e0       	ldi	r24, 0x00	; 0
    3b48:	08 c0       	rjmp	.+16     	; 0x3b5a <decode_port_no+0x36>
    3b4a:	88 0f       	add	r24, r24
    3b4c:	38 2f       	mov	r19, r24
    3b4e:	33 0f       	add	r19, r19
    3b50:	33 0f       	add	r19, r19
    3b52:	83 0f       	add	r24, r19
    3b54:	80 53       	subi	r24, 0x30	; 48
    3b56:	89 0f       	add	r24, r25
    3b58:	2f 5f       	subi	r18, 0xFF	; 255
    3b5a:	fd 01       	movw	r30, r26
    3b5c:	e2 0f       	add	r30, r18
    3b5e:	f1 1d       	adc	r31, r1
    3b60:	90 81       	ld	r25, Z
    3b62:	30 ed       	ldi	r19, 0xD0	; 208
    3b64:	39 0f       	add	r19, r25
    3b66:	3a 30       	cpi	r19, 0x0A	; 10
    3b68:	10 f4       	brcc	.+4      	; 0x3b6e <decode_port_no+0x4a>
    3b6a:	91 11       	cpse	r25, r1
    3b6c:	ee cf       	rjmp	.-36     	; 0x3b4a <decode_port_no+0x26>
    3b6e:	fb 01       	movw	r30, r22
    3b70:	20 83       	st	Z, r18
    3b72:	08 95       	ret
    3b74:	80 e0       	ldi	r24, 0x00	; 0
    3b76:	08 95       	ret
    3b78:	80 e0       	ldi	r24, 0x00	; 0
    3b7a:	08 95       	ret

00003b7c <decode_hexadecimal_string_bytes>:
    3b7c:	0f 93       	push	r16
    3b7e:	1f 93       	push	r17
    3b80:	cf 93       	push	r28
    3b82:	df 93       	push	r29
    3b84:	dc 01       	movw	r26, r24
    3b86:	ea 01       	movw	r28, r20
    3b88:	20 97       	sbiw	r28, 0x00	; 0
    3b8a:	e1 f1       	breq	.+120    	; 0x3c04 <decode_hexadecimal_string_bytes+0x88>
    3b8c:	fa 01       	movw	r30, r20
    3b8e:	01 90       	ld	r0, Z+
    3b90:	00 20       	and	r0, r0
    3b92:	e9 f7       	brne	.-6      	; 0x3b8e <decode_hexadecimal_string_bytes+0x12>
    3b94:	31 97       	sbiw	r30, 0x01	; 1
    3b96:	e4 1b       	sub	r30, r20
    3b98:	f5 0b       	sbc	r31, r21
    3b9a:	32 97       	sbiw	r30, 0x02	; 2
    3b9c:	10 f5       	brcc	.+68     	; 0x3be2 <decode_hexadecimal_string_bytes+0x66>
    3b9e:	32 c0       	rjmp	.+100    	; 0x3c04 <decode_hexadecimal_string_bytes+0x88>
    3ba0:	8d 01       	movw	r16, r26
    3ba2:	04 0f       	add	r16, r20
    3ba4:	15 1f       	adc	r17, r21
    3ba6:	30 e0       	ldi	r19, 0x00	; 0
    3ba8:	ae 01       	movw	r20, r28
    3baa:	42 0f       	add	r20, r18
    3bac:	53 1f       	adc	r21, r19
    3bae:	fa 01       	movw	r30, r20
    3bb0:	90 81       	ld	r25, Z
    3bb2:	91 34       	cpi	r25, 0x41	; 65
    3bb4:	28 f0       	brcs	.+10     	; 0x3bc0 <decode_hexadecimal_string_bytes+0x44>
    3bb6:	97 53       	subi	r25, 0x37	; 55
    3bb8:	59 2f       	mov	r21, r25
    3bba:	52 95       	swap	r21
    3bbc:	50 7f       	andi	r21, 0xF0	; 240
    3bbe:	03 c0       	rjmp	.+6      	; 0x3bc6 <decode_hexadecimal_string_bytes+0x4a>
    3bc0:	59 2f       	mov	r21, r25
    3bc2:	52 95       	swap	r21
    3bc4:	50 7f       	andi	r21, 0xF0	; 240
    3bc6:	2c 0f       	add	r18, r28
    3bc8:	3d 1f       	adc	r19, r29
    3bca:	f9 01       	movw	r30, r18
    3bcc:	91 81       	ldd	r25, Z+1	; 0x01
    3bce:	91 34       	cpi	r25, 0x41	; 65
    3bd0:	10 f0       	brcs	.+4      	; 0x3bd6 <decode_hexadecimal_string_bytes+0x5a>
    3bd2:	97 53       	subi	r25, 0x37	; 55
    3bd4:	01 c0       	rjmp	.+2      	; 0x3bd8 <decode_hexadecimal_string_bytes+0x5c>
    3bd6:	90 53       	subi	r25, 0x30	; 48
    3bd8:	95 0f       	add	r25, r21
    3bda:	f8 01       	movw	r30, r16
    3bdc:	90 83       	st	Z, r25
    3bde:	8f 5f       	subi	r24, 0xFF	; 255
    3be0:	01 c0       	rjmp	.+2      	; 0x3be4 <decode_hexadecimal_string_bytes+0x68>
    3be2:	80 e0       	ldi	r24, 0x00	; 0
    3be4:	28 2f       	mov	r18, r24
    3be6:	22 0f       	add	r18, r18
    3be8:	48 2f       	mov	r20, r24
    3bea:	50 e0       	ldi	r21, 0x00	; 0
    3bec:	fe 01       	movw	r30, r28
    3bee:	01 90       	ld	r0, Z+
    3bf0:	00 20       	and	r0, r0
    3bf2:	e9 f7       	brne	.-6      	; 0x3bee <decode_hexadecimal_string_bytes+0x72>
    3bf4:	31 97       	sbiw	r30, 0x01	; 1
    3bf6:	ec 1b       	sub	r30, r28
    3bf8:	fd 0b       	sbc	r31, r29
    3bfa:	4e 17       	cp	r20, r30
    3bfc:	5f 07       	cpc	r21, r31
    3bfe:	10 f4       	brcc	.+4      	; 0x3c04 <decode_hexadecimal_string_bytes+0x88>
    3c00:	86 13       	cpse	r24, r22
    3c02:	ce cf       	rjmp	.-100    	; 0x3ba0 <decode_hexadecimal_string_bytes+0x24>
    3c04:	df 91       	pop	r29
    3c06:	cf 91       	pop	r28
    3c08:	1f 91       	pop	r17
    3c0a:	0f 91       	pop	r16
    3c0c:	08 95       	ret

00003c0e <serial_create>:
    3c0e:	2f 92       	push	r2
    3c10:	3f 92       	push	r3
    3c12:	4f 92       	push	r4
    3c14:	5f 92       	push	r5
    3c16:	6f 92       	push	r6
    3c18:	7f 92       	push	r7
    3c1a:	8f 92       	push	r8
    3c1c:	9f 92       	push	r9
    3c1e:	af 92       	push	r10
    3c20:	cf 92       	push	r12
    3c22:	ef 92       	push	r14
    3c24:	ff 92       	push	r15
    3c26:	0f 93       	push	r16
    3c28:	1f 93       	push	r17
    3c2a:	cf 93       	push	r28
    3c2c:	df 93       	push	r29
    3c2e:	cd b7       	in	r28, 0x3d	; 61
    3c30:	de b7       	in	r29, 0x3e	; 62
    3c32:	f8 2e       	mov	r15, r24
    3c34:	2a 01       	movw	r4, r20
    3c36:	3b 01       	movw	r6, r22
    3c38:	88 e0       	ldi	r24, 0x08	; 8
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	60 d7       	rcall	.+3776   	; 0x4afe <malloc>
    3c3e:	8c 01       	movw	r16, r24
    3c40:	8f 2d       	mov	r24, r15
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	fc 01       	movw	r30, r24
    3c46:	ee 0f       	add	r30, r30
    3c48:	ff 1f       	adc	r31, r31
    3c4a:	e5 55       	subi	r30, 0x55	; 85
    3c4c:	f9 4e       	sbci	r31, 0xE9	; 233
    3c4e:	11 83       	std	Z+1, r17	; 0x01
    3c50:	00 83       	st	Z, r16
    3c52:	01 15       	cp	r16, r1
    3c54:	11 05       	cpc	r17, r1
    3c56:	09 f4       	brne	.+2      	; 0x3c5a <serial_create+0x4c>
    3c58:	64 c0       	rjmp	.+200    	; 0x3d22 <serial_create+0x114>
    3c5a:	88 0f       	add	r24, r24
    3c5c:	99 1f       	adc	r25, r25
    3c5e:	fc 01       	movw	r30, r24
    3c60:	e9 5f       	subi	r30, 0xF9	; 249
    3c62:	fd 4f       	sbci	r31, 0xFD	; 253
    3c64:	80 81       	ld	r24, Z
    3c66:	91 81       	ldd	r25, Z+1	; 0x01
    3c68:	d8 01       	movw	r26, r16
    3c6a:	8d 93       	st	X+, r24
    3c6c:	9c 93       	st	X, r25
    3c6e:	8c 2d       	mov	r24, r12
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	88 0f       	add	r24, r24
    3c74:	99 1f       	adc	r25, r25
    3c76:	88 0f       	add	r24, r24
    3c78:	99 1f       	adc	r25, r25
    3c7a:	41 d7       	rcall	.+3714   	; 0x4afe <malloc>
    3c7c:	1c 01       	movw	r2, r24
    3c7e:	86 e0       	ldi	r24, 0x06	; 6
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	3d d7       	rcall	.+3706   	; 0x4afe <malloc>
    3c84:	7c 01       	movw	r14, r24
    3c86:	4c 2d       	mov	r20, r12
    3c88:	b1 01       	movw	r22, r2
    3c8a:	78 d5       	rcall	.+2800   	; 0x477c <fifo_init>
    3c8c:	f8 01       	movw	r30, r16
    3c8e:	f5 82       	std	Z+5, r15	; 0x05
    3c90:	e4 82       	std	Z+4, r14	; 0x04
    3c92:	8a 2d       	mov	r24, r10
    3c94:	90 e0       	ldi	r25, 0x00	; 0
    3c96:	88 0f       	add	r24, r24
    3c98:	99 1f       	adc	r25, r25
    3c9a:	88 0f       	add	r24, r24
    3c9c:	99 1f       	adc	r25, r25
    3c9e:	2f d7       	rcall	.+3678   	; 0x4afe <malloc>
    3ca0:	1c 01       	movw	r2, r24
    3ca2:	86 e0       	ldi	r24, 0x06	; 6
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	2b d7       	rcall	.+3670   	; 0x4afe <malloc>
    3ca8:	7c 01       	movw	r14, r24
    3caa:	4a 2d       	mov	r20, r10
    3cac:	b1 01       	movw	r22, r2
    3cae:	66 d5       	rcall	.+2764   	; 0x477c <fifo_init>
    3cb0:	d8 01       	movw	r26, r16
    3cb2:	13 96       	adiw	r26, 0x03	; 3
    3cb4:	fc 92       	st	X, r15
    3cb6:	ee 92       	st	-X, r14
    3cb8:	12 97       	sbiw	r26, 0x02	; 2
    3cba:	17 96       	adiw	r26, 0x07	; 7
    3cbc:	9c 92       	st	X, r9
    3cbe:	8e 92       	st	-X, r8
    3cc0:	16 97       	sbiw	r26, 0x06	; 6
    3cc2:	ff b6       	in	r15, 0x3f	; 63
    3cc4:	f8 94       	cli
    3cc6:	ed 91       	ld	r30, X+
    3cc8:	fc 91       	ld	r31, X
    3cca:	11 97       	sbiw	r26, 0x01	; 1
    3ccc:	36 97       	sbiw	r30, 0x06	; 6
    3cce:	80 81       	ld	r24, Z
    3cd0:	82 60       	ori	r24, 0x02	; 2
    3cd2:	80 83       	st	Z, r24
    3cd4:	8d 90       	ld	r8, X+
    3cd6:	9c 90       	ld	r9, X
    3cd8:	c3 01       	movw	r24, r6
    3cda:	b2 01       	movw	r22, r4
    3cdc:	3d d6       	rcall	.+3194   	; 0x4958 <__floatunsisf>
    3cde:	20 e0       	ldi	r18, 0x00	; 0
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	40 e0       	ldi	r20, 0x00	; 0
    3ce4:	51 e4       	ldi	r21, 0x41	; 65
    3ce6:	9d d6       	rcall	.+3386   	; 0x4a22 <__mulsf3>
    3ce8:	9b 01       	movw	r18, r22
    3cea:	ac 01       	movw	r20, r24
    3cec:	60 e0       	ldi	r22, 0x00	; 0
    3cee:	74 e2       	ldi	r23, 0x24	; 36
    3cf0:	84 e7       	ldi	r24, 0x74	; 116
    3cf2:	9b e4       	ldi	r25, 0x4B	; 75
    3cf4:	c6 d5       	rcall	.+2956   	; 0x4882 <__divsf3>
    3cf6:	20 e0       	ldi	r18, 0x00	; 0
    3cf8:	30 e0       	ldi	r19, 0x00	; 0
    3cfa:	40 e8       	ldi	r20, 0x80	; 128
    3cfc:	5f e3       	ldi	r21, 0x3F	; 63
    3cfe:	5a d5       	rcall	.+2740   	; 0x47b4 <__subsf3>
    3d00:	c6 da       	rcall	.-2676   	; 0x328e <__fixunssfsi>
    3d02:	f4 01       	movw	r30, r8
    3d04:	32 97       	sbiw	r30, 0x02	; 2
    3d06:	60 83       	st	Z, r22
    3d08:	d8 01       	movw	r26, r16
    3d0a:	ed 91       	ld	r30, X+
    3d0c:	fc 91       	ld	r31, X
    3d0e:	11 97       	sbiw	r26, 0x01	; 1
    3d10:	35 97       	sbiw	r30, 0x05	; 5
    3d12:	88 e9       	ldi	r24, 0x98	; 152
    3d14:	80 83       	st	Z, r24
    3d16:	ed 91       	ld	r30, X+
    3d18:	fc 91       	ld	r31, X
    3d1a:	34 97       	sbiw	r30, 0x04	; 4
    3d1c:	86 e0       	ldi	r24, 0x06	; 6
    3d1e:	80 83       	st	Z, r24
    3d20:	ff be       	out	0x3f, r15	; 63
    3d22:	c8 01       	movw	r24, r16
    3d24:	df 91       	pop	r29
    3d26:	cf 91       	pop	r28
    3d28:	1f 91       	pop	r17
    3d2a:	0f 91       	pop	r16
    3d2c:	ff 90       	pop	r15
    3d2e:	ef 90       	pop	r14
    3d30:	cf 90       	pop	r12
    3d32:	af 90       	pop	r10
    3d34:	9f 90       	pop	r9
    3d36:	8f 90       	pop	r8
    3d38:	7f 90       	pop	r7
    3d3a:	6f 90       	pop	r6
    3d3c:	5f 90       	pop	r5
    3d3e:	4f 90       	pop	r4
    3d40:	3f 90       	pop	r3
    3d42:	2f 90       	pop	r2
    3d44:	08 95       	ret

00003d46 <serial_sendByte>:
    3d46:	cf 93       	push	r28
    3d48:	df 93       	push	r29
    3d4a:	dc 01       	movw	r26, r24
    3d4c:	89 2b       	or	r24, r25
    3d4e:	01 f1       	breq	.+64     	; 0x3d90 <serial_sendByte+0x4a>
    3d50:	12 96       	adiw	r26, 0x02	; 2
    3d52:	ed 91       	ld	r30, X+
    3d54:	fc 91       	ld	r31, X
    3d56:	13 97       	sbiw	r26, 0x03	; 3
    3d58:	93 81       	ldd	r25, Z+3	; 0x03
    3d5a:	82 81       	ldd	r24, Z+2	; 0x02
    3d5c:	25 81       	ldd	r18, Z+5	; 0x05
    3d5e:	98 1b       	sub	r25, r24
    3d60:	92 23       	and	r25, r18
    3d62:	84 81       	ldd	r24, Z+4	; 0x04
    3d64:	98 17       	cp	r25, r24
    3d66:	b1 f0       	breq	.+44     	; 0x3d94 <serial_sendByte+0x4e>
    3d68:	83 81       	ldd	r24, Z+3	; 0x03
    3d6a:	26 95       	lsr	r18
    3d6c:	28 23       	and	r18, r24
    3d6e:	c0 81       	ld	r28, Z
    3d70:	d1 81       	ldd	r29, Z+1	; 0x01
    3d72:	c2 0f       	add	r28, r18
    3d74:	d1 1d       	adc	r29, r1
    3d76:	68 83       	st	Y, r22
    3d78:	8f 5f       	subi	r24, 0xFF	; 255
    3d7a:	95 81       	ldd	r25, Z+5	; 0x05
    3d7c:	89 23       	and	r24, r25
    3d7e:	83 83       	std	Z+3, r24	; 0x03
    3d80:	ed 91       	ld	r30, X+
    3d82:	fc 91       	ld	r31, X
    3d84:	35 97       	sbiw	r30, 0x05	; 5
    3d86:	80 81       	ld	r24, Z
    3d88:	80 62       	ori	r24, 0x20	; 32
    3d8a:	80 83       	st	Z, r24
    3d8c:	80 e0       	ldi	r24, 0x00	; 0
    3d8e:	03 c0       	rjmp	.+6      	; 0x3d96 <serial_sendByte+0x50>
    3d90:	81 e0       	ldi	r24, 0x01	; 1
    3d92:	01 c0       	rjmp	.+2      	; 0x3d96 <serial_sendByte+0x50>
    3d94:	82 e0       	ldi	r24, 0x02	; 2
    3d96:	df 91       	pop	r29
    3d98:	cf 91       	pop	r28
    3d9a:	08 95       	ret

00003d9c <serial_sendBytes>:
    3d9c:	ef 92       	push	r14
    3d9e:	ff 92       	push	r15
    3da0:	0f 93       	push	r16
    3da2:	1f 93       	push	r17
    3da4:	cf 93       	push	r28
    3da6:	df 93       	push	r29
    3da8:	7c 01       	movw	r14, r24
    3daa:	00 97       	sbiw	r24, 0x00	; 0
    3dac:	09 f4       	brne	.+2      	; 0x3db0 <serial_sendBytes+0x14>
    3dae:	41 c0       	rjmp	.+130    	; 0x3e32 <serial_sendBytes+0x96>
    3db0:	dc 01       	movw	r26, r24
    3db2:	12 96       	adiw	r26, 0x02	; 2
    3db4:	ed 91       	ld	r30, X+
    3db6:	fc 91       	ld	r31, X
    3db8:	13 97       	sbiw	r26, 0x03	; 3
    3dba:	93 81       	ldd	r25, Z+3	; 0x03
    3dbc:	82 81       	ldd	r24, Z+2	; 0x02
    3dbe:	98 1b       	sub	r25, r24
    3dc0:	85 81       	ldd	r24, Z+5	; 0x05
    3dc2:	98 23       	and	r25, r24
    3dc4:	84 81       	ldd	r24, Z+4	; 0x04
    3dc6:	89 1b       	sub	r24, r25
    3dc8:	86 17       	cp	r24, r22
    3dca:	a8 f1       	brcs	.+106    	; 0x3e36 <serial_sendBytes+0x9a>
    3dcc:	66 23       	and	r22, r22
    3dce:	41 f1       	breq	.+80     	; 0x3e20 <serial_sendBytes+0x84>
    3dd0:	84 2f       	mov	r24, r20
    3dd2:	95 2f       	mov	r25, r21
    3dd4:	dc 01       	movw	r26, r24
    3dd6:	61 50       	subi	r22, 0x01	; 1
    3dd8:	46 2f       	mov	r20, r22
    3dda:	50 e0       	ldi	r21, 0x00	; 0
    3ddc:	4f 5f       	subi	r20, 0xFF	; 255
    3dde:	5f 4f       	sbci	r21, 0xFF	; 255
    3de0:	48 0f       	add	r20, r24
    3de2:	59 1f       	adc	r21, r25
    3de4:	e7 01       	movw	r28, r14
    3de6:	ea 81       	ldd	r30, Y+2	; 0x02
    3de8:	fb 81       	ldd	r31, Y+3	; 0x03
    3dea:	93 81       	ldd	r25, Z+3	; 0x03
    3dec:	82 81       	ldd	r24, Z+2	; 0x02
    3dee:	25 81       	ldd	r18, Z+5	; 0x05
    3df0:	98 1b       	sub	r25, r24
    3df2:	92 23       	and	r25, r18
    3df4:	84 81       	ldd	r24, Z+4	; 0x04
    3df6:	98 17       	cp	r25, r24
    3df8:	79 f0       	breq	.+30     	; 0x3e18 <serial_sendBytes+0x7c>
    3dfa:	8c 91       	ld	r24, X
    3dfc:	93 81       	ldd	r25, Z+3	; 0x03
    3dfe:	26 95       	lsr	r18
    3e00:	29 23       	and	r18, r25
    3e02:	60 81       	ld	r22, Z
    3e04:	71 81       	ldd	r23, Z+1	; 0x01
    3e06:	8b 01       	movw	r16, r22
    3e08:	02 0f       	add	r16, r18
    3e0a:	11 1d       	adc	r17, r1
    3e0c:	e8 01       	movw	r28, r16
    3e0e:	88 83       	st	Y, r24
    3e10:	9f 5f       	subi	r25, 0xFF	; 255
    3e12:	85 81       	ldd	r24, Z+5	; 0x05
    3e14:	98 23       	and	r25, r24
    3e16:	93 83       	std	Z+3, r25	; 0x03
    3e18:	11 96       	adiw	r26, 0x01	; 1
    3e1a:	a4 17       	cp	r26, r20
    3e1c:	b5 07       	cpc	r27, r21
    3e1e:	11 f7       	brne	.-60     	; 0x3de4 <serial_sendBytes+0x48>
    3e20:	d7 01       	movw	r26, r14
    3e22:	ed 91       	ld	r30, X+
    3e24:	fc 91       	ld	r31, X
    3e26:	35 97       	sbiw	r30, 0x05	; 5
    3e28:	80 81       	ld	r24, Z
    3e2a:	80 62       	ori	r24, 0x20	; 32
    3e2c:	80 83       	st	Z, r24
    3e2e:	80 e0       	ldi	r24, 0x00	; 0
    3e30:	03 c0       	rjmp	.+6      	; 0x3e38 <serial_sendBytes+0x9c>
    3e32:	81 e0       	ldi	r24, 0x01	; 1
    3e34:	01 c0       	rjmp	.+2      	; 0x3e38 <serial_sendBytes+0x9c>
    3e36:	82 e0       	ldi	r24, 0x02	; 2
    3e38:	df 91       	pop	r29
    3e3a:	cf 91       	pop	r28
    3e3c:	1f 91       	pop	r17
    3e3e:	0f 91       	pop	r16
    3e40:	ff 90       	pop	r15
    3e42:	ef 90       	pop	r14
    3e44:	08 95       	ret

00003e46 <serial_getByte>:
    3e46:	00 97       	sbiw	r24, 0x00	; 0
    3e48:	d1 f0       	breq	.+52     	; 0x3e7e <serial_getByte+0x38>
    3e4a:	dc 01       	movw	r26, r24
    3e4c:	14 96       	adiw	r26, 0x04	; 4
    3e4e:	ed 91       	ld	r30, X+
    3e50:	fc 91       	ld	r31, X
    3e52:	15 97       	sbiw	r26, 0x05	; 5
    3e54:	93 81       	ldd	r25, Z+3	; 0x03
    3e56:	82 81       	ldd	r24, Z+2	; 0x02
    3e58:	98 17       	cp	r25, r24
    3e5a:	99 f0       	breq	.+38     	; 0x3e82 <serial_getByte+0x3c>
    3e5c:	92 81       	ldd	r25, Z+2	; 0x02
    3e5e:	85 81       	ldd	r24, Z+5	; 0x05
    3e60:	86 95       	lsr	r24
    3e62:	89 23       	and	r24, r25
    3e64:	a0 81       	ld	r26, Z
    3e66:	b1 81       	ldd	r27, Z+1	; 0x01
    3e68:	a8 0f       	add	r26, r24
    3e6a:	b1 1d       	adc	r27, r1
    3e6c:	8c 91       	ld	r24, X
    3e6e:	db 01       	movw	r26, r22
    3e70:	8c 93       	st	X, r24
    3e72:	9f 5f       	subi	r25, 0xFF	; 255
    3e74:	85 81       	ldd	r24, Z+5	; 0x05
    3e76:	98 23       	and	r25, r24
    3e78:	92 83       	std	Z+2, r25	; 0x02
    3e7a:	80 e0       	ldi	r24, 0x00	; 0
    3e7c:	08 95       	ret
    3e7e:	81 e0       	ldi	r24, 0x01	; 1
    3e80:	08 95       	ret
    3e82:	83 e0       	ldi	r24, 0x03	; 3
    3e84:	08 95       	ret

00003e86 <__vector_25>:
    3e86:	1f 92       	push	r1
    3e88:	0f 92       	push	r0
    3e8a:	0f b6       	in	r0, 0x3f	; 63
    3e8c:	0f 92       	push	r0
    3e8e:	11 24       	eor	r1, r1
    3e90:	0b b6       	in	r0, 0x3b	; 59
    3e92:	0f 92       	push	r0
    3e94:	2f 93       	push	r18
    3e96:	3f 93       	push	r19
    3e98:	4f 93       	push	r20
    3e9a:	5f 93       	push	r21
    3e9c:	6f 93       	push	r22
    3e9e:	7f 93       	push	r23
    3ea0:	8f 93       	push	r24
    3ea2:	9f 93       	push	r25
    3ea4:	af 93       	push	r26
    3ea6:	bf 93       	push	r27
    3ea8:	cf 93       	push	r28
    3eaa:	df 93       	push	r29
    3eac:	ef 93       	push	r30
    3eae:	ff 93       	push	r31
    3eb0:	a0 91 ab 16 	lds	r26, 0x16AB	; 0x8016ab <_ser_handle>
    3eb4:	b0 91 ac 16 	lds	r27, 0x16AC	; 0x8016ac <_ser_handle+0x1>
    3eb8:	10 97       	sbiw	r26, 0x00	; 0
    3eba:	11 f1       	breq	.+68     	; 0x3f00 <__vector_25+0x7a>
    3ebc:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    3ec0:	14 96       	adiw	r26, 0x04	; 4
    3ec2:	ed 91       	ld	r30, X+
    3ec4:	fc 91       	ld	r31, X
    3ec6:	15 97       	sbiw	r26, 0x05	; 5
    3ec8:	93 81       	ldd	r25, Z+3	; 0x03
    3eca:	82 81       	ldd	r24, Z+2	; 0x02
    3ecc:	25 81       	ldd	r18, Z+5	; 0x05
    3ece:	98 1b       	sub	r25, r24
    3ed0:	92 23       	and	r25, r18
    3ed2:	84 81       	ldd	r24, Z+4	; 0x04
    3ed4:	98 17       	cp	r25, r24
    3ed6:	61 f0       	breq	.+24     	; 0x3ef0 <__vector_25+0x6a>
    3ed8:	83 81       	ldd	r24, Z+3	; 0x03
    3eda:	26 95       	lsr	r18
    3edc:	28 23       	and	r18, r24
    3ede:	c0 81       	ld	r28, Z
    3ee0:	d1 81       	ldd	r29, Z+1	; 0x01
    3ee2:	c2 0f       	add	r28, r18
    3ee4:	d1 1d       	adc	r29, r1
    3ee6:	68 83       	st	Y, r22
    3ee8:	8f 5f       	subi	r24, 0xFF	; 255
    3eea:	95 81       	ldd	r25, Z+5	; 0x05
    3eec:	89 23       	and	r24, r25
    3eee:	83 83       	std	Z+3, r24	; 0x03
    3ef0:	16 96       	adiw	r26, 0x06	; 6
    3ef2:	ed 91       	ld	r30, X+
    3ef4:	fc 91       	ld	r31, X
    3ef6:	17 97       	sbiw	r26, 0x07	; 7
    3ef8:	30 97       	sbiw	r30, 0x00	; 0
    3efa:	11 f0       	breq	.+4      	; 0x3f00 <__vector_25+0x7a>
    3efc:	cd 01       	movw	r24, r26
    3efe:	19 95       	eicall
    3f00:	ff 91       	pop	r31
    3f02:	ef 91       	pop	r30
    3f04:	df 91       	pop	r29
    3f06:	cf 91       	pop	r28
    3f08:	bf 91       	pop	r27
    3f0a:	af 91       	pop	r26
    3f0c:	9f 91       	pop	r25
    3f0e:	8f 91       	pop	r24
    3f10:	7f 91       	pop	r23
    3f12:	6f 91       	pop	r22
    3f14:	5f 91       	pop	r21
    3f16:	4f 91       	pop	r20
    3f18:	3f 91       	pop	r19
    3f1a:	2f 91       	pop	r18
    3f1c:	0f 90       	pop	r0
    3f1e:	0b be       	out	0x3b, r0	; 59
    3f20:	0f 90       	pop	r0
    3f22:	0f be       	out	0x3f, r0	; 63
    3f24:	0f 90       	pop	r0
    3f26:	1f 90       	pop	r1
    3f28:	18 95       	reti

00003f2a <__vector_26>:
    3f2a:	1f 92       	push	r1
    3f2c:	0f 92       	push	r0
    3f2e:	0f b6       	in	r0, 0x3f	; 63
    3f30:	0f 92       	push	r0
    3f32:	11 24       	eor	r1, r1
    3f34:	0b b6       	in	r0, 0x3b	; 59
    3f36:	0f 92       	push	r0
    3f38:	2f 93       	push	r18
    3f3a:	8f 93       	push	r24
    3f3c:	9f 93       	push	r25
    3f3e:	af 93       	push	r26
    3f40:	bf 93       	push	r27
    3f42:	ef 93       	push	r30
    3f44:	ff 93       	push	r31
    3f46:	e0 91 ab 16 	lds	r30, 0x16AB	; 0x8016ab <_ser_handle>
    3f4a:	f0 91 ac 16 	lds	r31, 0x16AC	; 0x8016ac <_ser_handle+0x1>
    3f4e:	30 97       	sbiw	r30, 0x00	; 0
    3f50:	b9 f0       	breq	.+46     	; 0x3f80 <__vector_26+0x56>
    3f52:	02 80       	ldd	r0, Z+2	; 0x02
    3f54:	f3 81       	ldd	r31, Z+3	; 0x03
    3f56:	e0 2d       	mov	r30, r0
    3f58:	93 81       	ldd	r25, Z+3	; 0x03
    3f5a:	82 81       	ldd	r24, Z+2	; 0x02
    3f5c:	98 17       	cp	r25, r24
    3f5e:	b1 f0       	breq	.+44     	; 0x3f8c <__vector_26+0x62>
    3f60:	92 81       	ldd	r25, Z+2	; 0x02
    3f62:	85 81       	ldd	r24, Z+5	; 0x05
    3f64:	28 2f       	mov	r18, r24
    3f66:	26 95       	lsr	r18
    3f68:	29 23       	and	r18, r25
    3f6a:	a0 81       	ld	r26, Z
    3f6c:	b1 81       	ldd	r27, Z+1	; 0x01
    3f6e:	a2 0f       	add	r26, r18
    3f70:	b1 1d       	adc	r27, r1
    3f72:	2c 91       	ld	r18, X
    3f74:	9f 5f       	subi	r25, 0xFF	; 255
    3f76:	89 23       	and	r24, r25
    3f78:	82 83       	std	Z+2, r24	; 0x02
    3f7a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    3f7e:	0b c0       	rjmp	.+22     	; 0x3f96 <__vector_26+0x6c>
    3f80:	e1 ec       	ldi	r30, 0xC1	; 193
    3f82:	f0 e0       	ldi	r31, 0x00	; 0
    3f84:	80 81       	ld	r24, Z
    3f86:	8f 7d       	andi	r24, 0xDF	; 223
    3f88:	80 83       	st	Z, r24
    3f8a:	05 c0       	rjmp	.+10     	; 0x3f96 <__vector_26+0x6c>
    3f8c:	e1 ec       	ldi	r30, 0xC1	; 193
    3f8e:	f0 e0       	ldi	r31, 0x00	; 0
    3f90:	80 81       	ld	r24, Z
    3f92:	8f 7d       	andi	r24, 0xDF	; 223
    3f94:	80 83       	st	Z, r24
    3f96:	ff 91       	pop	r31
    3f98:	ef 91       	pop	r30
    3f9a:	bf 91       	pop	r27
    3f9c:	af 91       	pop	r26
    3f9e:	9f 91       	pop	r25
    3fa0:	8f 91       	pop	r24
    3fa2:	2f 91       	pop	r18
    3fa4:	0f 90       	pop	r0
    3fa6:	0b be       	out	0x3b, r0	; 59
    3fa8:	0f 90       	pop	r0
    3faa:	0f be       	out	0x3f, r0	; 63
    3fac:	0f 90       	pop	r0
    3fae:	1f 90       	pop	r1
    3fb0:	18 95       	reti

00003fb2 <__vector_36>:
    3fb2:	1f 92       	push	r1
    3fb4:	0f 92       	push	r0
    3fb6:	0f b6       	in	r0, 0x3f	; 63
    3fb8:	0f 92       	push	r0
    3fba:	11 24       	eor	r1, r1
    3fbc:	0b b6       	in	r0, 0x3b	; 59
    3fbe:	0f 92       	push	r0
    3fc0:	2f 93       	push	r18
    3fc2:	3f 93       	push	r19
    3fc4:	4f 93       	push	r20
    3fc6:	5f 93       	push	r21
    3fc8:	6f 93       	push	r22
    3fca:	7f 93       	push	r23
    3fcc:	8f 93       	push	r24
    3fce:	9f 93       	push	r25
    3fd0:	af 93       	push	r26
    3fd2:	bf 93       	push	r27
    3fd4:	cf 93       	push	r28
    3fd6:	df 93       	push	r29
    3fd8:	ef 93       	push	r30
    3fda:	ff 93       	push	r31
    3fdc:	a0 91 ad 16 	lds	r26, 0x16AD	; 0x8016ad <_ser_handle+0x2>
    3fe0:	b0 91 ae 16 	lds	r27, 0x16AE	; 0x8016ae <_ser_handle+0x3>
    3fe4:	10 97       	sbiw	r26, 0x00	; 0
    3fe6:	11 f1       	breq	.+68     	; 0x402c <__vector_36+0x7a>
    3fe8:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    3fec:	14 96       	adiw	r26, 0x04	; 4
    3fee:	ed 91       	ld	r30, X+
    3ff0:	fc 91       	ld	r31, X
    3ff2:	15 97       	sbiw	r26, 0x05	; 5
    3ff4:	93 81       	ldd	r25, Z+3	; 0x03
    3ff6:	82 81       	ldd	r24, Z+2	; 0x02
    3ff8:	25 81       	ldd	r18, Z+5	; 0x05
    3ffa:	98 1b       	sub	r25, r24
    3ffc:	92 23       	and	r25, r18
    3ffe:	84 81       	ldd	r24, Z+4	; 0x04
    4000:	98 17       	cp	r25, r24
    4002:	61 f0       	breq	.+24     	; 0x401c <__vector_36+0x6a>
    4004:	83 81       	ldd	r24, Z+3	; 0x03
    4006:	26 95       	lsr	r18
    4008:	28 23       	and	r18, r24
    400a:	c0 81       	ld	r28, Z
    400c:	d1 81       	ldd	r29, Z+1	; 0x01
    400e:	c2 0f       	add	r28, r18
    4010:	d1 1d       	adc	r29, r1
    4012:	68 83       	st	Y, r22
    4014:	8f 5f       	subi	r24, 0xFF	; 255
    4016:	95 81       	ldd	r25, Z+5	; 0x05
    4018:	89 23       	and	r24, r25
    401a:	83 83       	std	Z+3, r24	; 0x03
    401c:	16 96       	adiw	r26, 0x06	; 6
    401e:	ed 91       	ld	r30, X+
    4020:	fc 91       	ld	r31, X
    4022:	17 97       	sbiw	r26, 0x07	; 7
    4024:	30 97       	sbiw	r30, 0x00	; 0
    4026:	11 f0       	breq	.+4      	; 0x402c <__vector_36+0x7a>
    4028:	cd 01       	movw	r24, r26
    402a:	19 95       	eicall
    402c:	ff 91       	pop	r31
    402e:	ef 91       	pop	r30
    4030:	df 91       	pop	r29
    4032:	cf 91       	pop	r28
    4034:	bf 91       	pop	r27
    4036:	af 91       	pop	r26
    4038:	9f 91       	pop	r25
    403a:	8f 91       	pop	r24
    403c:	7f 91       	pop	r23
    403e:	6f 91       	pop	r22
    4040:	5f 91       	pop	r21
    4042:	4f 91       	pop	r20
    4044:	3f 91       	pop	r19
    4046:	2f 91       	pop	r18
    4048:	0f 90       	pop	r0
    404a:	0b be       	out	0x3b, r0	; 59
    404c:	0f 90       	pop	r0
    404e:	0f be       	out	0x3f, r0	; 63
    4050:	0f 90       	pop	r0
    4052:	1f 90       	pop	r1
    4054:	18 95       	reti

00004056 <__vector_37>:
    4056:	1f 92       	push	r1
    4058:	0f 92       	push	r0
    405a:	0f b6       	in	r0, 0x3f	; 63
    405c:	0f 92       	push	r0
    405e:	11 24       	eor	r1, r1
    4060:	0b b6       	in	r0, 0x3b	; 59
    4062:	0f 92       	push	r0
    4064:	2f 93       	push	r18
    4066:	8f 93       	push	r24
    4068:	9f 93       	push	r25
    406a:	af 93       	push	r26
    406c:	bf 93       	push	r27
    406e:	ef 93       	push	r30
    4070:	ff 93       	push	r31
    4072:	e0 91 ad 16 	lds	r30, 0x16AD	; 0x8016ad <_ser_handle+0x2>
    4076:	f0 91 ae 16 	lds	r31, 0x16AE	; 0x8016ae <_ser_handle+0x3>
    407a:	30 97       	sbiw	r30, 0x00	; 0
    407c:	b9 f0       	breq	.+46     	; 0x40ac <__vector_37+0x56>
    407e:	02 80       	ldd	r0, Z+2	; 0x02
    4080:	f3 81       	ldd	r31, Z+3	; 0x03
    4082:	e0 2d       	mov	r30, r0
    4084:	93 81       	ldd	r25, Z+3	; 0x03
    4086:	82 81       	ldd	r24, Z+2	; 0x02
    4088:	98 17       	cp	r25, r24
    408a:	b1 f0       	breq	.+44     	; 0x40b8 <__vector_37+0x62>
    408c:	92 81       	ldd	r25, Z+2	; 0x02
    408e:	85 81       	ldd	r24, Z+5	; 0x05
    4090:	28 2f       	mov	r18, r24
    4092:	26 95       	lsr	r18
    4094:	29 23       	and	r18, r25
    4096:	a0 81       	ld	r26, Z
    4098:	b1 81       	ldd	r27, Z+1	; 0x01
    409a:	a2 0f       	add	r26, r18
    409c:	b1 1d       	adc	r27, r1
    409e:	2c 91       	ld	r18, X
    40a0:	9f 5f       	subi	r25, 0xFF	; 255
    40a2:	89 23       	and	r24, r25
    40a4:	82 83       	std	Z+2, r24	; 0x02
    40a6:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    40aa:	0b c0       	rjmp	.+22     	; 0x40c2 <__vector_37+0x6c>
    40ac:	e9 ec       	ldi	r30, 0xC9	; 201
    40ae:	f0 e0       	ldi	r31, 0x00	; 0
    40b0:	80 81       	ld	r24, Z
    40b2:	8f 7d       	andi	r24, 0xDF	; 223
    40b4:	80 83       	st	Z, r24
    40b6:	05 c0       	rjmp	.+10     	; 0x40c2 <__vector_37+0x6c>
    40b8:	e9 ec       	ldi	r30, 0xC9	; 201
    40ba:	f0 e0       	ldi	r31, 0x00	; 0
    40bc:	80 81       	ld	r24, Z
    40be:	8f 7d       	andi	r24, 0xDF	; 223
    40c0:	80 83       	st	Z, r24
    40c2:	ff 91       	pop	r31
    40c4:	ef 91       	pop	r30
    40c6:	bf 91       	pop	r27
    40c8:	af 91       	pop	r26
    40ca:	9f 91       	pop	r25
    40cc:	8f 91       	pop	r24
    40ce:	2f 91       	pop	r18
    40d0:	0f 90       	pop	r0
    40d2:	0b be       	out	0x3b, r0	; 59
    40d4:	0f 90       	pop	r0
    40d6:	0f be       	out	0x3f, r0	; 63
    40d8:	0f 90       	pop	r0
    40da:	1f 90       	pop	r1
    40dc:	18 95       	reti

000040de <__vector_51>:
    40de:	1f 92       	push	r1
    40e0:	0f 92       	push	r0
    40e2:	0f b6       	in	r0, 0x3f	; 63
    40e4:	0f 92       	push	r0
    40e6:	11 24       	eor	r1, r1
    40e8:	0b b6       	in	r0, 0x3b	; 59
    40ea:	0f 92       	push	r0
    40ec:	2f 93       	push	r18
    40ee:	3f 93       	push	r19
    40f0:	4f 93       	push	r20
    40f2:	5f 93       	push	r21
    40f4:	6f 93       	push	r22
    40f6:	7f 93       	push	r23
    40f8:	8f 93       	push	r24
    40fa:	9f 93       	push	r25
    40fc:	af 93       	push	r26
    40fe:	bf 93       	push	r27
    4100:	cf 93       	push	r28
    4102:	df 93       	push	r29
    4104:	ef 93       	push	r30
    4106:	ff 93       	push	r31
    4108:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <_ser_handle+0x4>
    410c:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <_ser_handle+0x5>
    4110:	10 97       	sbiw	r26, 0x00	; 0
    4112:	11 f1       	breq	.+68     	; 0x4158 <__vector_51+0x7a>
    4114:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4118:	14 96       	adiw	r26, 0x04	; 4
    411a:	ed 91       	ld	r30, X+
    411c:	fc 91       	ld	r31, X
    411e:	15 97       	sbiw	r26, 0x05	; 5
    4120:	93 81       	ldd	r25, Z+3	; 0x03
    4122:	82 81       	ldd	r24, Z+2	; 0x02
    4124:	25 81       	ldd	r18, Z+5	; 0x05
    4126:	98 1b       	sub	r25, r24
    4128:	92 23       	and	r25, r18
    412a:	84 81       	ldd	r24, Z+4	; 0x04
    412c:	98 17       	cp	r25, r24
    412e:	61 f0       	breq	.+24     	; 0x4148 <__vector_51+0x6a>
    4130:	83 81       	ldd	r24, Z+3	; 0x03
    4132:	26 95       	lsr	r18
    4134:	28 23       	and	r18, r24
    4136:	c0 81       	ld	r28, Z
    4138:	d1 81       	ldd	r29, Z+1	; 0x01
    413a:	c2 0f       	add	r28, r18
    413c:	d1 1d       	adc	r29, r1
    413e:	68 83       	st	Y, r22
    4140:	8f 5f       	subi	r24, 0xFF	; 255
    4142:	95 81       	ldd	r25, Z+5	; 0x05
    4144:	89 23       	and	r24, r25
    4146:	83 83       	std	Z+3, r24	; 0x03
    4148:	16 96       	adiw	r26, 0x06	; 6
    414a:	ed 91       	ld	r30, X+
    414c:	fc 91       	ld	r31, X
    414e:	17 97       	sbiw	r26, 0x07	; 7
    4150:	30 97       	sbiw	r30, 0x00	; 0
    4152:	11 f0       	breq	.+4      	; 0x4158 <__vector_51+0x7a>
    4154:	cd 01       	movw	r24, r26
    4156:	19 95       	eicall
    4158:	ff 91       	pop	r31
    415a:	ef 91       	pop	r30
    415c:	df 91       	pop	r29
    415e:	cf 91       	pop	r28
    4160:	bf 91       	pop	r27
    4162:	af 91       	pop	r26
    4164:	9f 91       	pop	r25
    4166:	8f 91       	pop	r24
    4168:	7f 91       	pop	r23
    416a:	6f 91       	pop	r22
    416c:	5f 91       	pop	r21
    416e:	4f 91       	pop	r20
    4170:	3f 91       	pop	r19
    4172:	2f 91       	pop	r18
    4174:	0f 90       	pop	r0
    4176:	0b be       	out	0x3b, r0	; 59
    4178:	0f 90       	pop	r0
    417a:	0f be       	out	0x3f, r0	; 63
    417c:	0f 90       	pop	r0
    417e:	1f 90       	pop	r1
    4180:	18 95       	reti

00004182 <__vector_52>:
    4182:	1f 92       	push	r1
    4184:	0f 92       	push	r0
    4186:	0f b6       	in	r0, 0x3f	; 63
    4188:	0f 92       	push	r0
    418a:	11 24       	eor	r1, r1
    418c:	0b b6       	in	r0, 0x3b	; 59
    418e:	0f 92       	push	r0
    4190:	2f 93       	push	r18
    4192:	8f 93       	push	r24
    4194:	9f 93       	push	r25
    4196:	af 93       	push	r26
    4198:	bf 93       	push	r27
    419a:	ef 93       	push	r30
    419c:	ff 93       	push	r31
    419e:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <_ser_handle+0x4>
    41a2:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <_ser_handle+0x5>
    41a6:	30 97       	sbiw	r30, 0x00	; 0
    41a8:	b9 f0       	breq	.+46     	; 0x41d8 <__vector_52+0x56>
    41aa:	02 80       	ldd	r0, Z+2	; 0x02
    41ac:	f3 81       	ldd	r31, Z+3	; 0x03
    41ae:	e0 2d       	mov	r30, r0
    41b0:	93 81       	ldd	r25, Z+3	; 0x03
    41b2:	82 81       	ldd	r24, Z+2	; 0x02
    41b4:	98 17       	cp	r25, r24
    41b6:	b1 f0       	breq	.+44     	; 0x41e4 <__vector_52+0x62>
    41b8:	92 81       	ldd	r25, Z+2	; 0x02
    41ba:	85 81       	ldd	r24, Z+5	; 0x05
    41bc:	28 2f       	mov	r18, r24
    41be:	26 95       	lsr	r18
    41c0:	29 23       	and	r18, r25
    41c2:	a0 81       	ld	r26, Z
    41c4:	b1 81       	ldd	r27, Z+1	; 0x01
    41c6:	a2 0f       	add	r26, r18
    41c8:	b1 1d       	adc	r27, r1
    41ca:	2c 91       	ld	r18, X
    41cc:	9f 5f       	subi	r25, 0xFF	; 255
    41ce:	89 23       	and	r24, r25
    41d0:	82 83       	std	Z+2, r24	; 0x02
    41d2:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    41d6:	0b c0       	rjmp	.+22     	; 0x41ee <__vector_52+0x6c>
    41d8:	e1 ed       	ldi	r30, 0xD1	; 209
    41da:	f0 e0       	ldi	r31, 0x00	; 0
    41dc:	80 81       	ld	r24, Z
    41de:	8f 7d       	andi	r24, 0xDF	; 223
    41e0:	80 83       	st	Z, r24
    41e2:	05 c0       	rjmp	.+10     	; 0x41ee <__vector_52+0x6c>
    41e4:	e1 ed       	ldi	r30, 0xD1	; 209
    41e6:	f0 e0       	ldi	r31, 0x00	; 0
    41e8:	80 81       	ld	r24, Z
    41ea:	8f 7d       	andi	r24, 0xDF	; 223
    41ec:	80 83       	st	Z, r24
    41ee:	ff 91       	pop	r31
    41f0:	ef 91       	pop	r30
    41f2:	bf 91       	pop	r27
    41f4:	af 91       	pop	r26
    41f6:	9f 91       	pop	r25
    41f8:	8f 91       	pop	r24
    41fa:	2f 91       	pop	r18
    41fc:	0f 90       	pop	r0
    41fe:	0b be       	out	0x3b, r0	; 59
    4200:	0f 90       	pop	r0
    4202:	0f be       	out	0x3f, r0	; 63
    4204:	0f 90       	pop	r0
    4206:	1f 90       	pop	r1
    4208:	18 95       	reti

0000420a <__vector_54>:
    420a:	1f 92       	push	r1
    420c:	0f 92       	push	r0
    420e:	0f b6       	in	r0, 0x3f	; 63
    4210:	0f 92       	push	r0
    4212:	11 24       	eor	r1, r1
    4214:	0b b6       	in	r0, 0x3b	; 59
    4216:	0f 92       	push	r0
    4218:	2f 93       	push	r18
    421a:	3f 93       	push	r19
    421c:	4f 93       	push	r20
    421e:	5f 93       	push	r21
    4220:	6f 93       	push	r22
    4222:	7f 93       	push	r23
    4224:	8f 93       	push	r24
    4226:	9f 93       	push	r25
    4228:	af 93       	push	r26
    422a:	bf 93       	push	r27
    422c:	cf 93       	push	r28
    422e:	df 93       	push	r29
    4230:	ef 93       	push	r30
    4232:	ff 93       	push	r31
    4234:	a0 91 b1 16 	lds	r26, 0x16B1	; 0x8016b1 <_ser_handle+0x6>
    4238:	b0 91 b2 16 	lds	r27, 0x16B2	; 0x8016b2 <_ser_handle+0x7>
    423c:	10 97       	sbiw	r26, 0x00	; 0
    423e:	11 f1       	breq	.+68     	; 0x4284 <__vector_54+0x7a>
    4240:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4244:	14 96       	adiw	r26, 0x04	; 4
    4246:	ed 91       	ld	r30, X+
    4248:	fc 91       	ld	r31, X
    424a:	15 97       	sbiw	r26, 0x05	; 5
    424c:	93 81       	ldd	r25, Z+3	; 0x03
    424e:	82 81       	ldd	r24, Z+2	; 0x02
    4250:	25 81       	ldd	r18, Z+5	; 0x05
    4252:	98 1b       	sub	r25, r24
    4254:	92 23       	and	r25, r18
    4256:	84 81       	ldd	r24, Z+4	; 0x04
    4258:	98 17       	cp	r25, r24
    425a:	61 f0       	breq	.+24     	; 0x4274 <__vector_54+0x6a>
    425c:	83 81       	ldd	r24, Z+3	; 0x03
    425e:	26 95       	lsr	r18
    4260:	28 23       	and	r18, r24
    4262:	c0 81       	ld	r28, Z
    4264:	d1 81       	ldd	r29, Z+1	; 0x01
    4266:	c2 0f       	add	r28, r18
    4268:	d1 1d       	adc	r29, r1
    426a:	68 83       	st	Y, r22
    426c:	8f 5f       	subi	r24, 0xFF	; 255
    426e:	95 81       	ldd	r25, Z+5	; 0x05
    4270:	89 23       	and	r24, r25
    4272:	83 83       	std	Z+3, r24	; 0x03
    4274:	16 96       	adiw	r26, 0x06	; 6
    4276:	ed 91       	ld	r30, X+
    4278:	fc 91       	ld	r31, X
    427a:	17 97       	sbiw	r26, 0x07	; 7
    427c:	30 97       	sbiw	r30, 0x00	; 0
    427e:	11 f0       	breq	.+4      	; 0x4284 <__vector_54+0x7a>
    4280:	cd 01       	movw	r24, r26
    4282:	19 95       	eicall
    4284:	ff 91       	pop	r31
    4286:	ef 91       	pop	r30
    4288:	df 91       	pop	r29
    428a:	cf 91       	pop	r28
    428c:	bf 91       	pop	r27
    428e:	af 91       	pop	r26
    4290:	9f 91       	pop	r25
    4292:	8f 91       	pop	r24
    4294:	7f 91       	pop	r23
    4296:	6f 91       	pop	r22
    4298:	5f 91       	pop	r21
    429a:	4f 91       	pop	r20
    429c:	3f 91       	pop	r19
    429e:	2f 91       	pop	r18
    42a0:	0f 90       	pop	r0
    42a2:	0b be       	out	0x3b, r0	; 59
    42a4:	0f 90       	pop	r0
    42a6:	0f be       	out	0x3f, r0	; 63
    42a8:	0f 90       	pop	r0
    42aa:	1f 90       	pop	r1
    42ac:	18 95       	reti

000042ae <__vector_55>:
    42ae:	1f 92       	push	r1
    42b0:	0f 92       	push	r0
    42b2:	0f b6       	in	r0, 0x3f	; 63
    42b4:	0f 92       	push	r0
    42b6:	11 24       	eor	r1, r1
    42b8:	0b b6       	in	r0, 0x3b	; 59
    42ba:	0f 92       	push	r0
    42bc:	2f 93       	push	r18
    42be:	8f 93       	push	r24
    42c0:	9f 93       	push	r25
    42c2:	af 93       	push	r26
    42c4:	bf 93       	push	r27
    42c6:	ef 93       	push	r30
    42c8:	ff 93       	push	r31
    42ca:	e0 91 b1 16 	lds	r30, 0x16B1	; 0x8016b1 <_ser_handle+0x6>
    42ce:	f0 91 b2 16 	lds	r31, 0x16B2	; 0x8016b2 <_ser_handle+0x7>
    42d2:	30 97       	sbiw	r30, 0x00	; 0
    42d4:	b9 f0       	breq	.+46     	; 0x4304 <__vector_55+0x56>
    42d6:	02 80       	ldd	r0, Z+2	; 0x02
    42d8:	f3 81       	ldd	r31, Z+3	; 0x03
    42da:	e0 2d       	mov	r30, r0
    42dc:	93 81       	ldd	r25, Z+3	; 0x03
    42de:	82 81       	ldd	r24, Z+2	; 0x02
    42e0:	98 17       	cp	r25, r24
    42e2:	b1 f0       	breq	.+44     	; 0x4310 <__vector_55+0x62>
    42e4:	92 81       	ldd	r25, Z+2	; 0x02
    42e6:	85 81       	ldd	r24, Z+5	; 0x05
    42e8:	28 2f       	mov	r18, r24
    42ea:	26 95       	lsr	r18
    42ec:	29 23       	and	r18, r25
    42ee:	a0 81       	ld	r26, Z
    42f0:	b1 81       	ldd	r27, Z+1	; 0x01
    42f2:	a2 0f       	add	r26, r18
    42f4:	b1 1d       	adc	r27, r1
    42f6:	2c 91       	ld	r18, X
    42f8:	9f 5f       	subi	r25, 0xFF	; 255
    42fa:	89 23       	and	r24, r25
    42fc:	82 83       	std	Z+2, r24	; 0x02
    42fe:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4302:	0b c0       	rjmp	.+22     	; 0x431a <__vector_55+0x6c>
    4304:	e1 e3       	ldi	r30, 0x31	; 49
    4306:	f1 e0       	ldi	r31, 0x01	; 1
    4308:	80 81       	ld	r24, Z
    430a:	8f 7d       	andi	r24, 0xDF	; 223
    430c:	80 83       	st	Z, r24
    430e:	05 c0       	rjmp	.+10     	; 0x431a <__vector_55+0x6c>
    4310:	e1 e3       	ldi	r30, 0x31	; 49
    4312:	f1 e0       	ldi	r31, 0x01	; 1
    4314:	80 81       	ld	r24, Z
    4316:	8f 7d       	andi	r24, 0xDF	; 223
    4318:	80 83       	st	Z, r24
    431a:	ff 91       	pop	r31
    431c:	ef 91       	pop	r30
    431e:	bf 91       	pop	r27
    4320:	af 91       	pop	r26
    4322:	9f 91       	pop	r25
    4324:	8f 91       	pop	r24
    4326:	2f 91       	pop	r18
    4328:	0f 90       	pop	r0
    432a:	0b be       	out	0x3b, r0	; 59
    432c:	0f 90       	pop	r0
    432e:	0f be       	out	0x3f, r0	; 63
    4330:	0f 90       	pop	r0
    4332:	1f 90       	pop	r1
    4334:	18 95       	reti

00004336 <usart_getchar>:
    4336:	cf 93       	push	r28
    4338:	df 93       	push	r29
    433a:	1f 92       	push	r1
    433c:	cd b7       	in	r28, 0x3d	; 61
    433e:	de b7       	in	r29, 0x3e	; 62
    4340:	be 01       	movw	r22, r28
    4342:	6f 5f       	subi	r22, 0xFF	; 255
    4344:	7f 4f       	sbci	r23, 0xFF	; 255
    4346:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <_com_serial_instance>
    434a:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <_com_serial_instance+0x1>
    434e:	7b dd       	rcall	.-1290   	; 0x3e46 <serial_getByte>
    4350:	81 11       	cpse	r24, r1
    4352:	f6 cf       	rjmp	.-20     	; 0x4340 <usart_getchar+0xa>
    4354:	89 81       	ldd	r24, Y+1	; 0x01
    4356:	90 e0       	ldi	r25, 0x00	; 0
    4358:	0f 90       	pop	r0
    435a:	df 91       	pop	r29
    435c:	cf 91       	pop	r28
    435e:	08 95       	ret

00004360 <usart_putchar>:
    4360:	68 2f       	mov	r22, r24
    4362:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <_com_serial_instance>
    4366:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <_com_serial_instance+0x1>
    436a:	ed dc       	rcall	.-1574   	; 0x3d46 <serial_sendByte>
    436c:	80 e0       	ldi	r24, 0x00	; 0
    436e:	90 e0       	ldi	r25, 0x00	; 0
    4370:	08 95       	ret

00004372 <stdio_initialise>:
    4372:	8f 92       	push	r8
    4374:	9f 92       	push	r9
    4376:	af 92       	push	r10
    4378:	cf 92       	push	r12
    437a:	ef 92       	push	r14
    437c:	0f 93       	push	r16
    437e:	81 2c       	mov	r8, r1
    4380:	91 2c       	mov	r9, r1
    4382:	68 94       	set
    4384:	aa 24       	eor	r10, r10
    4386:	a7 f8       	bld	r10, 7
    4388:	68 94       	set
    438a:	cc 24       	eor	r12, r12
    438c:	c7 f8       	bld	r12, 7
    438e:	e1 2c       	mov	r14, r1
    4390:	00 e0       	ldi	r16, 0x00	; 0
    4392:	23 e0       	ldi	r18, 0x03	; 3
    4394:	40 e0       	ldi	r20, 0x00	; 0
    4396:	51 ee       	ldi	r21, 0xE1	; 225
    4398:	60 e0       	ldi	r22, 0x00	; 0
    439a:	70 e0       	ldi	r23, 0x00	; 0
    439c:	38 dc       	rcall	.-1936   	; 0x3c0e <serial_create>
    439e:	90 93 b4 16 	sts	0x16B4, r25	; 0x8016b4 <_com_serial_instance+0x1>
    43a2:	80 93 b3 16 	sts	0x16B3, r24	; 0x8016b3 <_com_serial_instance>
    43a6:	e1 ee       	ldi	r30, 0xE1	; 225
    43a8:	f6 e1       	ldi	r31, 0x16	; 22
    43aa:	8f e0       	ldi	r24, 0x0F	; 15
    43ac:	92 e0       	ldi	r25, 0x02	; 2
    43ae:	91 83       	std	Z+1, r25	; 0x01
    43b0:	80 83       	st	Z, r24
    43b2:	93 83       	std	Z+3, r25	; 0x03
    43b4:	82 83       	std	Z+2, r24	; 0x02
    43b6:	0f 91       	pop	r16
    43b8:	ef 90       	pop	r14
    43ba:	cf 90       	pop	r12
    43bc:	af 90       	pop	r10
    43be:	9f 90       	pop	r9
    43c0:	8f 90       	pop	r8
    43c2:	08 95       	ret

000043c4 <_turn_off>:
    43c4:	90 e0       	ldi	r25, 0x00	; 0
    43c6:	fc 01       	movw	r30, r24
    43c8:	ee 0f       	add	r30, r30
    43ca:	ff 1f       	adc	r31, r31
    43cc:	e8 0f       	add	r30, r24
    43ce:	f9 1f       	adc	r31, r25
    43d0:	ee 0f       	add	r30, r30
    43d2:	ff 1f       	adc	r31, r31
    43d4:	eb 54       	subi	r30, 0x4B	; 75
    43d6:	f9 4e       	sbci	r31, 0xE9	; 233
    43d8:	23 81       	ldd	r18, Z+3	; 0x03
    43da:	21 11       	cpse	r18, r1
    43dc:	1f c0       	rjmp	.+62     	; 0x441c <_turn_off+0x58>
    43de:	9c 01       	movw	r18, r24
    43e0:	22 0f       	add	r18, r18
    43e2:	33 1f       	adc	r19, r19
    43e4:	f9 01       	movw	r30, r18
    43e6:	e8 0f       	add	r30, r24
    43e8:	f9 1f       	adc	r31, r25
    43ea:	ee 0f       	add	r30, r30
    43ec:	ff 1f       	adc	r31, r31
    43ee:	eb 54       	subi	r30, 0x4B	; 75
    43f0:	f9 4e       	sbci	r31, 0xE9	; 233
    43f2:	a0 81       	ld	r26, Z
    43f4:	b1 81       	ldd	r27, Z+1	; 0x01
    43f6:	4c 91       	ld	r20, X
    43f8:	f9 01       	movw	r30, r18
    43fa:	e8 0f       	add	r30, r24
    43fc:	f9 1f       	adc	r31, r25
    43fe:	ee 0f       	add	r30, r30
    4400:	ff 1f       	adc	r31, r31
    4402:	eb 54       	subi	r30, 0x4B	; 75
    4404:	f9 4e       	sbci	r31, 0xE9	; 233
    4406:	81 e0       	ldi	r24, 0x01	; 1
    4408:	90 e0       	ldi	r25, 0x00	; 0
    440a:	02 80       	ldd	r0, Z+2	; 0x02
    440c:	02 c0       	rjmp	.+4      	; 0x4412 <_turn_off+0x4e>
    440e:	88 0f       	add	r24, r24
    4410:	99 1f       	adc	r25, r25
    4412:	0a 94       	dec	r0
    4414:	e2 f7       	brpl	.-8      	; 0x440e <_turn_off+0x4a>
    4416:	84 2b       	or	r24, r20
    4418:	8c 93       	st	X, r24
    441a:	08 95       	ret
    441c:	fc 01       	movw	r30, r24
    441e:	ee 0f       	add	r30, r30
    4420:	ff 1f       	adc	r31, r31
    4422:	df 01       	movw	r26, r30
    4424:	a8 0f       	add	r26, r24
    4426:	b9 1f       	adc	r27, r25
    4428:	aa 0f       	add	r26, r26
    442a:	bb 1f       	adc	r27, r27
    442c:	ab 54       	subi	r26, 0x4B	; 75
    442e:	b9 4e       	sbci	r27, 0xE9	; 233
    4430:	0d 90       	ld	r0, X+
    4432:	bc 91       	ld	r27, X
    4434:	a0 2d       	mov	r26, r0
    4436:	2c 91       	ld	r18, X
    4438:	e8 0f       	add	r30, r24
    443a:	f9 1f       	adc	r31, r25
    443c:	ee 0f       	add	r30, r30
    443e:	ff 1f       	adc	r31, r31
    4440:	eb 54       	subi	r30, 0x4B	; 75
    4442:	f9 4e       	sbci	r31, 0xE9	; 233
    4444:	81 e0       	ldi	r24, 0x01	; 1
    4446:	90 e0       	ldi	r25, 0x00	; 0
    4448:	02 80       	ldd	r0, Z+2	; 0x02
    444a:	02 c0       	rjmp	.+4      	; 0x4450 <_turn_off+0x8c>
    444c:	88 0f       	add	r24, r24
    444e:	99 1f       	adc	r25, r25
    4450:	0a 94       	dec	r0
    4452:	e2 f7       	brpl	.-8      	; 0x444c <_turn_off+0x88>
    4454:	80 95       	com	r24
    4456:	82 23       	and	r24, r18
    4458:	8c 93       	st	X, r24
    445a:	08 95       	ret

0000445c <_turn_on>:
    445c:	90 e0       	ldi	r25, 0x00	; 0
    445e:	fc 01       	movw	r30, r24
    4460:	ee 0f       	add	r30, r30
    4462:	ff 1f       	adc	r31, r31
    4464:	e8 0f       	add	r30, r24
    4466:	f9 1f       	adc	r31, r25
    4468:	ee 0f       	add	r30, r30
    446a:	ff 1f       	adc	r31, r31
    446c:	eb 54       	subi	r30, 0x4B	; 75
    446e:	f9 4e       	sbci	r31, 0xE9	; 233
    4470:	23 81       	ldd	r18, Z+3	; 0x03
    4472:	21 11       	cpse	r18, r1
    4474:	20 c0       	rjmp	.+64     	; 0x44b6 <_turn_on+0x5a>
    4476:	9c 01       	movw	r18, r24
    4478:	22 0f       	add	r18, r18
    447a:	33 1f       	adc	r19, r19
    447c:	f9 01       	movw	r30, r18
    447e:	e8 0f       	add	r30, r24
    4480:	f9 1f       	adc	r31, r25
    4482:	ee 0f       	add	r30, r30
    4484:	ff 1f       	adc	r31, r31
    4486:	eb 54       	subi	r30, 0x4B	; 75
    4488:	f9 4e       	sbci	r31, 0xE9	; 233
    448a:	a0 81       	ld	r26, Z
    448c:	b1 81       	ldd	r27, Z+1	; 0x01
    448e:	4c 91       	ld	r20, X
    4490:	f9 01       	movw	r30, r18
    4492:	e8 0f       	add	r30, r24
    4494:	f9 1f       	adc	r31, r25
    4496:	ee 0f       	add	r30, r30
    4498:	ff 1f       	adc	r31, r31
    449a:	eb 54       	subi	r30, 0x4B	; 75
    449c:	f9 4e       	sbci	r31, 0xE9	; 233
    449e:	81 e0       	ldi	r24, 0x01	; 1
    44a0:	90 e0       	ldi	r25, 0x00	; 0
    44a2:	02 80       	ldd	r0, Z+2	; 0x02
    44a4:	02 c0       	rjmp	.+4      	; 0x44aa <_turn_on+0x4e>
    44a6:	88 0f       	add	r24, r24
    44a8:	99 1f       	adc	r25, r25
    44aa:	0a 94       	dec	r0
    44ac:	e2 f7       	brpl	.-8      	; 0x44a6 <_turn_on+0x4a>
    44ae:	80 95       	com	r24
    44b0:	84 23       	and	r24, r20
    44b2:	8c 93       	st	X, r24
    44b4:	08 95       	ret
    44b6:	fc 01       	movw	r30, r24
    44b8:	ee 0f       	add	r30, r30
    44ba:	ff 1f       	adc	r31, r31
    44bc:	df 01       	movw	r26, r30
    44be:	a8 0f       	add	r26, r24
    44c0:	b9 1f       	adc	r27, r25
    44c2:	aa 0f       	add	r26, r26
    44c4:	bb 1f       	adc	r27, r27
    44c6:	ab 54       	subi	r26, 0x4B	; 75
    44c8:	b9 4e       	sbci	r27, 0xE9	; 233
    44ca:	0d 90       	ld	r0, X+
    44cc:	bc 91       	ld	r27, X
    44ce:	a0 2d       	mov	r26, r0
    44d0:	2c 91       	ld	r18, X
    44d2:	e8 0f       	add	r30, r24
    44d4:	f9 1f       	adc	r31, r25
    44d6:	ee 0f       	add	r30, r30
    44d8:	ff 1f       	adc	r31, r31
    44da:	eb 54       	subi	r30, 0x4B	; 75
    44dc:	f9 4e       	sbci	r31, 0xE9	; 233
    44de:	81 e0       	ldi	r24, 0x01	; 1
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	02 80       	ldd	r0, Z+2	; 0x02
    44e4:	02 c0       	rjmp	.+4      	; 0x44ea <_turn_on+0x8e>
    44e6:	88 0f       	add	r24, r24
    44e8:	99 1f       	adc	r25, r25
    44ea:	0a 94       	dec	r0
    44ec:	e2 f7       	brpl	.-8      	; 0x44e6 <_turn_on+0x8a>
    44ee:	82 2b       	or	r24, r18
    44f0:	8c 93       	st	X, r24
    44f2:	08 95       	ret

000044f4 <status_leds_slowBlink>:
    44f4:	cf 93       	push	r28
    44f6:	df 93       	push	r29
    44f8:	90 e0       	ldi	r25, 0x00	; 0
    44fa:	fc 01       	movw	r30, r24
    44fc:	ee 0f       	add	r30, r30
    44fe:	ff 1f       	adc	r31, r31
    4500:	df 01       	movw	r26, r30
    4502:	a8 0f       	add	r26, r24
    4504:	b9 1f       	adc	r27, r25
    4506:	aa 0f       	add	r26, r26
    4508:	bb 1f       	adc	r27, r27
    450a:	ab 54       	subi	r26, 0x4B	; 75
    450c:	b9 4e       	sbci	r27, 0xE9	; 233
    450e:	cd 91       	ld	r28, X+
    4510:	dc 91       	ld	r29, X
    4512:	11 97       	sbiw	r26, 0x01	; 1
    4514:	48 81       	ld	r20, Y
    4516:	21 e0       	ldi	r18, 0x01	; 1
    4518:	30 e0       	ldi	r19, 0x00	; 0
    451a:	12 96       	adiw	r26, 0x02	; 2
    451c:	0c 90       	ld	r0, X
    451e:	12 97       	sbiw	r26, 0x02	; 2
    4520:	02 c0       	rjmp	.+4      	; 0x4526 <status_leds_slowBlink+0x32>
    4522:	22 0f       	add	r18, r18
    4524:	33 1f       	adc	r19, r19
    4526:	0a 94       	dec	r0
    4528:	e2 f7       	brpl	.-8      	; 0x4522 <status_leds_slowBlink+0x2e>
    452a:	24 27       	eor	r18, r20
    452c:	28 83       	st	Y, r18
    452e:	fd 01       	movw	r30, r26
    4530:	81 e0       	ldi	r24, 0x01	; 1
    4532:	84 83       	std	Z+4, r24	; 0x04
    4534:	df 91       	pop	r29
    4536:	cf 91       	pop	r28
    4538:	08 95       	ret

0000453a <status_leds_fastBlink>:
    453a:	cf 93       	push	r28
    453c:	df 93       	push	r29
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	fc 01       	movw	r30, r24
    4542:	ee 0f       	add	r30, r30
    4544:	ff 1f       	adc	r31, r31
    4546:	df 01       	movw	r26, r30
    4548:	a8 0f       	add	r26, r24
    454a:	b9 1f       	adc	r27, r25
    454c:	aa 0f       	add	r26, r26
    454e:	bb 1f       	adc	r27, r27
    4550:	ab 54       	subi	r26, 0x4B	; 75
    4552:	b9 4e       	sbci	r27, 0xE9	; 233
    4554:	cd 91       	ld	r28, X+
    4556:	dc 91       	ld	r29, X
    4558:	11 97       	sbiw	r26, 0x01	; 1
    455a:	48 81       	ld	r20, Y
    455c:	21 e0       	ldi	r18, 0x01	; 1
    455e:	30 e0       	ldi	r19, 0x00	; 0
    4560:	12 96       	adiw	r26, 0x02	; 2
    4562:	0c 90       	ld	r0, X
    4564:	12 97       	sbiw	r26, 0x02	; 2
    4566:	02 c0       	rjmp	.+4      	; 0x456c <status_leds_fastBlink+0x32>
    4568:	22 0f       	add	r18, r18
    456a:	33 1f       	adc	r19, r19
    456c:	0a 94       	dec	r0
    456e:	e2 f7       	brpl	.-8      	; 0x4568 <status_leds_fastBlink+0x2e>
    4570:	24 27       	eor	r18, r20
    4572:	28 83       	st	Y, r18
    4574:	fd 01       	movw	r30, r26
    4576:	82 e0       	ldi	r24, 0x02	; 2
    4578:	84 83       	std	Z+4, r24	; 0x04
    457a:	df 91       	pop	r29
    457c:	cf 91       	pop	r28
    457e:	08 95       	ret

00004580 <status_leds_ledOn>:
    4580:	28 2f       	mov	r18, r24
    4582:	30 e0       	ldi	r19, 0x00	; 0
    4584:	f9 01       	movw	r30, r18
    4586:	ee 0f       	add	r30, r30
    4588:	ff 1f       	adc	r31, r31
    458a:	e2 0f       	add	r30, r18
    458c:	f3 1f       	adc	r31, r19
    458e:	ee 0f       	add	r30, r30
    4590:	ff 1f       	adc	r31, r31
    4592:	eb 54       	subi	r30, 0x4B	; 75
    4594:	f9 4e       	sbci	r31, 0xE9	; 233
    4596:	93 e0       	ldi	r25, 0x03	; 3
    4598:	94 83       	std	Z+4, r25	; 0x04
    459a:	60 cf       	rjmp	.-320    	; 0x445c <_turn_on>
    459c:	08 95       	ret

0000459e <status_leds_ledOff>:
    459e:	28 2f       	mov	r18, r24
    45a0:	30 e0       	ldi	r19, 0x00	; 0
    45a2:	f9 01       	movw	r30, r18
    45a4:	ee 0f       	add	r30, r30
    45a6:	ff 1f       	adc	r31, r31
    45a8:	e2 0f       	add	r30, r18
    45aa:	f3 1f       	adc	r31, r19
    45ac:	ee 0f       	add	r30, r30
    45ae:	ff 1f       	adc	r31, r31
    45b0:	eb 54       	subi	r30, 0x4B	; 75
    45b2:	f9 4e       	sbci	r31, 0xE9	; 233
    45b4:	94 e0       	ldi	r25, 0x04	; 4
    45b6:	94 83       	std	Z+4, r25	; 0x04
    45b8:	05 cf       	rjmp	.-502    	; 0x43c4 <_turn_off>
    45ba:	08 95       	ret

000045bc <status_leds_longPuls>:
    45bc:	90 e0       	ldi	r25, 0x00	; 0
    45be:	fc 01       	movw	r30, r24
    45c0:	ee 0f       	add	r30, r30
    45c2:	ff 1f       	adc	r31, r31
    45c4:	df 01       	movw	r26, r30
    45c6:	a8 0f       	add	r26, r24
    45c8:	b9 1f       	adc	r27, r25
    45ca:	aa 0f       	add	r26, r26
    45cc:	bb 1f       	adc	r27, r27
    45ce:	ab 54       	subi	r26, 0x4B	; 75
    45d0:	b9 4e       	sbci	r27, 0xE9	; 233
    45d2:	26 e0       	ldi	r18, 0x06	; 6
    45d4:	15 96       	adiw	r26, 0x05	; 5
    45d6:	2c 93       	st	X, r18
    45d8:	15 97       	sbiw	r26, 0x05	; 5
    45da:	fd 01       	movw	r30, r26
    45dc:	14 82       	std	Z+4, r1	; 0x04
    45de:	08 95       	ret

000045e0 <status_leds_shortPuls>:
    45e0:	90 e0       	ldi	r25, 0x00	; 0
    45e2:	fc 01       	movw	r30, r24
    45e4:	ee 0f       	add	r30, r30
    45e6:	ff 1f       	adc	r31, r31
    45e8:	df 01       	movw	r26, r30
    45ea:	a8 0f       	add	r26, r24
    45ec:	b9 1f       	adc	r27, r25
    45ee:	aa 0f       	add	r26, r26
    45f0:	bb 1f       	adc	r27, r27
    45f2:	ab 54       	subi	r26, 0x4B	; 75
    45f4:	b9 4e       	sbci	r27, 0xE9	; 233
    45f6:	15 96       	adiw	r26, 0x05	; 5
    45f8:	1c 92       	st	X, r1
    45fa:	15 97       	sbiw	r26, 0x05	; 5
    45fc:	fd 01       	movw	r30, r26
    45fe:	14 82       	std	Z+4, r1	; 0x04
    4600:	08 95       	ret

00004602 <__vector_39>:
    4602:	1f 92       	push	r1
    4604:	0f 92       	push	r0
    4606:	0f b6       	in	r0, 0x3f	; 63
    4608:	0f 92       	push	r0
    460a:	11 24       	eor	r1, r1
    460c:	0b b6       	in	r0, 0x3b	; 59
    460e:	0f 92       	push	r0
    4610:	2f 93       	push	r18
    4612:	3f 93       	push	r19
    4614:	4f 93       	push	r20
    4616:	5f 93       	push	r21
    4618:	6f 93       	push	r22
    461a:	7f 93       	push	r23
    461c:	8f 93       	push	r24
    461e:	9f 93       	push	r25
    4620:	af 93       	push	r26
    4622:	bf 93       	push	r27
    4624:	ef 93       	push	r30
    4626:	ff 93       	push	r31
    4628:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    462c:	8e 2f       	mov	r24, r30
    462e:	90 e0       	ldi	r25, 0x00	; 0
    4630:	fc 01       	movw	r30, r24
    4632:	38 97       	sbiw	r30, 0x08	; 8
    4634:	e1 35       	cpi	r30, 0x51	; 81
    4636:	f1 05       	cpc	r31, r1
    4638:	08 f0       	brcs	.+2      	; 0x463c <__vector_39+0x3a>
    463a:	75 c0       	rjmp	.+234    	; 0x4726 <__vector_39+0x124>
    463c:	88 27       	eor	r24, r24
    463e:	e4 58       	subi	r30, 0x84	; 132
    4640:	ff 4f       	sbci	r31, 0xFF	; 255
    4642:	8f 4f       	sbci	r24, 0xFF	; 255
    4644:	54 c2       	rjmp	.+1192   	; 0x4aee <__tablejump2__>
    4646:	10 92 cd 16 	sts	0x16CD, r1	; 0x8016cd <_index.1885>
    464a:	e0 91 cd 16 	lds	r30, 0x16CD	; 0x8016cd <_index.1885>
    464e:	80 91 d0 16 	lds	r24, 0x16D0	; 0x8016d0 <_twiMessageLen>
    4652:	e8 17       	cp	r30, r24
    4654:	70 f4       	brcc	.+28     	; 0x4672 <__vector_39+0x70>
    4656:	81 e0       	ldi	r24, 0x01	; 1
    4658:	8e 0f       	add	r24, r30
    465a:	80 93 cd 16 	sts	0x16CD, r24	; 0x8016cd <_index.1885>
    465e:	f0 e0       	ldi	r31, 0x00	; 0
    4660:	ef 52       	subi	r30, 0x2F	; 47
    4662:	f9 4e       	sbci	r31, 0xE9	; 233
    4664:	80 81       	ld	r24, Z
    4666:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    466a:	85 e8       	ldi	r24, 0x85	; 133
    466c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4670:	72 c0       	rjmp	.+228    	; 0x4756 <__vector_39+0x154>
    4672:	84 e9       	ldi	r24, 0x94	; 148
    4674:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4678:	80 91 ce 16 	lds	r24, 0x16CE	; 0x8016ce <_twiCurrentHandler>
    467c:	90 91 cf 16 	lds	r25, 0x16CF	; 0x8016cf <_twiCurrentHandler+0x1>
    4680:	dc 01       	movw	r26, r24
    4682:	12 96       	adiw	r26, 0x02	; 2
    4684:	ed 91       	ld	r30, X+
    4686:	fc 91       	ld	r31, X
    4688:	13 97       	sbiw	r26, 0x03	; 3
    468a:	30 97       	sbiw	r30, 0x00	; 0
    468c:	09 f4       	brne	.+2      	; 0x4690 <__vector_39+0x8e>
    468e:	63 c0       	rjmp	.+198    	; 0x4756 <__vector_39+0x154>
    4690:	20 e0       	ldi	r18, 0x00	; 0
    4692:	40 e0       	ldi	r20, 0x00	; 0
    4694:	50 e0       	ldi	r21, 0x00	; 0
    4696:	64 e0       	ldi	r22, 0x04	; 4
    4698:	19 95       	eicall
    469a:	5d c0       	rjmp	.+186    	; 0x4756 <__vector_39+0x154>
    469c:	e0 91 cd 16 	lds	r30, 0x16CD	; 0x8016cd <_index.1885>
    46a0:	81 e0       	ldi	r24, 0x01	; 1
    46a2:	8e 0f       	add	r24, r30
    46a4:	80 93 cd 16 	sts	0x16CD, r24	; 0x8016cd <_index.1885>
    46a8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    46ac:	f0 e0       	ldi	r31, 0x00	; 0
    46ae:	ef 52       	subi	r30, 0x2F	; 47
    46b0:	f9 4e       	sbci	r31, 0xE9	; 233
    46b2:	80 83       	st	Z, r24
    46b4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    46b8:	80 34       	cpi	r24, 0x40	; 64
    46ba:	11 f4       	brne	.+4      	; 0x46c0 <__vector_39+0xbe>
    46bc:	10 92 cd 16 	sts	0x16CD, r1	; 0x8016cd <_index.1885>
    46c0:	20 91 cd 16 	lds	r18, 0x16CD	; 0x8016cd <_index.1885>
    46c4:	30 e0       	ldi	r19, 0x00	; 0
    46c6:	80 91 d0 16 	lds	r24, 0x16D0	; 0x8016d0 <_twiMessageLen>
    46ca:	90 e0       	ldi	r25, 0x00	; 0
    46cc:	01 97       	sbiw	r24, 0x01	; 1
    46ce:	28 17       	cp	r18, r24
    46d0:	39 07       	cpc	r19, r25
    46d2:	24 f4       	brge	.+8      	; 0x46dc <__vector_39+0xda>
    46d4:	85 ec       	ldi	r24, 0xC5	; 197
    46d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    46da:	3d c0       	rjmp	.+122    	; 0x4756 <__vector_39+0x154>
    46dc:	85 e8       	ldi	r24, 0x85	; 133
    46de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    46e2:	39 c0       	rjmp	.+114    	; 0x4756 <__vector_39+0x154>
    46e4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    46e8:	e0 91 cd 16 	lds	r30, 0x16CD	; 0x8016cd <_index.1885>
    46ec:	f0 e0       	ldi	r31, 0x00	; 0
    46ee:	ef 52       	subi	r30, 0x2F	; 47
    46f0:	f9 4e       	sbci	r31, 0xE9	; 233
    46f2:	80 83       	st	Z, r24
    46f4:	84 e9       	ldi	r24, 0x94	; 148
    46f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    46fa:	80 91 ce 16 	lds	r24, 0x16CE	; 0x8016ce <_twiCurrentHandler>
    46fe:	90 91 cf 16 	lds	r25, 0x16CF	; 0x8016cf <_twiCurrentHandler+0x1>
    4702:	dc 01       	movw	r26, r24
    4704:	12 96       	adiw	r26, 0x02	; 2
    4706:	ed 91       	ld	r30, X+
    4708:	fc 91       	ld	r31, X
    470a:	13 97       	sbiw	r26, 0x03	; 3
    470c:	30 97       	sbiw	r30, 0x00	; 0
    470e:	19 f1       	breq	.+70     	; 0x4756 <__vector_39+0x154>
    4710:	20 91 d0 16 	lds	r18, 0x16D0	; 0x8016d0 <_twiMessageLen>
    4714:	41 ed       	ldi	r20, 0xD1	; 209
    4716:	56 e1       	ldi	r21, 0x16	; 22
    4718:	65 e0       	ldi	r22, 0x05	; 5
    471a:	19 95       	eicall
    471c:	1c c0       	rjmp	.+56     	; 0x4756 <__vector_39+0x154>
    471e:	85 ea       	ldi	r24, 0xA5	; 165
    4720:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4724:	18 c0       	rjmp	.+48     	; 0x4756 <__vector_39+0x154>
    4726:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    472a:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <_twiCurrentState>
    472e:	84 e0       	ldi	r24, 0x04	; 4
    4730:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4734:	80 91 ce 16 	lds	r24, 0x16CE	; 0x8016ce <_twiCurrentHandler>
    4738:	90 91 cf 16 	lds	r25, 0x16CF	; 0x8016cf <_twiCurrentHandler+0x1>
    473c:	dc 01       	movw	r26, r24
    473e:	12 96       	adiw	r26, 0x02	; 2
    4740:	ed 91       	ld	r30, X+
    4742:	fc 91       	ld	r31, X
    4744:	13 97       	sbiw	r26, 0x03	; 3
    4746:	30 97       	sbiw	r30, 0x00	; 0
    4748:	31 f0       	breq	.+12     	; 0x4756 <__vector_39+0x154>
    474a:	20 e0       	ldi	r18, 0x00	; 0
    474c:	40 e0       	ldi	r20, 0x00	; 0
    474e:	50 e0       	ldi	r21, 0x00	; 0
    4750:	60 91 1d 02 	lds	r22, 0x021D	; 0x80021d <_twiCurrentState>
    4754:	19 95       	eicall
    4756:	ff 91       	pop	r31
    4758:	ef 91       	pop	r30
    475a:	bf 91       	pop	r27
    475c:	af 91       	pop	r26
    475e:	9f 91       	pop	r25
    4760:	8f 91       	pop	r24
    4762:	7f 91       	pop	r23
    4764:	6f 91       	pop	r22
    4766:	5f 91       	pop	r21
    4768:	4f 91       	pop	r20
    476a:	3f 91       	pop	r19
    476c:	2f 91       	pop	r18
    476e:	0f 90       	pop	r0
    4770:	0b be       	out	0x3b, r0	; 59
    4772:	0f 90       	pop	r0
    4774:	0f be       	out	0x3f, r0	; 63
    4776:	0f 90       	pop	r0
    4778:	1f 90       	pop	r1
    477a:	18 95       	reti

0000477c <fifo_init>:
    477c:	fc 01       	movw	r30, r24
    477e:	41 11       	cpse	r20, r1
    4780:	01 c0       	rjmp	.+2      	; 0x4784 <fifo_init+0x8>
    4782:	de d2       	rcall	.+1468   	; 0x4d40 <abort>
    4784:	84 2f       	mov	r24, r20
    4786:	90 e0       	ldi	r25, 0x00	; 0
    4788:	9c 01       	movw	r18, r24
    478a:	21 50       	subi	r18, 0x01	; 1
    478c:	31 09       	sbc	r19, r1
    478e:	82 23       	and	r24, r18
    4790:	93 23       	and	r25, r19
    4792:	89 2b       	or	r24, r25
    4794:	09 f0       	breq	.+2      	; 0x4798 <fifo_init+0x1c>
    4796:	d4 d2       	rcall	.+1448   	; 0x4d40 <abort>
    4798:	41 38       	cpi	r20, 0x81	; 129
    479a:	08 f0       	brcs	.+2      	; 0x479e <fifo_init+0x22>
    479c:	d1 d2       	rcall	.+1442   	; 0x4d40 <abort>
    479e:	12 82       	std	Z+2, r1	; 0x02
    47a0:	13 82       	std	Z+3, r1	; 0x03
    47a2:	44 83       	std	Z+4, r20	; 0x04
    47a4:	44 0f       	add	r20, r20
    47a6:	41 50       	subi	r20, 0x01	; 1
    47a8:	45 83       	std	Z+5, r20	; 0x05
    47aa:	71 83       	std	Z+1, r23	; 0x01
    47ac:	60 83       	st	Z, r22
    47ae:	80 e0       	ldi	r24, 0x00	; 0
    47b0:	90 e0       	ldi	r25, 0x00	; 0
    47b2:	08 95       	ret

000047b4 <__subsf3>:
    47b4:	50 58       	subi	r21, 0x80	; 128

000047b6 <__addsf3>:
    47b6:	bb 27       	eor	r27, r27
    47b8:	aa 27       	eor	r26, r26
    47ba:	0e d0       	rcall	.+28     	; 0x47d8 <__addsf3x>
    47bc:	21 c1       	rjmp	.+578    	; 0x4a00 <__fp_round>
    47be:	12 d1       	rcall	.+548    	; 0x49e4 <__fp_pscA>
    47c0:	30 f0       	brcs	.+12     	; 0x47ce <__addsf3+0x18>
    47c2:	17 d1       	rcall	.+558    	; 0x49f2 <__fp_pscB>
    47c4:	20 f0       	brcs	.+8      	; 0x47ce <__addsf3+0x18>
    47c6:	31 f4       	brne	.+12     	; 0x47d4 <__addsf3+0x1e>
    47c8:	9f 3f       	cpi	r25, 0xFF	; 255
    47ca:	11 f4       	brne	.+4      	; 0x47d0 <__addsf3+0x1a>
    47cc:	1e f4       	brtc	.+6      	; 0x47d4 <__addsf3+0x1e>
    47ce:	07 c1       	rjmp	.+526    	; 0x49de <__fp_nan>
    47d0:	0e f4       	brtc	.+2      	; 0x47d4 <__addsf3+0x1e>
    47d2:	e0 95       	com	r30
    47d4:	e7 fb       	bst	r30, 7
    47d6:	fd c0       	rjmp	.+506    	; 0x49d2 <__fp_inf>

000047d8 <__addsf3x>:
    47d8:	e9 2f       	mov	r30, r25
    47da:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__fp_split3>
    47de:	78 f3       	brcs	.-34     	; 0x47be <__addsf3+0x8>
    47e0:	ba 17       	cp	r27, r26
    47e2:	62 07       	cpc	r22, r18
    47e4:	73 07       	cpc	r23, r19
    47e6:	84 07       	cpc	r24, r20
    47e8:	95 07       	cpc	r25, r21
    47ea:	20 f0       	brcs	.+8      	; 0x47f4 <__addsf3x+0x1c>
    47ec:	79 f4       	brne	.+30     	; 0x480c <__addsf3x+0x34>
    47ee:	a6 f5       	brtc	.+104    	; 0x4858 <__addsf3x+0x80>
    47f0:	0c 94 95 19 	jmp	0x332a	; 0x332a <__fp_zero>
    47f4:	0e f4       	brtc	.+2      	; 0x47f8 <__addsf3x+0x20>
    47f6:	e0 95       	com	r30
    47f8:	0b 2e       	mov	r0, r27
    47fa:	ba 2f       	mov	r27, r26
    47fc:	a0 2d       	mov	r26, r0
    47fe:	0b 01       	movw	r0, r22
    4800:	b9 01       	movw	r22, r18
    4802:	90 01       	movw	r18, r0
    4804:	0c 01       	movw	r0, r24
    4806:	ca 01       	movw	r24, r20
    4808:	a0 01       	movw	r20, r0
    480a:	11 24       	eor	r1, r1
    480c:	ff 27       	eor	r31, r31
    480e:	59 1b       	sub	r21, r25
    4810:	99 f0       	breq	.+38     	; 0x4838 <__addsf3x+0x60>
    4812:	59 3f       	cpi	r21, 0xF9	; 249
    4814:	50 f4       	brcc	.+20     	; 0x482a <__addsf3x+0x52>
    4816:	50 3e       	cpi	r21, 0xE0	; 224
    4818:	68 f1       	brcs	.+90     	; 0x4874 <__addsf3x+0x9c>
    481a:	1a 16       	cp	r1, r26
    481c:	f0 40       	sbci	r31, 0x00	; 0
    481e:	a2 2f       	mov	r26, r18
    4820:	23 2f       	mov	r18, r19
    4822:	34 2f       	mov	r19, r20
    4824:	44 27       	eor	r20, r20
    4826:	58 5f       	subi	r21, 0xF8	; 248
    4828:	f3 cf       	rjmp	.-26     	; 0x4810 <__addsf3x+0x38>
    482a:	46 95       	lsr	r20
    482c:	37 95       	ror	r19
    482e:	27 95       	ror	r18
    4830:	a7 95       	ror	r26
    4832:	f0 40       	sbci	r31, 0x00	; 0
    4834:	53 95       	inc	r21
    4836:	c9 f7       	brne	.-14     	; 0x482a <__addsf3x+0x52>
    4838:	7e f4       	brtc	.+30     	; 0x4858 <__addsf3x+0x80>
    483a:	1f 16       	cp	r1, r31
    483c:	ba 0b       	sbc	r27, r26
    483e:	62 0b       	sbc	r22, r18
    4840:	73 0b       	sbc	r23, r19
    4842:	84 0b       	sbc	r24, r20
    4844:	ba f0       	brmi	.+46     	; 0x4874 <__addsf3x+0x9c>
    4846:	91 50       	subi	r25, 0x01	; 1
    4848:	a1 f0       	breq	.+40     	; 0x4872 <__addsf3x+0x9a>
    484a:	ff 0f       	add	r31, r31
    484c:	bb 1f       	adc	r27, r27
    484e:	66 1f       	adc	r22, r22
    4850:	77 1f       	adc	r23, r23
    4852:	88 1f       	adc	r24, r24
    4854:	c2 f7       	brpl	.-16     	; 0x4846 <__addsf3x+0x6e>
    4856:	0e c0       	rjmp	.+28     	; 0x4874 <__addsf3x+0x9c>
    4858:	ba 0f       	add	r27, r26
    485a:	62 1f       	adc	r22, r18
    485c:	73 1f       	adc	r23, r19
    485e:	84 1f       	adc	r24, r20
    4860:	48 f4       	brcc	.+18     	; 0x4874 <__addsf3x+0x9c>
    4862:	87 95       	ror	r24
    4864:	77 95       	ror	r23
    4866:	67 95       	ror	r22
    4868:	b7 95       	ror	r27
    486a:	f7 95       	ror	r31
    486c:	9e 3f       	cpi	r25, 0xFE	; 254
    486e:	08 f0       	brcs	.+2      	; 0x4872 <__addsf3x+0x9a>
    4870:	b1 cf       	rjmp	.-158    	; 0x47d4 <__addsf3+0x1e>
    4872:	93 95       	inc	r25
    4874:	88 0f       	add	r24, r24
    4876:	08 f0       	brcs	.+2      	; 0x487a <__addsf3x+0xa2>
    4878:	99 27       	eor	r25, r25
    487a:	ee 0f       	add	r30, r30
    487c:	97 95       	ror	r25
    487e:	87 95       	ror	r24
    4880:	08 95       	ret

00004882 <__divsf3>:
    4882:	0d d0       	rcall	.+26     	; 0x489e <__divsf3x>
    4884:	bd c0       	rjmp	.+378    	; 0x4a00 <__fp_round>
    4886:	b5 d0       	rcall	.+362    	; 0x49f2 <__fp_pscB>
    4888:	48 f0       	brcs	.+18     	; 0x489c <__divsf3+0x1a>
    488a:	ac d0       	rcall	.+344    	; 0x49e4 <__fp_pscA>
    488c:	38 f0       	brcs	.+14     	; 0x489c <__divsf3+0x1a>
    488e:	21 f4       	brne	.+8      	; 0x4898 <__divsf3+0x16>
    4890:	5f 3f       	cpi	r21, 0xFF	; 255
    4892:	21 f0       	breq	.+8      	; 0x489c <__divsf3+0x1a>
    4894:	9e c0       	rjmp	.+316    	; 0x49d2 <__fp_inf>
    4896:	51 11       	cpse	r21, r1
    4898:	0c 94 96 19 	jmp	0x332c	; 0x332c <__fp_szero>
    489c:	a0 c0       	rjmp	.+320    	; 0x49de <__fp_nan>

0000489e <__divsf3x>:
    489e:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__fp_split3>
    48a2:	88 f3       	brcs	.-30     	; 0x4886 <__divsf3+0x4>

000048a4 <__divsf3_pse>:
    48a4:	99 23       	and	r25, r25
    48a6:	b9 f3       	breq	.-18     	; 0x4896 <__divsf3+0x14>
    48a8:	55 23       	and	r21, r21
    48aa:	a1 f3       	breq	.-24     	; 0x4894 <__divsf3+0x12>
    48ac:	95 1b       	sub	r25, r21
    48ae:	55 0b       	sbc	r21, r21
    48b0:	bb 27       	eor	r27, r27
    48b2:	aa 27       	eor	r26, r26
    48b4:	62 17       	cp	r22, r18
    48b6:	73 07       	cpc	r23, r19
    48b8:	84 07       	cpc	r24, r20
    48ba:	38 f0       	brcs	.+14     	; 0x48ca <__divsf3_pse+0x26>
    48bc:	9f 5f       	subi	r25, 0xFF	; 255
    48be:	5f 4f       	sbci	r21, 0xFF	; 255
    48c0:	22 0f       	add	r18, r18
    48c2:	33 1f       	adc	r19, r19
    48c4:	44 1f       	adc	r20, r20
    48c6:	aa 1f       	adc	r26, r26
    48c8:	a9 f3       	breq	.-22     	; 0x48b4 <__divsf3_pse+0x10>
    48ca:	34 d0       	rcall	.+104    	; 0x4934 <__divsf3_pse+0x90>
    48cc:	0e 2e       	mov	r0, r30
    48ce:	3a f0       	brmi	.+14     	; 0x48de <__divsf3_pse+0x3a>
    48d0:	e0 e8       	ldi	r30, 0x80	; 128
    48d2:	31 d0       	rcall	.+98     	; 0x4936 <__divsf3_pse+0x92>
    48d4:	91 50       	subi	r25, 0x01	; 1
    48d6:	50 40       	sbci	r21, 0x00	; 0
    48d8:	e6 95       	lsr	r30
    48da:	00 1c       	adc	r0, r0
    48dc:	ca f7       	brpl	.-14     	; 0x48d0 <__divsf3_pse+0x2c>
    48de:	2a d0       	rcall	.+84     	; 0x4934 <__divsf3_pse+0x90>
    48e0:	fe 2f       	mov	r31, r30
    48e2:	28 d0       	rcall	.+80     	; 0x4934 <__divsf3_pse+0x90>
    48e4:	66 0f       	add	r22, r22
    48e6:	77 1f       	adc	r23, r23
    48e8:	88 1f       	adc	r24, r24
    48ea:	bb 1f       	adc	r27, r27
    48ec:	26 17       	cp	r18, r22
    48ee:	37 07       	cpc	r19, r23
    48f0:	48 07       	cpc	r20, r24
    48f2:	ab 07       	cpc	r26, r27
    48f4:	b0 e8       	ldi	r27, 0x80	; 128
    48f6:	09 f0       	breq	.+2      	; 0x48fa <__divsf3_pse+0x56>
    48f8:	bb 0b       	sbc	r27, r27
    48fa:	80 2d       	mov	r24, r0
    48fc:	bf 01       	movw	r22, r30
    48fe:	ff 27       	eor	r31, r31
    4900:	93 58       	subi	r25, 0x83	; 131
    4902:	5f 4f       	sbci	r21, 0xFF	; 255
    4904:	32 f0       	brmi	.+12     	; 0x4912 <__divsf3_pse+0x6e>
    4906:	9e 3f       	cpi	r25, 0xFE	; 254
    4908:	51 05       	cpc	r21, r1
    490a:	70 f0       	brcs	.+28     	; 0x4928 <__divsf3_pse+0x84>
    490c:	62 c0       	rjmp	.+196    	; 0x49d2 <__fp_inf>
    490e:	0c 94 96 19 	jmp	0x332c	; 0x332c <__fp_szero>
    4912:	5f 3f       	cpi	r21, 0xFF	; 255
    4914:	e4 f3       	brlt	.-8      	; 0x490e <__divsf3_pse+0x6a>
    4916:	98 3e       	cpi	r25, 0xE8	; 232
    4918:	d4 f3       	brlt	.-12     	; 0x490e <__divsf3_pse+0x6a>
    491a:	86 95       	lsr	r24
    491c:	77 95       	ror	r23
    491e:	67 95       	ror	r22
    4920:	b7 95       	ror	r27
    4922:	f7 95       	ror	r31
    4924:	9f 5f       	subi	r25, 0xFF	; 255
    4926:	c9 f7       	brne	.-14     	; 0x491a <__divsf3_pse+0x76>
    4928:	88 0f       	add	r24, r24
    492a:	91 1d       	adc	r25, r1
    492c:	96 95       	lsr	r25
    492e:	87 95       	ror	r24
    4930:	97 f9       	bld	r25, 7
    4932:	08 95       	ret
    4934:	e1 e0       	ldi	r30, 0x01	; 1
    4936:	66 0f       	add	r22, r22
    4938:	77 1f       	adc	r23, r23
    493a:	88 1f       	adc	r24, r24
    493c:	bb 1f       	adc	r27, r27
    493e:	62 17       	cp	r22, r18
    4940:	73 07       	cpc	r23, r19
    4942:	84 07       	cpc	r24, r20
    4944:	ba 07       	cpc	r27, r26
    4946:	20 f0       	brcs	.+8      	; 0x4950 <__divsf3_pse+0xac>
    4948:	62 1b       	sub	r22, r18
    494a:	73 0b       	sbc	r23, r19
    494c:	84 0b       	sbc	r24, r20
    494e:	ba 0b       	sbc	r27, r26
    4950:	ee 1f       	adc	r30, r30
    4952:	88 f7       	brcc	.-30     	; 0x4936 <__divsf3_pse+0x92>
    4954:	e0 95       	com	r30
    4956:	08 95       	ret

00004958 <__floatunsisf>:
    4958:	e8 94       	clt
    495a:	09 c0       	rjmp	.+18     	; 0x496e <__floatsisf+0x12>

0000495c <__floatsisf>:
    495c:	97 fb       	bst	r25, 7
    495e:	3e f4       	brtc	.+14     	; 0x496e <__floatsisf+0x12>
    4960:	90 95       	com	r25
    4962:	80 95       	com	r24
    4964:	70 95       	com	r23
    4966:	61 95       	neg	r22
    4968:	7f 4f       	sbci	r23, 0xFF	; 255
    496a:	8f 4f       	sbci	r24, 0xFF	; 255
    496c:	9f 4f       	sbci	r25, 0xFF	; 255
    496e:	99 23       	and	r25, r25
    4970:	a9 f0       	breq	.+42     	; 0x499c <__floatsisf+0x40>
    4972:	f9 2f       	mov	r31, r25
    4974:	96 e9       	ldi	r25, 0x96	; 150
    4976:	bb 27       	eor	r27, r27
    4978:	93 95       	inc	r25
    497a:	f6 95       	lsr	r31
    497c:	87 95       	ror	r24
    497e:	77 95       	ror	r23
    4980:	67 95       	ror	r22
    4982:	b7 95       	ror	r27
    4984:	f1 11       	cpse	r31, r1
    4986:	f8 cf       	rjmp	.-16     	; 0x4978 <__floatsisf+0x1c>
    4988:	fa f4       	brpl	.+62     	; 0x49c8 <__floatsisf+0x6c>
    498a:	bb 0f       	add	r27, r27
    498c:	11 f4       	brne	.+4      	; 0x4992 <__floatsisf+0x36>
    498e:	60 ff       	sbrs	r22, 0
    4990:	1b c0       	rjmp	.+54     	; 0x49c8 <__floatsisf+0x6c>
    4992:	6f 5f       	subi	r22, 0xFF	; 255
    4994:	7f 4f       	sbci	r23, 0xFF	; 255
    4996:	8f 4f       	sbci	r24, 0xFF	; 255
    4998:	9f 4f       	sbci	r25, 0xFF	; 255
    499a:	16 c0       	rjmp	.+44     	; 0x49c8 <__floatsisf+0x6c>
    499c:	88 23       	and	r24, r24
    499e:	11 f0       	breq	.+4      	; 0x49a4 <__floatsisf+0x48>
    49a0:	96 e9       	ldi	r25, 0x96	; 150
    49a2:	11 c0       	rjmp	.+34     	; 0x49c6 <__floatsisf+0x6a>
    49a4:	77 23       	and	r23, r23
    49a6:	21 f0       	breq	.+8      	; 0x49b0 <__floatsisf+0x54>
    49a8:	9e e8       	ldi	r25, 0x8E	; 142
    49aa:	87 2f       	mov	r24, r23
    49ac:	76 2f       	mov	r23, r22
    49ae:	05 c0       	rjmp	.+10     	; 0x49ba <__floatsisf+0x5e>
    49b0:	66 23       	and	r22, r22
    49b2:	71 f0       	breq	.+28     	; 0x49d0 <__floatsisf+0x74>
    49b4:	96 e8       	ldi	r25, 0x86	; 134
    49b6:	86 2f       	mov	r24, r22
    49b8:	70 e0       	ldi	r23, 0x00	; 0
    49ba:	60 e0       	ldi	r22, 0x00	; 0
    49bc:	2a f0       	brmi	.+10     	; 0x49c8 <__floatsisf+0x6c>
    49be:	9a 95       	dec	r25
    49c0:	66 0f       	add	r22, r22
    49c2:	77 1f       	adc	r23, r23
    49c4:	88 1f       	adc	r24, r24
    49c6:	da f7       	brpl	.-10     	; 0x49be <__floatsisf+0x62>
    49c8:	88 0f       	add	r24, r24
    49ca:	96 95       	lsr	r25
    49cc:	87 95       	ror	r24
    49ce:	97 f9       	bld	r25, 7
    49d0:	08 95       	ret

000049d2 <__fp_inf>:
    49d2:	97 f9       	bld	r25, 7
    49d4:	9f 67       	ori	r25, 0x7F	; 127
    49d6:	80 e8       	ldi	r24, 0x80	; 128
    49d8:	70 e0       	ldi	r23, 0x00	; 0
    49da:	60 e0       	ldi	r22, 0x00	; 0
    49dc:	08 95       	ret

000049de <__fp_nan>:
    49de:	9f ef       	ldi	r25, 0xFF	; 255
    49e0:	80 ec       	ldi	r24, 0xC0	; 192
    49e2:	08 95       	ret

000049e4 <__fp_pscA>:
    49e4:	00 24       	eor	r0, r0
    49e6:	0a 94       	dec	r0
    49e8:	16 16       	cp	r1, r22
    49ea:	17 06       	cpc	r1, r23
    49ec:	18 06       	cpc	r1, r24
    49ee:	09 06       	cpc	r0, r25
    49f0:	08 95       	ret

000049f2 <__fp_pscB>:
    49f2:	00 24       	eor	r0, r0
    49f4:	0a 94       	dec	r0
    49f6:	12 16       	cp	r1, r18
    49f8:	13 06       	cpc	r1, r19
    49fa:	14 06       	cpc	r1, r20
    49fc:	05 06       	cpc	r0, r21
    49fe:	08 95       	ret

00004a00 <__fp_round>:
    4a00:	09 2e       	mov	r0, r25
    4a02:	03 94       	inc	r0
    4a04:	00 0c       	add	r0, r0
    4a06:	11 f4       	brne	.+4      	; 0x4a0c <__fp_round+0xc>
    4a08:	88 23       	and	r24, r24
    4a0a:	52 f0       	brmi	.+20     	; 0x4a20 <__fp_round+0x20>
    4a0c:	bb 0f       	add	r27, r27
    4a0e:	40 f4       	brcc	.+16     	; 0x4a20 <__fp_round+0x20>
    4a10:	bf 2b       	or	r27, r31
    4a12:	11 f4       	brne	.+4      	; 0x4a18 <__fp_round+0x18>
    4a14:	60 ff       	sbrs	r22, 0
    4a16:	04 c0       	rjmp	.+8      	; 0x4a20 <__fp_round+0x20>
    4a18:	6f 5f       	subi	r22, 0xFF	; 255
    4a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a1c:	8f 4f       	sbci	r24, 0xFF	; 255
    4a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    4a20:	08 95       	ret

00004a22 <__mulsf3>:
    4a22:	0c d0       	rcall	.+24     	; 0x4a3c <__mulsf3x>
    4a24:	ed cf       	rjmp	.-38     	; 0x4a00 <__fp_round>
    4a26:	de df       	rcall	.-68     	; 0x49e4 <__fp_pscA>
    4a28:	28 f0       	brcs	.+10     	; 0x4a34 <__mulsf3+0x12>
    4a2a:	e3 df       	rcall	.-58     	; 0x49f2 <__fp_pscB>
    4a2c:	18 f0       	brcs	.+6      	; 0x4a34 <__mulsf3+0x12>
    4a2e:	95 23       	and	r25, r21
    4a30:	09 f0       	breq	.+2      	; 0x4a34 <__mulsf3+0x12>
    4a32:	cf cf       	rjmp	.-98     	; 0x49d2 <__fp_inf>
    4a34:	d4 cf       	rjmp	.-88     	; 0x49de <__fp_nan>
    4a36:	11 24       	eor	r1, r1
    4a38:	0c 94 96 19 	jmp	0x332c	; 0x332c <__fp_szero>

00004a3c <__mulsf3x>:
    4a3c:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__fp_split3>
    4a40:	90 f3       	brcs	.-28     	; 0x4a26 <__mulsf3+0x4>

00004a42 <__mulsf3_pse>:
    4a42:	95 9f       	mul	r25, r21
    4a44:	c1 f3       	breq	.-16     	; 0x4a36 <__mulsf3+0x14>
    4a46:	95 0f       	add	r25, r21
    4a48:	50 e0       	ldi	r21, 0x00	; 0
    4a4a:	55 1f       	adc	r21, r21
    4a4c:	62 9f       	mul	r22, r18
    4a4e:	f0 01       	movw	r30, r0
    4a50:	72 9f       	mul	r23, r18
    4a52:	bb 27       	eor	r27, r27
    4a54:	f0 0d       	add	r31, r0
    4a56:	b1 1d       	adc	r27, r1
    4a58:	63 9f       	mul	r22, r19
    4a5a:	aa 27       	eor	r26, r26
    4a5c:	f0 0d       	add	r31, r0
    4a5e:	b1 1d       	adc	r27, r1
    4a60:	aa 1f       	adc	r26, r26
    4a62:	64 9f       	mul	r22, r20
    4a64:	66 27       	eor	r22, r22
    4a66:	b0 0d       	add	r27, r0
    4a68:	a1 1d       	adc	r26, r1
    4a6a:	66 1f       	adc	r22, r22
    4a6c:	82 9f       	mul	r24, r18
    4a6e:	22 27       	eor	r18, r18
    4a70:	b0 0d       	add	r27, r0
    4a72:	a1 1d       	adc	r26, r1
    4a74:	62 1f       	adc	r22, r18
    4a76:	73 9f       	mul	r23, r19
    4a78:	b0 0d       	add	r27, r0
    4a7a:	a1 1d       	adc	r26, r1
    4a7c:	62 1f       	adc	r22, r18
    4a7e:	83 9f       	mul	r24, r19
    4a80:	a0 0d       	add	r26, r0
    4a82:	61 1d       	adc	r22, r1
    4a84:	22 1f       	adc	r18, r18
    4a86:	74 9f       	mul	r23, r20
    4a88:	33 27       	eor	r19, r19
    4a8a:	a0 0d       	add	r26, r0
    4a8c:	61 1d       	adc	r22, r1
    4a8e:	23 1f       	adc	r18, r19
    4a90:	84 9f       	mul	r24, r20
    4a92:	60 0d       	add	r22, r0
    4a94:	21 1d       	adc	r18, r1
    4a96:	82 2f       	mov	r24, r18
    4a98:	76 2f       	mov	r23, r22
    4a9a:	6a 2f       	mov	r22, r26
    4a9c:	11 24       	eor	r1, r1
    4a9e:	9f 57       	subi	r25, 0x7F	; 127
    4aa0:	50 40       	sbci	r21, 0x00	; 0
    4aa2:	92 f0       	brmi	.+36     	; 0x4ac8 <__mulsf3_pse+0x86>
    4aa4:	e9 f0       	breq	.+58     	; 0x4ae0 <__mulsf3_pse+0x9e>
    4aa6:	88 23       	and	r24, r24
    4aa8:	4a f0       	brmi	.+18     	; 0x4abc <__mulsf3_pse+0x7a>
    4aaa:	ee 0f       	add	r30, r30
    4aac:	ff 1f       	adc	r31, r31
    4aae:	bb 1f       	adc	r27, r27
    4ab0:	66 1f       	adc	r22, r22
    4ab2:	77 1f       	adc	r23, r23
    4ab4:	88 1f       	adc	r24, r24
    4ab6:	91 50       	subi	r25, 0x01	; 1
    4ab8:	50 40       	sbci	r21, 0x00	; 0
    4aba:	a9 f7       	brne	.-22     	; 0x4aa6 <__mulsf3_pse+0x64>
    4abc:	9e 3f       	cpi	r25, 0xFE	; 254
    4abe:	51 05       	cpc	r21, r1
    4ac0:	78 f0       	brcs	.+30     	; 0x4ae0 <__mulsf3_pse+0x9e>
    4ac2:	87 cf       	rjmp	.-242    	; 0x49d2 <__fp_inf>
    4ac4:	0c 94 96 19 	jmp	0x332c	; 0x332c <__fp_szero>
    4ac8:	5f 3f       	cpi	r21, 0xFF	; 255
    4aca:	e4 f3       	brlt	.-8      	; 0x4ac4 <__mulsf3_pse+0x82>
    4acc:	98 3e       	cpi	r25, 0xE8	; 232
    4ace:	d4 f3       	brlt	.-12     	; 0x4ac4 <__mulsf3_pse+0x82>
    4ad0:	86 95       	lsr	r24
    4ad2:	77 95       	ror	r23
    4ad4:	67 95       	ror	r22
    4ad6:	b7 95       	ror	r27
    4ad8:	f7 95       	ror	r31
    4ada:	e7 95       	ror	r30
    4adc:	9f 5f       	subi	r25, 0xFF	; 255
    4ade:	c1 f7       	brne	.-16     	; 0x4ad0 <__mulsf3_pse+0x8e>
    4ae0:	fe 2b       	or	r31, r30
    4ae2:	88 0f       	add	r24, r24
    4ae4:	91 1d       	adc	r25, r1
    4ae6:	96 95       	lsr	r25
    4ae8:	87 95       	ror	r24
    4aea:	97 f9       	bld	r25, 7
    4aec:	08 95       	ret

00004aee <__tablejump2__>:
    4aee:	ee 0f       	add	r30, r30
    4af0:	ff 1f       	adc	r31, r31
    4af2:	88 1f       	adc	r24, r24
    4af4:	8b bf       	out	0x3b, r24	; 59
    4af6:	07 90       	elpm	r0, Z+
    4af8:	f6 91       	elpm	r31, Z
    4afa:	e0 2d       	mov	r30, r0
    4afc:	19 94       	eijmp

00004afe <malloc>:
    4afe:	0f 93       	push	r16
    4b00:	1f 93       	push	r17
    4b02:	cf 93       	push	r28
    4b04:	df 93       	push	r29
    4b06:	82 30       	cpi	r24, 0x02	; 2
    4b08:	91 05       	cpc	r25, r1
    4b0a:	10 f4       	brcc	.+4      	; 0x4b10 <malloc+0x12>
    4b0c:	82 e0       	ldi	r24, 0x02	; 2
    4b0e:	90 e0       	ldi	r25, 0x00	; 0
    4b10:	e0 91 df 16 	lds	r30, 0x16DF	; 0x8016df <__flp>
    4b14:	f0 91 e0 16 	lds	r31, 0x16E0	; 0x8016e0 <__flp+0x1>
    4b18:	20 e0       	ldi	r18, 0x00	; 0
    4b1a:	30 e0       	ldi	r19, 0x00	; 0
    4b1c:	a0 e0       	ldi	r26, 0x00	; 0
    4b1e:	b0 e0       	ldi	r27, 0x00	; 0
    4b20:	30 97       	sbiw	r30, 0x00	; 0
    4b22:	19 f1       	breq	.+70     	; 0x4b6a <malloc+0x6c>
    4b24:	40 81       	ld	r20, Z
    4b26:	51 81       	ldd	r21, Z+1	; 0x01
    4b28:	02 81       	ldd	r16, Z+2	; 0x02
    4b2a:	13 81       	ldd	r17, Z+3	; 0x03
    4b2c:	48 17       	cp	r20, r24
    4b2e:	59 07       	cpc	r21, r25
    4b30:	c8 f0       	brcs	.+50     	; 0x4b64 <malloc+0x66>
    4b32:	84 17       	cp	r24, r20
    4b34:	95 07       	cpc	r25, r21
    4b36:	69 f4       	brne	.+26     	; 0x4b52 <malloc+0x54>
    4b38:	10 97       	sbiw	r26, 0x00	; 0
    4b3a:	31 f0       	breq	.+12     	; 0x4b48 <malloc+0x4a>
    4b3c:	12 96       	adiw	r26, 0x02	; 2
    4b3e:	0c 93       	st	X, r16
    4b40:	12 97       	sbiw	r26, 0x02	; 2
    4b42:	13 96       	adiw	r26, 0x03	; 3
    4b44:	1c 93       	st	X, r17
    4b46:	27 c0       	rjmp	.+78     	; 0x4b96 <malloc+0x98>
    4b48:	00 93 df 16 	sts	0x16DF, r16	; 0x8016df <__flp>
    4b4c:	10 93 e0 16 	sts	0x16E0, r17	; 0x8016e0 <__flp+0x1>
    4b50:	22 c0       	rjmp	.+68     	; 0x4b96 <malloc+0x98>
    4b52:	21 15       	cp	r18, r1
    4b54:	31 05       	cpc	r19, r1
    4b56:	19 f0       	breq	.+6      	; 0x4b5e <malloc+0x60>
    4b58:	42 17       	cp	r20, r18
    4b5a:	53 07       	cpc	r21, r19
    4b5c:	18 f4       	brcc	.+6      	; 0x4b64 <malloc+0x66>
    4b5e:	9a 01       	movw	r18, r20
    4b60:	bd 01       	movw	r22, r26
    4b62:	ef 01       	movw	r28, r30
    4b64:	df 01       	movw	r26, r30
    4b66:	f8 01       	movw	r30, r16
    4b68:	db cf       	rjmp	.-74     	; 0x4b20 <malloc+0x22>
    4b6a:	21 15       	cp	r18, r1
    4b6c:	31 05       	cpc	r19, r1
    4b6e:	f9 f0       	breq	.+62     	; 0x4bae <malloc+0xb0>
    4b70:	28 1b       	sub	r18, r24
    4b72:	39 0b       	sbc	r19, r25
    4b74:	24 30       	cpi	r18, 0x04	; 4
    4b76:	31 05       	cpc	r19, r1
    4b78:	80 f4       	brcc	.+32     	; 0x4b9a <malloc+0x9c>
    4b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b7c:	9b 81       	ldd	r25, Y+3	; 0x03
    4b7e:	61 15       	cp	r22, r1
    4b80:	71 05       	cpc	r23, r1
    4b82:	21 f0       	breq	.+8      	; 0x4b8c <malloc+0x8e>
    4b84:	fb 01       	movw	r30, r22
    4b86:	93 83       	std	Z+3, r25	; 0x03
    4b88:	82 83       	std	Z+2, r24	; 0x02
    4b8a:	04 c0       	rjmp	.+8      	; 0x4b94 <malloc+0x96>
    4b8c:	90 93 e0 16 	sts	0x16E0, r25	; 0x8016e0 <__flp+0x1>
    4b90:	80 93 df 16 	sts	0x16DF, r24	; 0x8016df <__flp>
    4b94:	fe 01       	movw	r30, r28
    4b96:	32 96       	adiw	r30, 0x02	; 2
    4b98:	44 c0       	rjmp	.+136    	; 0x4c22 <malloc+0x124>
    4b9a:	fe 01       	movw	r30, r28
    4b9c:	e2 0f       	add	r30, r18
    4b9e:	f3 1f       	adc	r31, r19
    4ba0:	81 93       	st	Z+, r24
    4ba2:	91 93       	st	Z+, r25
    4ba4:	22 50       	subi	r18, 0x02	; 2
    4ba6:	31 09       	sbc	r19, r1
    4ba8:	39 83       	std	Y+1, r19	; 0x01
    4baa:	28 83       	st	Y, r18
    4bac:	3a c0       	rjmp	.+116    	; 0x4c22 <malloc+0x124>
    4bae:	20 91 dd 16 	lds	r18, 0x16DD	; 0x8016dd <__brkval>
    4bb2:	30 91 de 16 	lds	r19, 0x16DE	; 0x8016de <__brkval+0x1>
    4bb6:	23 2b       	or	r18, r19
    4bb8:	41 f4       	brne	.+16     	; 0x4bca <malloc+0xcc>
    4bba:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4bbe:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4bc2:	30 93 de 16 	sts	0x16DE, r19	; 0x8016de <__brkval+0x1>
    4bc6:	20 93 dd 16 	sts	0x16DD, r18	; 0x8016dd <__brkval>
    4bca:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    4bce:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    4bd2:	21 15       	cp	r18, r1
    4bd4:	31 05       	cpc	r19, r1
    4bd6:	41 f4       	brne	.+16     	; 0x4be8 <malloc+0xea>
    4bd8:	2d b7       	in	r18, 0x3d	; 61
    4bda:	3e b7       	in	r19, 0x3e	; 62
    4bdc:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4be0:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4be4:	24 1b       	sub	r18, r20
    4be6:	35 0b       	sbc	r19, r21
    4be8:	e0 91 dd 16 	lds	r30, 0x16DD	; 0x8016dd <__brkval>
    4bec:	f0 91 de 16 	lds	r31, 0x16DE	; 0x8016de <__brkval+0x1>
    4bf0:	e2 17       	cp	r30, r18
    4bf2:	f3 07       	cpc	r31, r19
    4bf4:	a0 f4       	brcc	.+40     	; 0x4c1e <malloc+0x120>
    4bf6:	2e 1b       	sub	r18, r30
    4bf8:	3f 0b       	sbc	r19, r31
    4bfa:	28 17       	cp	r18, r24
    4bfc:	39 07       	cpc	r19, r25
    4bfe:	78 f0       	brcs	.+30     	; 0x4c1e <malloc+0x120>
    4c00:	ac 01       	movw	r20, r24
    4c02:	4e 5f       	subi	r20, 0xFE	; 254
    4c04:	5f 4f       	sbci	r21, 0xFF	; 255
    4c06:	24 17       	cp	r18, r20
    4c08:	35 07       	cpc	r19, r21
    4c0a:	48 f0       	brcs	.+18     	; 0x4c1e <malloc+0x120>
    4c0c:	4e 0f       	add	r20, r30
    4c0e:	5f 1f       	adc	r21, r31
    4c10:	50 93 de 16 	sts	0x16DE, r21	; 0x8016de <__brkval+0x1>
    4c14:	40 93 dd 16 	sts	0x16DD, r20	; 0x8016dd <__brkval>
    4c18:	81 93       	st	Z+, r24
    4c1a:	91 93       	st	Z+, r25
    4c1c:	02 c0       	rjmp	.+4      	; 0x4c22 <malloc+0x124>
    4c1e:	e0 e0       	ldi	r30, 0x00	; 0
    4c20:	f0 e0       	ldi	r31, 0x00	; 0
    4c22:	cf 01       	movw	r24, r30
    4c24:	df 91       	pop	r29
    4c26:	cf 91       	pop	r28
    4c28:	1f 91       	pop	r17
    4c2a:	0f 91       	pop	r16
    4c2c:	08 95       	ret

00004c2e <free>:
    4c2e:	cf 93       	push	r28
    4c30:	df 93       	push	r29
    4c32:	00 97       	sbiw	r24, 0x00	; 0
    4c34:	09 f4       	brne	.+2      	; 0x4c38 <free+0xa>
    4c36:	81 c0       	rjmp	.+258    	; 0x4d3a <free+0x10c>
    4c38:	fc 01       	movw	r30, r24
    4c3a:	32 97       	sbiw	r30, 0x02	; 2
    4c3c:	13 82       	std	Z+3, r1	; 0x03
    4c3e:	12 82       	std	Z+2, r1	; 0x02
    4c40:	a0 91 df 16 	lds	r26, 0x16DF	; 0x8016df <__flp>
    4c44:	b0 91 e0 16 	lds	r27, 0x16E0	; 0x8016e0 <__flp+0x1>
    4c48:	10 97       	sbiw	r26, 0x00	; 0
    4c4a:	81 f4       	brne	.+32     	; 0x4c6c <free+0x3e>
    4c4c:	20 81       	ld	r18, Z
    4c4e:	31 81       	ldd	r19, Z+1	; 0x01
    4c50:	82 0f       	add	r24, r18
    4c52:	93 1f       	adc	r25, r19
    4c54:	20 91 dd 16 	lds	r18, 0x16DD	; 0x8016dd <__brkval>
    4c58:	30 91 de 16 	lds	r19, 0x16DE	; 0x8016de <__brkval+0x1>
    4c5c:	28 17       	cp	r18, r24
    4c5e:	39 07       	cpc	r19, r25
    4c60:	51 f5       	brne	.+84     	; 0x4cb6 <free+0x88>
    4c62:	f0 93 de 16 	sts	0x16DE, r31	; 0x8016de <__brkval+0x1>
    4c66:	e0 93 dd 16 	sts	0x16DD, r30	; 0x8016dd <__brkval>
    4c6a:	67 c0       	rjmp	.+206    	; 0x4d3a <free+0x10c>
    4c6c:	ed 01       	movw	r28, r26
    4c6e:	20 e0       	ldi	r18, 0x00	; 0
    4c70:	30 e0       	ldi	r19, 0x00	; 0
    4c72:	ce 17       	cp	r28, r30
    4c74:	df 07       	cpc	r29, r31
    4c76:	40 f4       	brcc	.+16     	; 0x4c88 <free+0x5a>
    4c78:	4a 81       	ldd	r20, Y+2	; 0x02
    4c7a:	5b 81       	ldd	r21, Y+3	; 0x03
    4c7c:	9e 01       	movw	r18, r28
    4c7e:	41 15       	cp	r20, r1
    4c80:	51 05       	cpc	r21, r1
    4c82:	f1 f0       	breq	.+60     	; 0x4cc0 <free+0x92>
    4c84:	ea 01       	movw	r28, r20
    4c86:	f5 cf       	rjmp	.-22     	; 0x4c72 <free+0x44>
    4c88:	d3 83       	std	Z+3, r29	; 0x03
    4c8a:	c2 83       	std	Z+2, r28	; 0x02
    4c8c:	40 81       	ld	r20, Z
    4c8e:	51 81       	ldd	r21, Z+1	; 0x01
    4c90:	84 0f       	add	r24, r20
    4c92:	95 1f       	adc	r25, r21
    4c94:	c8 17       	cp	r28, r24
    4c96:	d9 07       	cpc	r29, r25
    4c98:	59 f4       	brne	.+22     	; 0x4cb0 <free+0x82>
    4c9a:	88 81       	ld	r24, Y
    4c9c:	99 81       	ldd	r25, Y+1	; 0x01
    4c9e:	84 0f       	add	r24, r20
    4ca0:	95 1f       	adc	r25, r21
    4ca2:	02 96       	adiw	r24, 0x02	; 2
    4ca4:	91 83       	std	Z+1, r25	; 0x01
    4ca6:	80 83       	st	Z, r24
    4ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    4caa:	9b 81       	ldd	r25, Y+3	; 0x03
    4cac:	93 83       	std	Z+3, r25	; 0x03
    4cae:	82 83       	std	Z+2, r24	; 0x02
    4cb0:	21 15       	cp	r18, r1
    4cb2:	31 05       	cpc	r19, r1
    4cb4:	29 f4       	brne	.+10     	; 0x4cc0 <free+0x92>
    4cb6:	f0 93 e0 16 	sts	0x16E0, r31	; 0x8016e0 <__flp+0x1>
    4cba:	e0 93 df 16 	sts	0x16DF, r30	; 0x8016df <__flp>
    4cbe:	3d c0       	rjmp	.+122    	; 0x4d3a <free+0x10c>
    4cc0:	e9 01       	movw	r28, r18
    4cc2:	fb 83       	std	Y+3, r31	; 0x03
    4cc4:	ea 83       	std	Y+2, r30	; 0x02
    4cc6:	49 91       	ld	r20, Y+
    4cc8:	59 91       	ld	r21, Y+
    4cca:	c4 0f       	add	r28, r20
    4ccc:	d5 1f       	adc	r29, r21
    4cce:	ec 17       	cp	r30, r28
    4cd0:	fd 07       	cpc	r31, r29
    4cd2:	61 f4       	brne	.+24     	; 0x4cec <free+0xbe>
    4cd4:	80 81       	ld	r24, Z
    4cd6:	91 81       	ldd	r25, Z+1	; 0x01
    4cd8:	84 0f       	add	r24, r20
    4cda:	95 1f       	adc	r25, r21
    4cdc:	02 96       	adiw	r24, 0x02	; 2
    4cde:	e9 01       	movw	r28, r18
    4ce0:	99 83       	std	Y+1, r25	; 0x01
    4ce2:	88 83       	st	Y, r24
    4ce4:	82 81       	ldd	r24, Z+2	; 0x02
    4ce6:	93 81       	ldd	r25, Z+3	; 0x03
    4ce8:	9b 83       	std	Y+3, r25	; 0x03
    4cea:	8a 83       	std	Y+2, r24	; 0x02
    4cec:	e0 e0       	ldi	r30, 0x00	; 0
    4cee:	f0 e0       	ldi	r31, 0x00	; 0
    4cf0:	12 96       	adiw	r26, 0x02	; 2
    4cf2:	8d 91       	ld	r24, X+
    4cf4:	9c 91       	ld	r25, X
    4cf6:	13 97       	sbiw	r26, 0x03	; 3
    4cf8:	00 97       	sbiw	r24, 0x00	; 0
    4cfa:	19 f0       	breq	.+6      	; 0x4d02 <free+0xd4>
    4cfc:	fd 01       	movw	r30, r26
    4cfe:	dc 01       	movw	r26, r24
    4d00:	f7 cf       	rjmp	.-18     	; 0x4cf0 <free+0xc2>
    4d02:	8d 91       	ld	r24, X+
    4d04:	9c 91       	ld	r25, X
    4d06:	11 97       	sbiw	r26, 0x01	; 1
    4d08:	9d 01       	movw	r18, r26
    4d0a:	2e 5f       	subi	r18, 0xFE	; 254
    4d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d0e:	82 0f       	add	r24, r18
    4d10:	93 1f       	adc	r25, r19
    4d12:	20 91 dd 16 	lds	r18, 0x16DD	; 0x8016dd <__brkval>
    4d16:	30 91 de 16 	lds	r19, 0x16DE	; 0x8016de <__brkval+0x1>
    4d1a:	28 17       	cp	r18, r24
    4d1c:	39 07       	cpc	r19, r25
    4d1e:	69 f4       	brne	.+26     	; 0x4d3a <free+0x10c>
    4d20:	30 97       	sbiw	r30, 0x00	; 0
    4d22:	29 f4       	brne	.+10     	; 0x4d2e <free+0x100>
    4d24:	10 92 e0 16 	sts	0x16E0, r1	; 0x8016e0 <__flp+0x1>
    4d28:	10 92 df 16 	sts	0x16DF, r1	; 0x8016df <__flp>
    4d2c:	02 c0       	rjmp	.+4      	; 0x4d32 <free+0x104>
    4d2e:	13 82       	std	Z+3, r1	; 0x03
    4d30:	12 82       	std	Z+2, r1	; 0x02
    4d32:	b0 93 de 16 	sts	0x16DE, r27	; 0x8016de <__brkval+0x1>
    4d36:	a0 93 dd 16 	sts	0x16DD, r26	; 0x8016dd <__brkval>
    4d3a:	df 91       	pop	r29
    4d3c:	cf 91       	pop	r28
    4d3e:	08 95       	ret

00004d40 <abort>:
    4d40:	81 e0       	ldi	r24, 0x01	; 1
    4d42:	90 e0       	ldi	r25, 0x00	; 0
    4d44:	f8 94       	cli
    4d46:	7d c3       	rjmp	.+1786   	; 0x5442 <_exit>

00004d48 <memcpy>:
    4d48:	fb 01       	movw	r30, r22
    4d4a:	dc 01       	movw	r26, r24
    4d4c:	02 c0       	rjmp	.+4      	; 0x4d52 <memcpy+0xa>
    4d4e:	01 90       	ld	r0, Z+
    4d50:	0d 92       	st	X+, r0
    4d52:	41 50       	subi	r20, 0x01	; 1
    4d54:	50 40       	sbci	r21, 0x00	; 0
    4d56:	d8 f7       	brcc	.-10     	; 0x4d4e <memcpy+0x6>
    4d58:	08 95       	ret

00004d5a <memset>:
    4d5a:	dc 01       	movw	r26, r24
    4d5c:	01 c0       	rjmp	.+2      	; 0x4d60 <memset+0x6>
    4d5e:	6d 93       	st	X+, r22
    4d60:	41 50       	subi	r20, 0x01	; 1
    4d62:	50 40       	sbci	r21, 0x00	; 0
    4d64:	e0 f7       	brcc	.-8      	; 0x4d5e <memset+0x4>
    4d66:	08 95       	ret

00004d68 <strcasestr>:
    4d68:	fb 01       	movw	r30, r22
    4d6a:	51 91       	ld	r21, Z+
    4d6c:	55 23       	and	r21, r21
    4d6e:	b1 f0       	breq	.+44     	; 0x4d9c <strcasestr+0x34>
    4d70:	bf 01       	movw	r22, r30
    4d72:	dc 01       	movw	r26, r24
    4d74:	05 2e       	mov	r0, r21
    4d76:	4d 91       	ld	r20, X+
    4d78:	44 23       	and	r20, r20
    4d7a:	69 f0       	breq	.+26     	; 0x4d96 <strcasestr+0x2e>
    4d7c:	10 d0       	rcall	.+32     	; 0x4d9e <strcasestr+0x36>
    4d7e:	d9 f7       	brne	.-10     	; 0x4d76 <strcasestr+0xe>
    4d80:	cd 01       	movw	r24, r26
    4d82:	01 90       	ld	r0, Z+
    4d84:	00 20       	and	r0, r0
    4d86:	49 f0       	breq	.+18     	; 0x4d9a <strcasestr+0x32>
    4d88:	4d 91       	ld	r20, X+
    4d8a:	41 11       	cpse	r20, r1
    4d8c:	08 d0       	rcall	.+16     	; 0x4d9e <strcasestr+0x36>
    4d8e:	c9 f3       	breq	.-14     	; 0x4d82 <strcasestr+0x1a>
    4d90:	fb 01       	movw	r30, r22
    4d92:	41 11       	cpse	r20, r1
    4d94:	ee cf       	rjmp	.-36     	; 0x4d72 <strcasestr+0xa>
    4d96:	81 e0       	ldi	r24, 0x01	; 1
    4d98:	90 e0       	ldi	r25, 0x00	; 0
    4d9a:	01 97       	sbiw	r24, 0x01	; 1
    4d9c:	08 95       	ret
    4d9e:	40 25       	eor	r20, r0
    4da0:	39 f0       	breq	.+14     	; 0x4db0 <strcasestr+0x48>
    4da2:	40 32       	cpi	r20, 0x20	; 32
    4da4:	29 f4       	brne	.+10     	; 0x4db0 <strcasestr+0x48>
    4da6:	40 29       	or	r20, r0
    4da8:	4b 57       	subi	r20, 0x7B	; 123
    4daa:	46 5e       	subi	r20, 0xE6	; 230
    4dac:	08 f0       	brcs	.+2      	; 0x4db0 <strcasestr+0x48>
    4dae:	18 94       	sez
    4db0:	08 95       	ret

00004db2 <strcat>:
    4db2:	fb 01       	movw	r30, r22
    4db4:	dc 01       	movw	r26, r24
    4db6:	0d 90       	ld	r0, X+
    4db8:	00 20       	and	r0, r0
    4dba:	e9 f7       	brne	.-6      	; 0x4db6 <strcat+0x4>
    4dbc:	11 97       	sbiw	r26, 0x01	; 1
    4dbe:	01 90       	ld	r0, Z+
    4dc0:	0d 92       	st	X+, r0
    4dc2:	00 20       	and	r0, r0
    4dc4:	e1 f7       	brne	.-8      	; 0x4dbe <strcat+0xc>
    4dc6:	08 95       	ret

00004dc8 <strcpy>:
    4dc8:	fb 01       	movw	r30, r22
    4dca:	dc 01       	movw	r26, r24
    4dcc:	01 90       	ld	r0, Z+
    4dce:	0d 92       	st	X+, r0
    4dd0:	00 20       	and	r0, r0
    4dd2:	e1 f7       	brne	.-8      	; 0x4dcc <strcpy+0x4>
    4dd4:	08 95       	ret

00004dd6 <strncasecmp>:
    4dd6:	fb 01       	movw	r30, r22
    4dd8:	dc 01       	movw	r26, r24
    4dda:	41 50       	subi	r20, 0x01	; 1
    4ddc:	50 40       	sbci	r21, 0x00	; 0
    4dde:	88 f0       	brcs	.+34     	; 0x4e02 <strncasecmp+0x2c>
    4de0:	8d 91       	ld	r24, X+
    4de2:	81 34       	cpi	r24, 0x41	; 65
    4de4:	1c f0       	brlt	.+6      	; 0x4dec <strncasecmp+0x16>
    4de6:	8b 35       	cpi	r24, 0x5B	; 91
    4de8:	0c f4       	brge	.+2      	; 0x4dec <strncasecmp+0x16>
    4dea:	80 5e       	subi	r24, 0xE0	; 224
    4dec:	61 91       	ld	r22, Z+
    4dee:	61 34       	cpi	r22, 0x41	; 65
    4df0:	1c f0       	brlt	.+6      	; 0x4df8 <strncasecmp+0x22>
    4df2:	6b 35       	cpi	r22, 0x5B	; 91
    4df4:	0c f4       	brge	.+2      	; 0x4df8 <strncasecmp+0x22>
    4df6:	60 5e       	subi	r22, 0xE0	; 224
    4df8:	86 1b       	sub	r24, r22
    4dfa:	61 11       	cpse	r22, r1
    4dfc:	71 f3       	breq	.-36     	; 0x4dda <strncasecmp+0x4>
    4dfe:	99 0b       	sbc	r25, r25
    4e00:	08 95       	ret
    4e02:	88 1b       	sub	r24, r24
    4e04:	fc cf       	rjmp	.-8      	; 0x4dfe <strncasecmp+0x28>

00004e06 <printf>:
    4e06:	cf 93       	push	r28
    4e08:	df 93       	push	r29
    4e0a:	cd b7       	in	r28, 0x3d	; 61
    4e0c:	de b7       	in	r29, 0x3e	; 62
    4e0e:	ae 01       	movw	r20, r28
    4e10:	4a 5f       	subi	r20, 0xFA	; 250
    4e12:	5f 4f       	sbci	r21, 0xFF	; 255
    4e14:	fa 01       	movw	r30, r20
    4e16:	61 91       	ld	r22, Z+
    4e18:	71 91       	ld	r23, Z+
    4e1a:	af 01       	movw	r20, r30
    4e1c:	80 91 e3 16 	lds	r24, 0x16E3	; 0x8016e3 <__iob+0x2>
    4e20:	90 91 e4 16 	lds	r25, 0x16E4	; 0x8016e4 <__iob+0x3>
    4e24:	61 d0       	rcall	.+194    	; 0x4ee8 <vfprintf>
    4e26:	df 91       	pop	r29
    4e28:	cf 91       	pop	r28
    4e2a:	08 95       	ret

00004e2c <puts>:
    4e2c:	0f 93       	push	r16
    4e2e:	1f 93       	push	r17
    4e30:	cf 93       	push	r28
    4e32:	df 93       	push	r29
    4e34:	e0 91 e3 16 	lds	r30, 0x16E3	; 0x8016e3 <__iob+0x2>
    4e38:	f0 91 e4 16 	lds	r31, 0x16E4	; 0x8016e4 <__iob+0x3>
    4e3c:	23 81       	ldd	r18, Z+3	; 0x03
    4e3e:	21 ff       	sbrs	r18, 1
    4e40:	1b c0       	rjmp	.+54     	; 0x4e78 <puts+0x4c>
    4e42:	8c 01       	movw	r16, r24
    4e44:	d0 e0       	ldi	r29, 0x00	; 0
    4e46:	c0 e0       	ldi	r28, 0x00	; 0
    4e48:	f8 01       	movw	r30, r16
    4e4a:	81 91       	ld	r24, Z+
    4e4c:	8f 01       	movw	r16, r30
    4e4e:	60 91 e3 16 	lds	r22, 0x16E3	; 0x8016e3 <__iob+0x2>
    4e52:	70 91 e4 16 	lds	r23, 0x16E4	; 0x8016e4 <__iob+0x3>
    4e56:	db 01       	movw	r26, r22
    4e58:	18 96       	adiw	r26, 0x08	; 8
    4e5a:	ed 91       	ld	r30, X+
    4e5c:	fc 91       	ld	r31, X
    4e5e:	19 97       	sbiw	r26, 0x09	; 9
    4e60:	88 23       	and	r24, r24
    4e62:	31 f0       	breq	.+12     	; 0x4e70 <puts+0x44>
    4e64:	19 95       	eicall
    4e66:	89 2b       	or	r24, r25
    4e68:	79 f3       	breq	.-34     	; 0x4e48 <puts+0x1c>
    4e6a:	df ef       	ldi	r29, 0xFF	; 255
    4e6c:	cf ef       	ldi	r28, 0xFF	; 255
    4e6e:	ec cf       	rjmp	.-40     	; 0x4e48 <puts+0x1c>
    4e70:	8a e0       	ldi	r24, 0x0A	; 10
    4e72:	19 95       	eicall
    4e74:	89 2b       	or	r24, r25
    4e76:	19 f0       	breq	.+6      	; 0x4e7e <puts+0x52>
    4e78:	8f ef       	ldi	r24, 0xFF	; 255
    4e7a:	9f ef       	ldi	r25, 0xFF	; 255
    4e7c:	02 c0       	rjmp	.+4      	; 0x4e82 <puts+0x56>
    4e7e:	8d 2f       	mov	r24, r29
    4e80:	9c 2f       	mov	r25, r28
    4e82:	df 91       	pop	r29
    4e84:	cf 91       	pop	r28
    4e86:	1f 91       	pop	r17
    4e88:	0f 91       	pop	r16
    4e8a:	08 95       	ret

00004e8c <sprintf>:
    4e8c:	0f 93       	push	r16
    4e8e:	1f 93       	push	r17
    4e90:	cf 93       	push	r28
    4e92:	df 93       	push	r29
    4e94:	cd b7       	in	r28, 0x3d	; 61
    4e96:	de b7       	in	r29, 0x3e	; 62
    4e98:	2e 97       	sbiw	r28, 0x0e	; 14
    4e9a:	0f b6       	in	r0, 0x3f	; 63
    4e9c:	f8 94       	cli
    4e9e:	de bf       	out	0x3e, r29	; 62
    4ea0:	0f be       	out	0x3f, r0	; 63
    4ea2:	cd bf       	out	0x3d, r28	; 61
    4ea4:	0e 89       	ldd	r16, Y+22	; 0x16
    4ea6:	1f 89       	ldd	r17, Y+23	; 0x17
    4ea8:	86 e0       	ldi	r24, 0x06	; 6
    4eaa:	8c 83       	std	Y+4, r24	; 0x04
    4eac:	1a 83       	std	Y+2, r17	; 0x02
    4eae:	09 83       	std	Y+1, r16	; 0x01
    4eb0:	8f ef       	ldi	r24, 0xFF	; 255
    4eb2:	9f e7       	ldi	r25, 0x7F	; 127
    4eb4:	9e 83       	std	Y+6, r25	; 0x06
    4eb6:	8d 83       	std	Y+5, r24	; 0x05
    4eb8:	ae 01       	movw	r20, r28
    4eba:	46 5e       	subi	r20, 0xE6	; 230
    4ebc:	5f 4f       	sbci	r21, 0xFF	; 255
    4ebe:	68 8d       	ldd	r22, Y+24	; 0x18
    4ec0:	79 8d       	ldd	r23, Y+25	; 0x19
    4ec2:	ce 01       	movw	r24, r28
    4ec4:	01 96       	adiw	r24, 0x01	; 1
    4ec6:	10 d0       	rcall	.+32     	; 0x4ee8 <vfprintf>
    4ec8:	ef 81       	ldd	r30, Y+7	; 0x07
    4eca:	f8 85       	ldd	r31, Y+8	; 0x08
    4ecc:	e0 0f       	add	r30, r16
    4ece:	f1 1f       	adc	r31, r17
    4ed0:	10 82       	st	Z, r1
    4ed2:	2e 96       	adiw	r28, 0x0e	; 14
    4ed4:	0f b6       	in	r0, 0x3f	; 63
    4ed6:	f8 94       	cli
    4ed8:	de bf       	out	0x3e, r29	; 62
    4eda:	0f be       	out	0x3f, r0	; 63
    4edc:	cd bf       	out	0x3d, r28	; 61
    4ede:	df 91       	pop	r29
    4ee0:	cf 91       	pop	r28
    4ee2:	1f 91       	pop	r17
    4ee4:	0f 91       	pop	r16
    4ee6:	08 95       	ret

00004ee8 <vfprintf>:
    4ee8:	2f 92       	push	r2
    4eea:	3f 92       	push	r3
    4eec:	4f 92       	push	r4
    4eee:	5f 92       	push	r5
    4ef0:	6f 92       	push	r6
    4ef2:	7f 92       	push	r7
    4ef4:	8f 92       	push	r8
    4ef6:	9f 92       	push	r9
    4ef8:	af 92       	push	r10
    4efa:	bf 92       	push	r11
    4efc:	cf 92       	push	r12
    4efe:	df 92       	push	r13
    4f00:	ef 92       	push	r14
    4f02:	ff 92       	push	r15
    4f04:	0f 93       	push	r16
    4f06:	1f 93       	push	r17
    4f08:	cf 93       	push	r28
    4f0a:	df 93       	push	r29
    4f0c:	cd b7       	in	r28, 0x3d	; 61
    4f0e:	de b7       	in	r29, 0x3e	; 62
    4f10:	2b 97       	sbiw	r28, 0x0b	; 11
    4f12:	0f b6       	in	r0, 0x3f	; 63
    4f14:	f8 94       	cli
    4f16:	de bf       	out	0x3e, r29	; 62
    4f18:	0f be       	out	0x3f, r0	; 63
    4f1a:	cd bf       	out	0x3d, r28	; 61
    4f1c:	6c 01       	movw	r12, r24
    4f1e:	7b 01       	movw	r14, r22
    4f20:	8a 01       	movw	r16, r20
    4f22:	fc 01       	movw	r30, r24
    4f24:	17 82       	std	Z+7, r1	; 0x07
    4f26:	16 82       	std	Z+6, r1	; 0x06
    4f28:	83 81       	ldd	r24, Z+3	; 0x03
    4f2a:	81 ff       	sbrs	r24, 1
    4f2c:	bf c1       	rjmp	.+894    	; 0x52ac <vfprintf+0x3c4>
    4f2e:	ce 01       	movw	r24, r28
    4f30:	01 96       	adiw	r24, 0x01	; 1
    4f32:	3c 01       	movw	r6, r24
    4f34:	f6 01       	movw	r30, r12
    4f36:	93 81       	ldd	r25, Z+3	; 0x03
    4f38:	f7 01       	movw	r30, r14
    4f3a:	93 fd       	sbrc	r25, 3
    4f3c:	85 91       	lpm	r24, Z+
    4f3e:	93 ff       	sbrs	r25, 3
    4f40:	81 91       	ld	r24, Z+
    4f42:	7f 01       	movw	r14, r30
    4f44:	88 23       	and	r24, r24
    4f46:	09 f4       	brne	.+2      	; 0x4f4a <vfprintf+0x62>
    4f48:	ad c1       	rjmp	.+858    	; 0x52a4 <vfprintf+0x3bc>
    4f4a:	85 32       	cpi	r24, 0x25	; 37
    4f4c:	39 f4       	brne	.+14     	; 0x4f5c <vfprintf+0x74>
    4f4e:	93 fd       	sbrc	r25, 3
    4f50:	85 91       	lpm	r24, Z+
    4f52:	93 ff       	sbrs	r25, 3
    4f54:	81 91       	ld	r24, Z+
    4f56:	7f 01       	movw	r14, r30
    4f58:	85 32       	cpi	r24, 0x25	; 37
    4f5a:	21 f4       	brne	.+8      	; 0x4f64 <vfprintf+0x7c>
    4f5c:	b6 01       	movw	r22, r12
    4f5e:	90 e0       	ldi	r25, 0x00	; 0
    4f60:	d6 d1       	rcall	.+940    	; 0x530e <fputc>
    4f62:	e8 cf       	rjmp	.-48     	; 0x4f34 <vfprintf+0x4c>
    4f64:	91 2c       	mov	r9, r1
    4f66:	21 2c       	mov	r2, r1
    4f68:	31 2c       	mov	r3, r1
    4f6a:	ff e1       	ldi	r31, 0x1F	; 31
    4f6c:	f3 15       	cp	r31, r3
    4f6e:	d8 f0       	brcs	.+54     	; 0x4fa6 <vfprintf+0xbe>
    4f70:	8b 32       	cpi	r24, 0x2B	; 43
    4f72:	79 f0       	breq	.+30     	; 0x4f92 <vfprintf+0xaa>
    4f74:	38 f4       	brcc	.+14     	; 0x4f84 <vfprintf+0x9c>
    4f76:	80 32       	cpi	r24, 0x20	; 32
    4f78:	79 f0       	breq	.+30     	; 0x4f98 <vfprintf+0xb0>
    4f7a:	83 32       	cpi	r24, 0x23	; 35
    4f7c:	a1 f4       	brne	.+40     	; 0x4fa6 <vfprintf+0xbe>
    4f7e:	23 2d       	mov	r18, r3
    4f80:	20 61       	ori	r18, 0x10	; 16
    4f82:	1d c0       	rjmp	.+58     	; 0x4fbe <vfprintf+0xd6>
    4f84:	8d 32       	cpi	r24, 0x2D	; 45
    4f86:	61 f0       	breq	.+24     	; 0x4fa0 <vfprintf+0xb8>
    4f88:	80 33       	cpi	r24, 0x30	; 48
    4f8a:	69 f4       	brne	.+26     	; 0x4fa6 <vfprintf+0xbe>
    4f8c:	23 2d       	mov	r18, r3
    4f8e:	21 60       	ori	r18, 0x01	; 1
    4f90:	16 c0       	rjmp	.+44     	; 0x4fbe <vfprintf+0xd6>
    4f92:	83 2d       	mov	r24, r3
    4f94:	82 60       	ori	r24, 0x02	; 2
    4f96:	38 2e       	mov	r3, r24
    4f98:	e3 2d       	mov	r30, r3
    4f9a:	e4 60       	ori	r30, 0x04	; 4
    4f9c:	3e 2e       	mov	r3, r30
    4f9e:	2a c0       	rjmp	.+84     	; 0x4ff4 <vfprintf+0x10c>
    4fa0:	f3 2d       	mov	r31, r3
    4fa2:	f8 60       	ori	r31, 0x08	; 8
    4fa4:	1d c0       	rjmp	.+58     	; 0x4fe0 <vfprintf+0xf8>
    4fa6:	37 fc       	sbrc	r3, 7
    4fa8:	2d c0       	rjmp	.+90     	; 0x5004 <vfprintf+0x11c>
    4faa:	20 ed       	ldi	r18, 0xD0	; 208
    4fac:	28 0f       	add	r18, r24
    4fae:	2a 30       	cpi	r18, 0x0A	; 10
    4fb0:	40 f0       	brcs	.+16     	; 0x4fc2 <vfprintf+0xda>
    4fb2:	8e 32       	cpi	r24, 0x2E	; 46
    4fb4:	b9 f4       	brne	.+46     	; 0x4fe4 <vfprintf+0xfc>
    4fb6:	36 fc       	sbrc	r3, 6
    4fb8:	75 c1       	rjmp	.+746    	; 0x52a4 <vfprintf+0x3bc>
    4fba:	23 2d       	mov	r18, r3
    4fbc:	20 64       	ori	r18, 0x40	; 64
    4fbe:	32 2e       	mov	r3, r18
    4fc0:	19 c0       	rjmp	.+50     	; 0x4ff4 <vfprintf+0x10c>
    4fc2:	36 fe       	sbrs	r3, 6
    4fc4:	06 c0       	rjmp	.+12     	; 0x4fd2 <vfprintf+0xea>
    4fc6:	8a e0       	ldi	r24, 0x0A	; 10
    4fc8:	98 9e       	mul	r9, r24
    4fca:	20 0d       	add	r18, r0
    4fcc:	11 24       	eor	r1, r1
    4fce:	92 2e       	mov	r9, r18
    4fd0:	11 c0       	rjmp	.+34     	; 0x4ff4 <vfprintf+0x10c>
    4fd2:	ea e0       	ldi	r30, 0x0A	; 10
    4fd4:	2e 9e       	mul	r2, r30
    4fd6:	20 0d       	add	r18, r0
    4fd8:	11 24       	eor	r1, r1
    4fda:	22 2e       	mov	r2, r18
    4fdc:	f3 2d       	mov	r31, r3
    4fde:	f0 62       	ori	r31, 0x20	; 32
    4fe0:	3f 2e       	mov	r3, r31
    4fe2:	08 c0       	rjmp	.+16     	; 0x4ff4 <vfprintf+0x10c>
    4fe4:	8c 36       	cpi	r24, 0x6C	; 108
    4fe6:	21 f4       	brne	.+8      	; 0x4ff0 <vfprintf+0x108>
    4fe8:	83 2d       	mov	r24, r3
    4fea:	80 68       	ori	r24, 0x80	; 128
    4fec:	38 2e       	mov	r3, r24
    4fee:	02 c0       	rjmp	.+4      	; 0x4ff4 <vfprintf+0x10c>
    4ff0:	88 36       	cpi	r24, 0x68	; 104
    4ff2:	41 f4       	brne	.+16     	; 0x5004 <vfprintf+0x11c>
    4ff4:	f7 01       	movw	r30, r14
    4ff6:	93 fd       	sbrc	r25, 3
    4ff8:	85 91       	lpm	r24, Z+
    4ffa:	93 ff       	sbrs	r25, 3
    4ffc:	81 91       	ld	r24, Z+
    4ffe:	7f 01       	movw	r14, r30
    5000:	81 11       	cpse	r24, r1
    5002:	b3 cf       	rjmp	.-154    	; 0x4f6a <vfprintf+0x82>
    5004:	98 2f       	mov	r25, r24
    5006:	9f 7d       	andi	r25, 0xDF	; 223
    5008:	95 54       	subi	r25, 0x45	; 69
    500a:	93 30       	cpi	r25, 0x03	; 3
    500c:	28 f4       	brcc	.+10     	; 0x5018 <vfprintf+0x130>
    500e:	0c 5f       	subi	r16, 0xFC	; 252
    5010:	1f 4f       	sbci	r17, 0xFF	; 255
    5012:	9f e3       	ldi	r25, 0x3F	; 63
    5014:	99 83       	std	Y+1, r25	; 0x01
    5016:	0d c0       	rjmp	.+26     	; 0x5032 <vfprintf+0x14a>
    5018:	83 36       	cpi	r24, 0x63	; 99
    501a:	31 f0       	breq	.+12     	; 0x5028 <vfprintf+0x140>
    501c:	83 37       	cpi	r24, 0x73	; 115
    501e:	71 f0       	breq	.+28     	; 0x503c <vfprintf+0x154>
    5020:	83 35       	cpi	r24, 0x53	; 83
    5022:	09 f0       	breq	.+2      	; 0x5026 <vfprintf+0x13e>
    5024:	55 c0       	rjmp	.+170    	; 0x50d0 <vfprintf+0x1e8>
    5026:	20 c0       	rjmp	.+64     	; 0x5068 <vfprintf+0x180>
    5028:	f8 01       	movw	r30, r16
    502a:	80 81       	ld	r24, Z
    502c:	89 83       	std	Y+1, r24	; 0x01
    502e:	0e 5f       	subi	r16, 0xFE	; 254
    5030:	1f 4f       	sbci	r17, 0xFF	; 255
    5032:	88 24       	eor	r8, r8
    5034:	83 94       	inc	r8
    5036:	91 2c       	mov	r9, r1
    5038:	53 01       	movw	r10, r6
    503a:	12 c0       	rjmp	.+36     	; 0x5060 <vfprintf+0x178>
    503c:	28 01       	movw	r4, r16
    503e:	f2 e0       	ldi	r31, 0x02	; 2
    5040:	4f 0e       	add	r4, r31
    5042:	51 1c       	adc	r5, r1
    5044:	f8 01       	movw	r30, r16
    5046:	a0 80       	ld	r10, Z
    5048:	b1 80       	ldd	r11, Z+1	; 0x01
    504a:	36 fe       	sbrs	r3, 6
    504c:	03 c0       	rjmp	.+6      	; 0x5054 <vfprintf+0x16c>
    504e:	69 2d       	mov	r22, r9
    5050:	70 e0       	ldi	r23, 0x00	; 0
    5052:	02 c0       	rjmp	.+4      	; 0x5058 <vfprintf+0x170>
    5054:	6f ef       	ldi	r22, 0xFF	; 255
    5056:	7f ef       	ldi	r23, 0xFF	; 255
    5058:	c5 01       	movw	r24, r10
    505a:	4e d1       	rcall	.+668    	; 0x52f8 <strnlen>
    505c:	4c 01       	movw	r8, r24
    505e:	82 01       	movw	r16, r4
    5060:	f3 2d       	mov	r31, r3
    5062:	ff 77       	andi	r31, 0x7F	; 127
    5064:	3f 2e       	mov	r3, r31
    5066:	15 c0       	rjmp	.+42     	; 0x5092 <vfprintf+0x1aa>
    5068:	28 01       	movw	r4, r16
    506a:	22 e0       	ldi	r18, 0x02	; 2
    506c:	42 0e       	add	r4, r18
    506e:	51 1c       	adc	r5, r1
    5070:	f8 01       	movw	r30, r16
    5072:	a0 80       	ld	r10, Z
    5074:	b1 80       	ldd	r11, Z+1	; 0x01
    5076:	36 fe       	sbrs	r3, 6
    5078:	03 c0       	rjmp	.+6      	; 0x5080 <vfprintf+0x198>
    507a:	69 2d       	mov	r22, r9
    507c:	70 e0       	ldi	r23, 0x00	; 0
    507e:	02 c0       	rjmp	.+4      	; 0x5084 <vfprintf+0x19c>
    5080:	6f ef       	ldi	r22, 0xFF	; 255
    5082:	7f ef       	ldi	r23, 0xFF	; 255
    5084:	c5 01       	movw	r24, r10
    5086:	2d d1       	rcall	.+602    	; 0x52e2 <strnlen_P>
    5088:	4c 01       	movw	r8, r24
    508a:	f3 2d       	mov	r31, r3
    508c:	f0 68       	ori	r31, 0x80	; 128
    508e:	3f 2e       	mov	r3, r31
    5090:	82 01       	movw	r16, r4
    5092:	33 fc       	sbrc	r3, 3
    5094:	19 c0       	rjmp	.+50     	; 0x50c8 <vfprintf+0x1e0>
    5096:	82 2d       	mov	r24, r2
    5098:	90 e0       	ldi	r25, 0x00	; 0
    509a:	88 16       	cp	r8, r24
    509c:	99 06       	cpc	r9, r25
    509e:	a0 f4       	brcc	.+40     	; 0x50c8 <vfprintf+0x1e0>
    50a0:	b6 01       	movw	r22, r12
    50a2:	80 e2       	ldi	r24, 0x20	; 32
    50a4:	90 e0       	ldi	r25, 0x00	; 0
    50a6:	33 d1       	rcall	.+614    	; 0x530e <fputc>
    50a8:	2a 94       	dec	r2
    50aa:	f5 cf       	rjmp	.-22     	; 0x5096 <vfprintf+0x1ae>
    50ac:	f5 01       	movw	r30, r10
    50ae:	37 fc       	sbrc	r3, 7
    50b0:	85 91       	lpm	r24, Z+
    50b2:	37 fe       	sbrs	r3, 7
    50b4:	81 91       	ld	r24, Z+
    50b6:	5f 01       	movw	r10, r30
    50b8:	b6 01       	movw	r22, r12
    50ba:	90 e0       	ldi	r25, 0x00	; 0
    50bc:	28 d1       	rcall	.+592    	; 0x530e <fputc>
    50be:	21 10       	cpse	r2, r1
    50c0:	2a 94       	dec	r2
    50c2:	21 e0       	ldi	r18, 0x01	; 1
    50c4:	82 1a       	sub	r8, r18
    50c6:	91 08       	sbc	r9, r1
    50c8:	81 14       	cp	r8, r1
    50ca:	91 04       	cpc	r9, r1
    50cc:	79 f7       	brne	.-34     	; 0x50ac <vfprintf+0x1c4>
    50ce:	e1 c0       	rjmp	.+450    	; 0x5292 <vfprintf+0x3aa>
    50d0:	84 36       	cpi	r24, 0x64	; 100
    50d2:	11 f0       	breq	.+4      	; 0x50d8 <vfprintf+0x1f0>
    50d4:	89 36       	cpi	r24, 0x69	; 105
    50d6:	39 f5       	brne	.+78     	; 0x5126 <vfprintf+0x23e>
    50d8:	f8 01       	movw	r30, r16
    50da:	37 fe       	sbrs	r3, 7
    50dc:	07 c0       	rjmp	.+14     	; 0x50ec <vfprintf+0x204>
    50de:	60 81       	ld	r22, Z
    50e0:	71 81       	ldd	r23, Z+1	; 0x01
    50e2:	82 81       	ldd	r24, Z+2	; 0x02
    50e4:	93 81       	ldd	r25, Z+3	; 0x03
    50e6:	0c 5f       	subi	r16, 0xFC	; 252
    50e8:	1f 4f       	sbci	r17, 0xFF	; 255
    50ea:	08 c0       	rjmp	.+16     	; 0x50fc <vfprintf+0x214>
    50ec:	60 81       	ld	r22, Z
    50ee:	71 81       	ldd	r23, Z+1	; 0x01
    50f0:	07 2e       	mov	r0, r23
    50f2:	00 0c       	add	r0, r0
    50f4:	88 0b       	sbc	r24, r24
    50f6:	99 0b       	sbc	r25, r25
    50f8:	0e 5f       	subi	r16, 0xFE	; 254
    50fa:	1f 4f       	sbci	r17, 0xFF	; 255
    50fc:	f3 2d       	mov	r31, r3
    50fe:	ff 76       	andi	r31, 0x6F	; 111
    5100:	3f 2e       	mov	r3, r31
    5102:	97 ff       	sbrs	r25, 7
    5104:	09 c0       	rjmp	.+18     	; 0x5118 <vfprintf+0x230>
    5106:	90 95       	com	r25
    5108:	80 95       	com	r24
    510a:	70 95       	com	r23
    510c:	61 95       	neg	r22
    510e:	7f 4f       	sbci	r23, 0xFF	; 255
    5110:	8f 4f       	sbci	r24, 0xFF	; 255
    5112:	9f 4f       	sbci	r25, 0xFF	; 255
    5114:	f0 68       	ori	r31, 0x80	; 128
    5116:	3f 2e       	mov	r3, r31
    5118:	2a e0       	ldi	r18, 0x0A	; 10
    511a:	30 e0       	ldi	r19, 0x00	; 0
    511c:	a3 01       	movw	r20, r6
    511e:	33 d1       	rcall	.+614    	; 0x5386 <__ultoa_invert>
    5120:	88 2e       	mov	r8, r24
    5122:	86 18       	sub	r8, r6
    5124:	44 c0       	rjmp	.+136    	; 0x51ae <vfprintf+0x2c6>
    5126:	85 37       	cpi	r24, 0x75	; 117
    5128:	31 f4       	brne	.+12     	; 0x5136 <vfprintf+0x24e>
    512a:	23 2d       	mov	r18, r3
    512c:	2f 7e       	andi	r18, 0xEF	; 239
    512e:	b2 2e       	mov	r11, r18
    5130:	2a e0       	ldi	r18, 0x0A	; 10
    5132:	30 e0       	ldi	r19, 0x00	; 0
    5134:	25 c0       	rjmp	.+74     	; 0x5180 <vfprintf+0x298>
    5136:	93 2d       	mov	r25, r3
    5138:	99 7f       	andi	r25, 0xF9	; 249
    513a:	b9 2e       	mov	r11, r25
    513c:	8f 36       	cpi	r24, 0x6F	; 111
    513e:	c1 f0       	breq	.+48     	; 0x5170 <vfprintf+0x288>
    5140:	18 f4       	brcc	.+6      	; 0x5148 <vfprintf+0x260>
    5142:	88 35       	cpi	r24, 0x58	; 88
    5144:	79 f0       	breq	.+30     	; 0x5164 <vfprintf+0x27c>
    5146:	ae c0       	rjmp	.+348    	; 0x52a4 <vfprintf+0x3bc>
    5148:	80 37       	cpi	r24, 0x70	; 112
    514a:	19 f0       	breq	.+6      	; 0x5152 <vfprintf+0x26a>
    514c:	88 37       	cpi	r24, 0x78	; 120
    514e:	21 f0       	breq	.+8      	; 0x5158 <vfprintf+0x270>
    5150:	a9 c0       	rjmp	.+338    	; 0x52a4 <vfprintf+0x3bc>
    5152:	e9 2f       	mov	r30, r25
    5154:	e0 61       	ori	r30, 0x10	; 16
    5156:	be 2e       	mov	r11, r30
    5158:	b4 fe       	sbrs	r11, 4
    515a:	0d c0       	rjmp	.+26     	; 0x5176 <vfprintf+0x28e>
    515c:	fb 2d       	mov	r31, r11
    515e:	f4 60       	ori	r31, 0x04	; 4
    5160:	bf 2e       	mov	r11, r31
    5162:	09 c0       	rjmp	.+18     	; 0x5176 <vfprintf+0x28e>
    5164:	34 fe       	sbrs	r3, 4
    5166:	0a c0       	rjmp	.+20     	; 0x517c <vfprintf+0x294>
    5168:	29 2f       	mov	r18, r25
    516a:	26 60       	ori	r18, 0x06	; 6
    516c:	b2 2e       	mov	r11, r18
    516e:	06 c0       	rjmp	.+12     	; 0x517c <vfprintf+0x294>
    5170:	28 e0       	ldi	r18, 0x08	; 8
    5172:	30 e0       	ldi	r19, 0x00	; 0
    5174:	05 c0       	rjmp	.+10     	; 0x5180 <vfprintf+0x298>
    5176:	20 e1       	ldi	r18, 0x10	; 16
    5178:	30 e0       	ldi	r19, 0x00	; 0
    517a:	02 c0       	rjmp	.+4      	; 0x5180 <vfprintf+0x298>
    517c:	20 e1       	ldi	r18, 0x10	; 16
    517e:	32 e0       	ldi	r19, 0x02	; 2
    5180:	f8 01       	movw	r30, r16
    5182:	b7 fe       	sbrs	r11, 7
    5184:	07 c0       	rjmp	.+14     	; 0x5194 <vfprintf+0x2ac>
    5186:	60 81       	ld	r22, Z
    5188:	71 81       	ldd	r23, Z+1	; 0x01
    518a:	82 81       	ldd	r24, Z+2	; 0x02
    518c:	93 81       	ldd	r25, Z+3	; 0x03
    518e:	0c 5f       	subi	r16, 0xFC	; 252
    5190:	1f 4f       	sbci	r17, 0xFF	; 255
    5192:	06 c0       	rjmp	.+12     	; 0x51a0 <vfprintf+0x2b8>
    5194:	60 81       	ld	r22, Z
    5196:	71 81       	ldd	r23, Z+1	; 0x01
    5198:	80 e0       	ldi	r24, 0x00	; 0
    519a:	90 e0       	ldi	r25, 0x00	; 0
    519c:	0e 5f       	subi	r16, 0xFE	; 254
    519e:	1f 4f       	sbci	r17, 0xFF	; 255
    51a0:	a3 01       	movw	r20, r6
    51a2:	f1 d0       	rcall	.+482    	; 0x5386 <__ultoa_invert>
    51a4:	88 2e       	mov	r8, r24
    51a6:	86 18       	sub	r8, r6
    51a8:	fb 2d       	mov	r31, r11
    51aa:	ff 77       	andi	r31, 0x7F	; 127
    51ac:	3f 2e       	mov	r3, r31
    51ae:	36 fe       	sbrs	r3, 6
    51b0:	0d c0       	rjmp	.+26     	; 0x51cc <vfprintf+0x2e4>
    51b2:	23 2d       	mov	r18, r3
    51b4:	2e 7f       	andi	r18, 0xFE	; 254
    51b6:	a2 2e       	mov	r10, r18
    51b8:	89 14       	cp	r8, r9
    51ba:	58 f4       	brcc	.+22     	; 0x51d2 <vfprintf+0x2ea>
    51bc:	34 fe       	sbrs	r3, 4
    51be:	0b c0       	rjmp	.+22     	; 0x51d6 <vfprintf+0x2ee>
    51c0:	32 fc       	sbrc	r3, 2
    51c2:	09 c0       	rjmp	.+18     	; 0x51d6 <vfprintf+0x2ee>
    51c4:	83 2d       	mov	r24, r3
    51c6:	8e 7e       	andi	r24, 0xEE	; 238
    51c8:	a8 2e       	mov	r10, r24
    51ca:	05 c0       	rjmp	.+10     	; 0x51d6 <vfprintf+0x2ee>
    51cc:	b8 2c       	mov	r11, r8
    51ce:	a3 2c       	mov	r10, r3
    51d0:	03 c0       	rjmp	.+6      	; 0x51d8 <vfprintf+0x2f0>
    51d2:	b8 2c       	mov	r11, r8
    51d4:	01 c0       	rjmp	.+2      	; 0x51d8 <vfprintf+0x2f0>
    51d6:	b9 2c       	mov	r11, r9
    51d8:	a4 fe       	sbrs	r10, 4
    51da:	0f c0       	rjmp	.+30     	; 0x51fa <vfprintf+0x312>
    51dc:	fe 01       	movw	r30, r28
    51de:	e8 0d       	add	r30, r8
    51e0:	f1 1d       	adc	r31, r1
    51e2:	80 81       	ld	r24, Z
    51e4:	80 33       	cpi	r24, 0x30	; 48
    51e6:	21 f4       	brne	.+8      	; 0x51f0 <vfprintf+0x308>
    51e8:	9a 2d       	mov	r25, r10
    51ea:	99 7e       	andi	r25, 0xE9	; 233
    51ec:	a9 2e       	mov	r10, r25
    51ee:	09 c0       	rjmp	.+18     	; 0x5202 <vfprintf+0x31a>
    51f0:	a2 fe       	sbrs	r10, 2
    51f2:	06 c0       	rjmp	.+12     	; 0x5200 <vfprintf+0x318>
    51f4:	b3 94       	inc	r11
    51f6:	b3 94       	inc	r11
    51f8:	04 c0       	rjmp	.+8      	; 0x5202 <vfprintf+0x31a>
    51fa:	8a 2d       	mov	r24, r10
    51fc:	86 78       	andi	r24, 0x86	; 134
    51fe:	09 f0       	breq	.+2      	; 0x5202 <vfprintf+0x31a>
    5200:	b3 94       	inc	r11
    5202:	a3 fc       	sbrc	r10, 3
    5204:	10 c0       	rjmp	.+32     	; 0x5226 <vfprintf+0x33e>
    5206:	a0 fe       	sbrs	r10, 0
    5208:	06 c0       	rjmp	.+12     	; 0x5216 <vfprintf+0x32e>
    520a:	b2 14       	cp	r11, r2
    520c:	80 f4       	brcc	.+32     	; 0x522e <vfprintf+0x346>
    520e:	28 0c       	add	r2, r8
    5210:	92 2c       	mov	r9, r2
    5212:	9b 18       	sub	r9, r11
    5214:	0d c0       	rjmp	.+26     	; 0x5230 <vfprintf+0x348>
    5216:	b2 14       	cp	r11, r2
    5218:	58 f4       	brcc	.+22     	; 0x5230 <vfprintf+0x348>
    521a:	b6 01       	movw	r22, r12
    521c:	80 e2       	ldi	r24, 0x20	; 32
    521e:	90 e0       	ldi	r25, 0x00	; 0
    5220:	76 d0       	rcall	.+236    	; 0x530e <fputc>
    5222:	b3 94       	inc	r11
    5224:	f8 cf       	rjmp	.-16     	; 0x5216 <vfprintf+0x32e>
    5226:	b2 14       	cp	r11, r2
    5228:	18 f4       	brcc	.+6      	; 0x5230 <vfprintf+0x348>
    522a:	2b 18       	sub	r2, r11
    522c:	02 c0       	rjmp	.+4      	; 0x5232 <vfprintf+0x34a>
    522e:	98 2c       	mov	r9, r8
    5230:	21 2c       	mov	r2, r1
    5232:	a4 fe       	sbrs	r10, 4
    5234:	0f c0       	rjmp	.+30     	; 0x5254 <vfprintf+0x36c>
    5236:	b6 01       	movw	r22, r12
    5238:	80 e3       	ldi	r24, 0x30	; 48
    523a:	90 e0       	ldi	r25, 0x00	; 0
    523c:	68 d0       	rcall	.+208    	; 0x530e <fputc>
    523e:	a2 fe       	sbrs	r10, 2
    5240:	16 c0       	rjmp	.+44     	; 0x526e <vfprintf+0x386>
    5242:	a1 fc       	sbrc	r10, 1
    5244:	03 c0       	rjmp	.+6      	; 0x524c <vfprintf+0x364>
    5246:	88 e7       	ldi	r24, 0x78	; 120
    5248:	90 e0       	ldi	r25, 0x00	; 0
    524a:	02 c0       	rjmp	.+4      	; 0x5250 <vfprintf+0x368>
    524c:	88 e5       	ldi	r24, 0x58	; 88
    524e:	90 e0       	ldi	r25, 0x00	; 0
    5250:	b6 01       	movw	r22, r12
    5252:	0c c0       	rjmp	.+24     	; 0x526c <vfprintf+0x384>
    5254:	8a 2d       	mov	r24, r10
    5256:	86 78       	andi	r24, 0x86	; 134
    5258:	51 f0       	breq	.+20     	; 0x526e <vfprintf+0x386>
    525a:	a1 fe       	sbrs	r10, 1
    525c:	02 c0       	rjmp	.+4      	; 0x5262 <vfprintf+0x37a>
    525e:	8b e2       	ldi	r24, 0x2B	; 43
    5260:	01 c0       	rjmp	.+2      	; 0x5264 <vfprintf+0x37c>
    5262:	80 e2       	ldi	r24, 0x20	; 32
    5264:	a7 fc       	sbrc	r10, 7
    5266:	8d e2       	ldi	r24, 0x2D	; 45
    5268:	b6 01       	movw	r22, r12
    526a:	90 e0       	ldi	r25, 0x00	; 0
    526c:	50 d0       	rcall	.+160    	; 0x530e <fputc>
    526e:	89 14       	cp	r8, r9
    5270:	30 f4       	brcc	.+12     	; 0x527e <vfprintf+0x396>
    5272:	b6 01       	movw	r22, r12
    5274:	80 e3       	ldi	r24, 0x30	; 48
    5276:	90 e0       	ldi	r25, 0x00	; 0
    5278:	4a d0       	rcall	.+148    	; 0x530e <fputc>
    527a:	9a 94       	dec	r9
    527c:	f8 cf       	rjmp	.-16     	; 0x526e <vfprintf+0x386>
    527e:	8a 94       	dec	r8
    5280:	f3 01       	movw	r30, r6
    5282:	e8 0d       	add	r30, r8
    5284:	f1 1d       	adc	r31, r1
    5286:	80 81       	ld	r24, Z
    5288:	b6 01       	movw	r22, r12
    528a:	90 e0       	ldi	r25, 0x00	; 0
    528c:	40 d0       	rcall	.+128    	; 0x530e <fputc>
    528e:	81 10       	cpse	r8, r1
    5290:	f6 cf       	rjmp	.-20     	; 0x527e <vfprintf+0x396>
    5292:	22 20       	and	r2, r2
    5294:	09 f4       	brne	.+2      	; 0x5298 <vfprintf+0x3b0>
    5296:	4e ce       	rjmp	.-868    	; 0x4f34 <vfprintf+0x4c>
    5298:	b6 01       	movw	r22, r12
    529a:	80 e2       	ldi	r24, 0x20	; 32
    529c:	90 e0       	ldi	r25, 0x00	; 0
    529e:	37 d0       	rcall	.+110    	; 0x530e <fputc>
    52a0:	2a 94       	dec	r2
    52a2:	f7 cf       	rjmp	.-18     	; 0x5292 <vfprintf+0x3aa>
    52a4:	f6 01       	movw	r30, r12
    52a6:	86 81       	ldd	r24, Z+6	; 0x06
    52a8:	97 81       	ldd	r25, Z+7	; 0x07
    52aa:	02 c0       	rjmp	.+4      	; 0x52b0 <vfprintf+0x3c8>
    52ac:	8f ef       	ldi	r24, 0xFF	; 255
    52ae:	9f ef       	ldi	r25, 0xFF	; 255
    52b0:	2b 96       	adiw	r28, 0x0b	; 11
    52b2:	0f b6       	in	r0, 0x3f	; 63
    52b4:	f8 94       	cli
    52b6:	de bf       	out	0x3e, r29	; 62
    52b8:	0f be       	out	0x3f, r0	; 63
    52ba:	cd bf       	out	0x3d, r28	; 61
    52bc:	df 91       	pop	r29
    52be:	cf 91       	pop	r28
    52c0:	1f 91       	pop	r17
    52c2:	0f 91       	pop	r16
    52c4:	ff 90       	pop	r15
    52c6:	ef 90       	pop	r14
    52c8:	df 90       	pop	r13
    52ca:	cf 90       	pop	r12
    52cc:	bf 90       	pop	r11
    52ce:	af 90       	pop	r10
    52d0:	9f 90       	pop	r9
    52d2:	8f 90       	pop	r8
    52d4:	7f 90       	pop	r7
    52d6:	6f 90       	pop	r6
    52d8:	5f 90       	pop	r5
    52da:	4f 90       	pop	r4
    52dc:	3f 90       	pop	r3
    52de:	2f 90       	pop	r2
    52e0:	08 95       	ret

000052e2 <strnlen_P>:
    52e2:	fc 01       	movw	r30, r24
    52e4:	05 90       	lpm	r0, Z+
    52e6:	61 50       	subi	r22, 0x01	; 1
    52e8:	70 40       	sbci	r23, 0x00	; 0
    52ea:	01 10       	cpse	r0, r1
    52ec:	d8 f7       	brcc	.-10     	; 0x52e4 <strnlen_P+0x2>
    52ee:	80 95       	com	r24
    52f0:	90 95       	com	r25
    52f2:	8e 0f       	add	r24, r30
    52f4:	9f 1f       	adc	r25, r31
    52f6:	08 95       	ret

000052f8 <strnlen>:
    52f8:	fc 01       	movw	r30, r24
    52fa:	61 50       	subi	r22, 0x01	; 1
    52fc:	70 40       	sbci	r23, 0x00	; 0
    52fe:	01 90       	ld	r0, Z+
    5300:	01 10       	cpse	r0, r1
    5302:	d8 f7       	brcc	.-10     	; 0x52fa <strnlen+0x2>
    5304:	80 95       	com	r24
    5306:	90 95       	com	r25
    5308:	8e 0f       	add	r24, r30
    530a:	9f 1f       	adc	r25, r31
    530c:	08 95       	ret

0000530e <fputc>:
    530e:	0f 93       	push	r16
    5310:	1f 93       	push	r17
    5312:	cf 93       	push	r28
    5314:	df 93       	push	r29
    5316:	fb 01       	movw	r30, r22
    5318:	23 81       	ldd	r18, Z+3	; 0x03
    531a:	21 fd       	sbrc	r18, 1
    531c:	03 c0       	rjmp	.+6      	; 0x5324 <fputc+0x16>
    531e:	8f ef       	ldi	r24, 0xFF	; 255
    5320:	9f ef       	ldi	r25, 0xFF	; 255
    5322:	2c c0       	rjmp	.+88     	; 0x537c <fputc+0x6e>
    5324:	22 ff       	sbrs	r18, 2
    5326:	16 c0       	rjmp	.+44     	; 0x5354 <fputc+0x46>
    5328:	46 81       	ldd	r20, Z+6	; 0x06
    532a:	57 81       	ldd	r21, Z+7	; 0x07
    532c:	24 81       	ldd	r18, Z+4	; 0x04
    532e:	35 81       	ldd	r19, Z+5	; 0x05
    5330:	42 17       	cp	r20, r18
    5332:	53 07       	cpc	r21, r19
    5334:	44 f4       	brge	.+16     	; 0x5346 <fputc+0x38>
    5336:	a0 81       	ld	r26, Z
    5338:	b1 81       	ldd	r27, Z+1	; 0x01
    533a:	9d 01       	movw	r18, r26
    533c:	2f 5f       	subi	r18, 0xFF	; 255
    533e:	3f 4f       	sbci	r19, 0xFF	; 255
    5340:	31 83       	std	Z+1, r19	; 0x01
    5342:	20 83       	st	Z, r18
    5344:	8c 93       	st	X, r24
    5346:	26 81       	ldd	r18, Z+6	; 0x06
    5348:	37 81       	ldd	r19, Z+7	; 0x07
    534a:	2f 5f       	subi	r18, 0xFF	; 255
    534c:	3f 4f       	sbci	r19, 0xFF	; 255
    534e:	37 83       	std	Z+7, r19	; 0x07
    5350:	26 83       	std	Z+6, r18	; 0x06
    5352:	14 c0       	rjmp	.+40     	; 0x537c <fputc+0x6e>
    5354:	8b 01       	movw	r16, r22
    5356:	ec 01       	movw	r28, r24
    5358:	fb 01       	movw	r30, r22
    535a:	00 84       	ldd	r0, Z+8	; 0x08
    535c:	f1 85       	ldd	r31, Z+9	; 0x09
    535e:	e0 2d       	mov	r30, r0
    5360:	19 95       	eicall
    5362:	89 2b       	or	r24, r25
    5364:	e1 f6       	brne	.-72     	; 0x531e <fputc+0x10>
    5366:	d8 01       	movw	r26, r16
    5368:	16 96       	adiw	r26, 0x06	; 6
    536a:	8d 91       	ld	r24, X+
    536c:	9c 91       	ld	r25, X
    536e:	17 97       	sbiw	r26, 0x07	; 7
    5370:	01 96       	adiw	r24, 0x01	; 1
    5372:	17 96       	adiw	r26, 0x07	; 7
    5374:	9c 93       	st	X, r25
    5376:	8e 93       	st	-X, r24
    5378:	16 97       	sbiw	r26, 0x06	; 6
    537a:	ce 01       	movw	r24, r28
    537c:	df 91       	pop	r29
    537e:	cf 91       	pop	r28
    5380:	1f 91       	pop	r17
    5382:	0f 91       	pop	r16
    5384:	08 95       	ret

00005386 <__ultoa_invert>:
    5386:	fa 01       	movw	r30, r20
    5388:	aa 27       	eor	r26, r26
    538a:	28 30       	cpi	r18, 0x08	; 8
    538c:	51 f1       	breq	.+84     	; 0x53e2 <__ultoa_invert+0x5c>
    538e:	20 31       	cpi	r18, 0x10	; 16
    5390:	81 f1       	breq	.+96     	; 0x53f2 <__ultoa_invert+0x6c>
    5392:	e8 94       	clt
    5394:	6f 93       	push	r22
    5396:	6e 7f       	andi	r22, 0xFE	; 254
    5398:	6e 5f       	subi	r22, 0xFE	; 254
    539a:	7f 4f       	sbci	r23, 0xFF	; 255
    539c:	8f 4f       	sbci	r24, 0xFF	; 255
    539e:	9f 4f       	sbci	r25, 0xFF	; 255
    53a0:	af 4f       	sbci	r26, 0xFF	; 255
    53a2:	b1 e0       	ldi	r27, 0x01	; 1
    53a4:	3e d0       	rcall	.+124    	; 0x5422 <__ultoa_invert+0x9c>
    53a6:	b4 e0       	ldi	r27, 0x04	; 4
    53a8:	3c d0       	rcall	.+120    	; 0x5422 <__ultoa_invert+0x9c>
    53aa:	67 0f       	add	r22, r23
    53ac:	78 1f       	adc	r23, r24
    53ae:	89 1f       	adc	r24, r25
    53b0:	9a 1f       	adc	r25, r26
    53b2:	a1 1d       	adc	r26, r1
    53b4:	68 0f       	add	r22, r24
    53b6:	79 1f       	adc	r23, r25
    53b8:	8a 1f       	adc	r24, r26
    53ba:	91 1d       	adc	r25, r1
    53bc:	a1 1d       	adc	r26, r1
    53be:	6a 0f       	add	r22, r26
    53c0:	71 1d       	adc	r23, r1
    53c2:	81 1d       	adc	r24, r1
    53c4:	91 1d       	adc	r25, r1
    53c6:	a1 1d       	adc	r26, r1
    53c8:	20 d0       	rcall	.+64     	; 0x540a <__ultoa_invert+0x84>
    53ca:	09 f4       	brne	.+2      	; 0x53ce <__ultoa_invert+0x48>
    53cc:	68 94       	set
    53ce:	3f 91       	pop	r19
    53d0:	2a e0       	ldi	r18, 0x0A	; 10
    53d2:	26 9f       	mul	r18, r22
    53d4:	11 24       	eor	r1, r1
    53d6:	30 19       	sub	r19, r0
    53d8:	30 5d       	subi	r19, 0xD0	; 208
    53da:	31 93       	st	Z+, r19
    53dc:	de f6       	brtc	.-74     	; 0x5394 <__ultoa_invert+0xe>
    53de:	cf 01       	movw	r24, r30
    53e0:	08 95       	ret
    53e2:	46 2f       	mov	r20, r22
    53e4:	47 70       	andi	r20, 0x07	; 7
    53e6:	40 5d       	subi	r20, 0xD0	; 208
    53e8:	41 93       	st	Z+, r20
    53ea:	b3 e0       	ldi	r27, 0x03	; 3
    53ec:	0f d0       	rcall	.+30     	; 0x540c <__ultoa_invert+0x86>
    53ee:	c9 f7       	brne	.-14     	; 0x53e2 <__ultoa_invert+0x5c>
    53f0:	f6 cf       	rjmp	.-20     	; 0x53de <__ultoa_invert+0x58>
    53f2:	46 2f       	mov	r20, r22
    53f4:	4f 70       	andi	r20, 0x0F	; 15
    53f6:	40 5d       	subi	r20, 0xD0	; 208
    53f8:	4a 33       	cpi	r20, 0x3A	; 58
    53fa:	18 f0       	brcs	.+6      	; 0x5402 <__ultoa_invert+0x7c>
    53fc:	49 5d       	subi	r20, 0xD9	; 217
    53fe:	31 fd       	sbrc	r19, 1
    5400:	40 52       	subi	r20, 0x20	; 32
    5402:	41 93       	st	Z+, r20
    5404:	02 d0       	rcall	.+4      	; 0x540a <__ultoa_invert+0x84>
    5406:	a9 f7       	brne	.-22     	; 0x53f2 <__ultoa_invert+0x6c>
    5408:	ea cf       	rjmp	.-44     	; 0x53de <__ultoa_invert+0x58>
    540a:	b4 e0       	ldi	r27, 0x04	; 4
    540c:	a6 95       	lsr	r26
    540e:	97 95       	ror	r25
    5410:	87 95       	ror	r24
    5412:	77 95       	ror	r23
    5414:	67 95       	ror	r22
    5416:	ba 95       	dec	r27
    5418:	c9 f7       	brne	.-14     	; 0x540c <__ultoa_invert+0x86>
    541a:	00 97       	sbiw	r24, 0x00	; 0
    541c:	61 05       	cpc	r22, r1
    541e:	71 05       	cpc	r23, r1
    5420:	08 95       	ret
    5422:	9b 01       	movw	r18, r22
    5424:	ac 01       	movw	r20, r24
    5426:	0a 2e       	mov	r0, r26
    5428:	06 94       	lsr	r0
    542a:	57 95       	ror	r21
    542c:	47 95       	ror	r20
    542e:	37 95       	ror	r19
    5430:	27 95       	ror	r18
    5432:	ba 95       	dec	r27
    5434:	c9 f7       	brne	.-14     	; 0x5428 <__ultoa_invert+0xa2>
    5436:	62 0f       	add	r22, r18
    5438:	73 1f       	adc	r23, r19
    543a:	84 1f       	adc	r24, r20
    543c:	95 1f       	adc	r25, r21
    543e:	a0 1d       	adc	r26, r0
    5440:	08 95       	ret

00005442 <_exit>:
    5442:	f8 94       	cli

00005444 <__stop_program>:
    5444:	ff cf       	rjmp	.-2      	; 0x5444 <__stop_program>
