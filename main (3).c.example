/*
* main.c
* Author : IHA
*
* Example main file including LoRaWAN setup
* Just for inspiration :)
*/

#include <stdio.h>
#include <avr/io.h>

#include <ATMEGA_FreeRTOS.h>
#include <task.h>
#include <semphr.h>

#include <stdio_driver.h>
#include <serial.h>
#include <hih8120.h>

 // Needed for LoRaWAN
#include <lora_driver.h>
#include <status_leds.h>

// define two Tasks
void task1( void *pvParameters );
void task2( void *pvParameters );
void task3( void *pvParameters );

// define semaphore handle
SemaphoreHandle_t xTestSemaphore;

// Prototype for LoRaWAN handler
void lora_handler_initialise(UBaseType_t lora_handler_task_priority);

int16_t temperature = 0;





void loraWan_Setup ()
{
	
	if (lora_driver_rn2483FactoryReset() != LORA_OK)
	{
		printf("går galt i factory reset \n");
	}
	else {
		printf("else statement , factory reset");
	}
	
	if (lora_driver_configureToEu868() != LORA_OK)
	{
printf("går gant i configure EU868");
	}
		else {
			printf("else statement , configure to Eu868");
		}
	
	
	static char devEui[17] = "0004A30B00259F36"; // It is static to avoid it to occupy stack space in the task
	if (lora_driver_getRn2483Hweui(devEui) != LORA_OK)
	{
		printf("går galt i get rn284Huewi \n");
	}
		else {
			printf("else statement , rn284 heuwi");
		}
	
	if (lora_driver_setOtaaIdentity("2E20554EE0BE7265","D951DC87A928E70B1C2EDD116E87352F",devEui) != LORA_OK)
	{
		
		printf("går galt i set0 taa identity \n");
		// Something went wrong
	}
		else {
			printf("else statement , set taa identity");
		}
	
	if (lora_driver_saveMac() != LORA_OK)
	{
		printf("går galt i save mac \n");
		// Something went wrong
	}
	
		else {
			printf("else statement , save mac");
		}
	
	// All parameters are now saved in the module
	
	if (lora_driver_join(LORA_OTAA) == LORA_ACCEPTED)
	{
		// You are now joined
		printf("Joiner driveren ?");
	}
	else 
	{
		printf("else statement , joiner ikke");
		
	}
}



void send_Data()
{
	
	lora_driver_payload_t uplinkPayload;

	uplinkPayload.len = 4; // Length of the actual payload
	uplinkPayload.portNo = 1; // The LoRaWAN port no to sent the message to
	
	uplinkPayload.bytes[0] = 20 >> 8;
	uplinkPayload.bytes[1] = 20 & 0xFF;
	uplinkPayload.bytes[2] = 30 >> 8;
	uplinkPayload.bytes[3] = 30 & 0xFF;
	
	lora_driver_returnCode_t rc;

	
	
	for(;;)
	{
	vTaskDelay(100)	;

	
	if ((rc = lora_driver_sendUploadMessage(false, &uplinkPayload)) == LORA_MAC_TX_OK )
	{

		
	printf(" uplink return code, no downlink %d \n",rc);
		// The uplink message is sent and there is no downlink message received
	}
	else if (rc == LORA_MAC_RX)
	{
		
		printf("downlink msg ? ");
		// The uplink message is sent and a downlink message is received
	}
		printf(" uplink return code %d \n",rc);

	}
	
	
	
}


void loraWan_TaskReset()
{
	lora_driver_resetRn2483(1); // Activate reset line
	vTaskDelay(2);
	lora_driver_resetRn2483(0); // Release reset line
	vTaskDelay(150); // Wait for tranceiver module to wake up after reset
	lora_driver_flushBuffers(); // get rid of first version string from module after reset!

}



/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
		if ( ( xTestSemaphore ) != NULL )
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
		}
	}

	xTaskCreate(
	task1
	,  "Task1"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
	task2
	,  "Task2"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
	xTaskCreate(
	task3,
	"Task3",
	configMINIMAL_STACK_SIZE,
	NULL,
	3,
	NULL);
}

/*-----------------------------------------------------------*/
void task1( void *pvParameters )
{
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 500/portTICK_PERIOD_MS; // 500 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
		//puts("Task1"); // stdio functions are not reentrant - Should normally be protected by MUTEX
		PORTA ^= _BV(PA0);
	}
}

/*-----------------------------------------------------------*/
void task2( void *pvParameters )
{
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000/portTICK_PERIOD_MS; // 1000 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
		//puts("Task2"); // stdio functions are not reentrant - Should normally be protected by MUTEX
		PORTA ^= _BV(PA7);
	}
}

void task3(void *pvParameters) {
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000/portTICK_PERIOD_MS; // 1000 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();


	for(;;)
	{
	       vTaskDelay(100);
			if ( HIH8120_OK != hih8120_wakeup() )
			{
				// Something went wrong
				printf("Something went wrong with wakeup of sensor");
				// Investigate the return code further
			}
		      vTaskDelay(100);
			if ( HIH8120_OK !=  hih8120_measure() )
			{
				// Something went wrong
				printf("Something went wrong measure");
				// Investigate the return code further
			}
			vTaskDelay(100);
		temperature = hih8120_getTemperature_x10();
		printf("%d ", temperature); // stdio functions are not reentrant - Should normally be protected by MUTEX
	}
}

/*-----------------------------------------------------------*/
void initialiseSystem()
{

	
	
	if ( HIH8120_OK == hih8120_initialise() )
	{
		// Driver initialised OK
		printf("Driver initialised OK");
		// Always check what hih8120_initialise() returns
	}
	
	
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
	// Let's create some tasks
	create_tasks_and_semaphores();

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
	
	



}




/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.

	/* Replace with your application code */
	while (1)
	{
		puts("Hej");
	}
}

